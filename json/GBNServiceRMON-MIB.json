{
  "imports": {
    "class": "imports",
    "GREENTECH-MASTER-MIB": [
      "rmonMib"
    ],
    "SNMPv2-CONF": [
      "MODULE-COMPLIANCE",
      "NOTIFICATION-GROUP"
    ],
    "SNMPv2-SMI": [
      "Counter64",
      "OBJECT-IDENTITY",
      "Bits",
      "Gauge32",
      "IpAddress",
      "Integer32",
      "TRAP-TYPE",
      "TimeTicks",
      "OBJECT-TYPE",
      "Counter32",
      "MibIdentifier",
      "iso",
      "mib-2",
      "Unsigned32",
      "MODULE-IDENTITY",
      "NOTIFICATION-TYPE"
    ],
    "SNMPv2-TC": [
      "DisplayString",
      "TEXTUAL-CONVENTION"
    ]
  },
  "OwnerString": {
    "name": "OwnerString",
    "class": "type",
    "type": {
      "type": "DisplayString",
      "class": "type"
    }
  },
  "EntryStatus": {
    "name": "EntryStatus",
    "class": "type",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "valid": 1,
          "createRequest": 2,
          "underCreation": 3,
          "invalid": 4
        }
      }
    }
  },
  "rStatistics": {
    "name": "rStatistics",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1",
    "class": "objectidentity"
  },
  "rHistory": {
    "name": "rHistory",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2",
    "class": "objectidentity"
  },
  "rAlarm": {
    "name": "rAlarm",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.3",
    "class": "objectidentity"
  },
  "rEvent": {
    "name": "rEvent",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.9",
    "class": "objectidentity"
  },
  "rEtherStatsTable": {
    "name": "rEtherStatsTable",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A list of Ethernet statistics entries."
  },
  "rEtherStatsEntry": {
    "name": "rEtherStatsEntry",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rEtherStatsIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "A collection of statistics kept for a particular Ethernet interface. As an example, an instance of the etherStatsPkts object might be named etherStatsPkts.1"
  },
  "rEtherStatsIndex": {
    "name": "rEtherStatsIndex",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The value of this object uniquely identifies this etherStats entry."
  },
  "rEtherStatsDataSource": {
    "name": "rEtherStatsDataSource",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This object identifies the source of the data that this etherStats entry is configured to analyze. This source can be any ethernet interface on this device. In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in RFC 1213 and RFC 1573 [4,6], for the desired interface. For example, if an entry were to receive data from interface #1, this object would be set to ifIndex.1. The statistics in this group reflect all packets on the local network segment attached to the identified interface. An agent may or may not be able to tell if fundamental changes to the media of the interface have occurred and necessitate an invalidation of this entry. For example, a hot-pluggable ethernet card could be pulled out and replaced by a token-ring card. In such a case, if the agent has such knowledge of the change, it is recommended that it invalidate this entry. This object may not be modified if the associated etherStatsStatus object is equal to valid(1)."
  },
  "rEtherStatsDropEvents": {
    "name": "rEtherStatsDropEvents",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of events in which packets were dropped by the probe due to lack of resources. Note that this number is not necessarily the number of packets dropped; it is just the number of times this condition has been detected."
  },
  "rEtherStatsOctets": {
    "name": "rEtherStatsOctets",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of octets of data (including those in bad packets) received on the network (excluding framing bits but including FCS octets). This object can be used as a reasonable estimate of ethernet utilization. If greater precision is desired, the etherStatsPkts and etherStatsOctets objects should be sampled before and after a common interval. The differences in the sampled values are Pkts and Octets, respectively, and the number of seconds in the interval is Interval. These values are used to calculate the Utilization as follows: Pkts * (9.6 + 6.4) + (Octets * .8) Utilization = ------------------------------------- Interval * 10,000 The result of this equation is the value Utilization which is the percent utilization of the ethernet segment on a scale of 0 to 100 percent."
  },
  "rEtherStatsPkts": {
    "name": "rEtherStatsPkts",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of packets (including bad packets, broadcast packets, and multicast packets) received."
  },
  "rEtherStatsBroadcastPkts": {
    "name": "rEtherStatsBroadcastPkts",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of good packets received that were directed to the broadcast address. Note that this does not include multicast packets."
  },
  "rEtherStatsMulticastPkts": {
    "name": "rEtherStatsMulticastPkts",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of good packets received that were directed to a multicast address. Note that this number does not include packets directed to the broadcast address."
  },
  "rEtherStatsCRCAlignErrors": {
    "name": "rEtherStatsCRCAlignErrors",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of packets received that had a length (excluding framing bits, but including FCS octets) of between 64 and 1518 octets, inclusive, but but had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error)."
  },
  "rEtherStatsUndersizePkts": {
    "name": "rEtherStatsUndersizePkts",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of packets received that were less than 64 octets long (excluding framing bits, but including FCS octets) and were otherwise well formed."
  },
  "rEtherStatsOversizePkts": {
    "name": "rEtherStatsOversizePkts",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of packets received that were longer than 1518 octets (excluding framing bits, but including FCS octets) and were otherwise well formed."
  },
  "rEtherStatsFragments": {
    "name": "rEtherStatsFragments",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of packets received that were less than 64 octets in length (excluding framing bits but including FCS octets) and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error). Note that it is entirely normal for etherStatsFragments to increment. This is because it counts both runts (which are normal occurrences due to collisions) and noise hits."
  },
  "rEtherStatsJabbers": {
    "name": "rEtherStatsJabbers",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of packets received that were longer than 1518 octets (excluding framing bits, but including FCS octets), and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error). Note that this definition of jabber is different than the definition in IEEE-802.3 section 8.2.1.5 (10BASE5) and section 10.3.1.4 (10BASE2). These documents define jabber as the condition where any packet exceeds 20 ms. The allowed range to detect jabber is between 20 ms and 150 ms."
  },
  "rEtherStatsCollisions": {
    "name": "rEtherStatsCollisions",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.13",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The best estimate of the total number of collisions on this Ethernet segment. The value returned will depend on the location of the RMON probe. Section 8.2.1.3 (10BASE-5) and section 10.3.1.3 (10BASE-2) of IEEE standard 802.3 states that a station must detect a collision, in the receive mode, if three or more stations are transmitting simultaneously. A repeater port must detect a collision when two or more stations are transmitting simultaneously. Thus a probe placed on a repeater port could record more collisions than a probe connected to a station on the same segment would. Probe location plays a much smaller role when considering 10BASE-T. 14.2.1.4 (10BASE-T) of IEEE standard 802.3 defines a collision as the simultaneous presence of signals on the DO and RD circuits (transmitting and receiving at the same time). A 10BASE-T station can only detect collisions when it is transmitting. Thus probes placed on a station and a repeater, should report the same number of collisions. Note also that an RMON probe inside a repeater should ideally report collisions between the repeater and one or more other hosts (transmit collisions as defined by IEEE 802.3k) plus receiver collisions observed on any coax segments to which the repeater is connected."
  },
  "rEtherStatsPkts64Octets": {
    "name": "rEtherStatsPkts64Octets",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.14",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of packets (including bad packets) received that were 64 octets in length (excluding framing bits but including FCS octets)."
  },
  "rEtherStatsPkts65to127Octets": {
    "name": "rEtherStatsPkts65to127Octets",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.15",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of packets (including bad packets) received that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets)."
  },
  "rEtherStatsPkts128to255Octets": {
    "name": "rEtherStatsPkts128to255Octets",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.16",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of packets (including bad packets) received that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets)."
  },
  "rEtherStatsPkts256to511Octets": {
    "name": "rEtherStatsPkts256to511Octets",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.17",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of packets (including bad packets) received that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets)."
  },
  "rEtherStatsPkts512to1023Octets": {
    "name": "rEtherStatsPkts512to1023Octets",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.18",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of packets (including bad packets) received that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets)."
  },
  "rEtherStatsPkts1024to1518Octets": {
    "name": "rEtherStatsPkts1024to1518Octets",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.19",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of packets (including bad packets) received that were between 1024 and 1518 octets in length inclusive (excluding framing bits but including FCS octets)."
  },
  "rEtherStatsOwner": {
    "name": "rEtherStatsOwner",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.20",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OwnerString",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The entity that configured this entry and is therefore using the resources assigned to it."
  },
  "rEtherStatsStatus": {
    "name": "rEtherStatsStatus",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.1.1.1.21",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "EntryStatus",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The status of this etherStats entry."
  },
  "rHistoryControlTable": {
    "name": "rHistoryControlTable",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A list of history control entries."
  },
  "rHistoryControlEntry": {
    "name": "rHistoryControlEntry",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rHistoryControlIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "A list of parameters that set up a periodic sampling of statistics. As an example, an instance of the historyControlInterval object might be named historyControlInterval.2"
  },
  "rHistoryControlIndex": {
    "name": "rHistoryControlIndex",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "An index that uniquely identifies an entry in the historyControl table. Each such entry defines a set of samples at a particular interval for an interface on the device."
  },
  "rHistoryControlDataSource": {
    "name": "rHistoryControlDataSource",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This object identifies the source of the data for which historical data was collected and placed in a media-specific table on behalf of this historyControlEntry. This source can be any interface on this device. In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in RFC 1213 and RFC 1573 [4,6], for the desired interface. For example, if an entry were to receive data from interface #1, this object would be set to ifIndex.1. The statistics in this group reflect all packets on the local network segment attached to the identified interface. An agent may or may not be able to tell if fundamental changes to the media of the interface have occurred and necessitate an invalidation of this entry. For example, a hot-pluggable ethernet card could be pulled out and replaced by a token-ring card. In such a case, if the agent has such knowledge of the change, it is recommended that it invalidate this entry. This object may not be modified if the associated historyControlStatus object is equal to valid(1)."
  },
  "rHistoryControlBucketsRequested": {
    "name": "rHistoryControlBucketsRequested",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "default": {
      "default": {
        "value": 50,
        "format": "decimal"
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The requested number of discrete time intervals over which data is to be saved in the part of the media-specific table associated with this historyControlEntry. When this object is created or modified, the probe should set historyControlBucketsGranted as closely to this object as is possible for the particular probe implementation and available resources."
  },
  "rHistoryControlBucketsGranted": {
    "name": "rHistoryControlBucketsGranted",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of discrete sampling intervals over which data shall be saved in the part of the media-specific table associated with this historyControlEntry. When the associated historyControlBucketsRequested object is created or modified, the probe should set this object as closely to the requested value as is possible for the particular probe implementation and available resources. The probe must not lower this value except as a result of a modification to the associated historyControlBucketsRequested object. There will be times when the actual number of buckets associated with this entry is less than the value of this object. In this case, at the end of each sampling interval, a new bucket will be added to the media-specific table. When the number of buckets reaches the value of this object and a new bucket is to be added to the media-specific table, the oldest bucket associated with this historyControlEntry shall be deleted by the agent so that the new bucket can be added. When the value of this object changes to a value less than the current value, entries are deleted from the media-specific table associated with this historyControlEntry. Enough of the oldest of these entries shall be deleted by the agent so that their number remains less than or equal to the new value of this object. When the value of this object changes to a value greater than the current value, the number of associated media- specific entries may be allowed to grow."
  },
  "rHistoryControlInterval": {
    "name": "rHistoryControlInterval",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 3600
          }
        ]
      }
    },
    "default": {
      "default": {
        "value": 1800,
        "format": "decimal"
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The interval in seconds over which the data is sampled for each bucket in the part of the media-specific table associated with this historyControlEntry. This interval can be set to any number of seconds between 1 and 3600 (1 hour). Because the counters in a bucket may overflow at their maximum value with no indication, a prudent manager will take into account the possibility of overflow in any of the associated counters. It is important to consider the minimum time in which any counter could overflow on a particular media type and set the historyControlInterval object to a value less than this interval. This is typically most important for the 'octets' counter in any media-specific table. For example, on an Ethernet network, the etherHistoryOctets counter could overflow in about one hour at the Ethernet's maximum utilization. This object may not be modified if the associated historyControlStatus object is equal to valid(1)."
  },
  "rHistoryControlOwner": {
    "name": "rHistoryControlOwner",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OwnerString",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The entity that configured this entry and is therefore using the resources assigned to it."
  },
  "rHistoryControlStatus": {
    "name": "rHistoryControlStatus",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "EntryStatus",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The status of this historyControl entry. Each instance of the media-specific table associated with this historyControlEntry will be deleted by the agent if this historyControlEntry is not equal to valid(1)."
  },
  "rEtherHistoryTable": {
    "name": "rEtherHistoryTable",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A list of Ethernet history entries."
  },
  "rEtherHistoryEntry": {
    "name": "rEtherHistoryEntry",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rEtherHistoryIndex",
        "implied": 0
      },
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rEtherHistorySampleIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "An historical sample of Ethernet statistics on a particular Ethernet interface. This sample is associated with the historyControlEntry which set up the parameters for a regular collection of these samples. As an example, an instance of the etherHistoryPkts object might be named etherHistoryPkts.2.89"
  },
  "rEtherHistoryIndex": {
    "name": "rEtherHistoryIndex",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The history of which this entry is a part. The history identified by a particular value of this index is the same history as identified by the same value of historyControlIndex."
  },
  "rEtherHistorySampleIndex": {
    "name": "rEtherHistorySampleIndex",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 2147483647
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "An index that uniquely identifies the particular sample this entry represents among all samples associated with the same historyControlEntry. This index starts at 1 and increases by one as each new sample is taken."
  },
  "rEtherHistoryIntervalStart": {
    "name": "rEtherHistoryIntervalStart",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The value of sysUpTime at the start of the interval over which this sample was measured. If the probe keeps track of the time of day, it should start the first sample of the history at a time such that when the next hour of the day begins, a sample is started at that instant. Note that following this rule may require the probe to delay collecting the first sample of the history, as each sample must be of the same interval. Also note that the sample which is currently being collected is not accessible in this table until the end of its interval."
  },
  "rEtherHistoryDropEvents": {
    "name": "rEtherHistoryDropEvents",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of events in which packets were dropped by the probe due to lack of resources during this sampling interval. Note that this number is not necessarily the number of packets dropped, it is just the number of times this condition has been detected."
  },
  "rEtherHistoryOctets": {
    "name": "rEtherHistoryOctets",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of octets of data (including those in bad packets) received on the network (excluding framing bits but including FCS octets)."
  },
  "rEtherHistoryPkts": {
    "name": "rEtherHistoryPkts",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of packets (including bad packets) received during this sampling interval."
  },
  "rEtherHistoryBroadcastPkts": {
    "name": "rEtherHistoryBroadcastPkts",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of good packets received during this sampling interval that were directed to the broadcast address."
  },
  "rEtherHistoryMulticastPkts": {
    "name": "rEtherHistoryMulticastPkts",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of good packets received during this sampling interval that were directed to a multicast address. Note that this number does not include packets addressed to the broadcast address."
  },
  "rEtherHistoryCRCAlignErrors": {
    "name": "rEtherHistoryCRCAlignErrors",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of packets received during this sampling interval that had a length (excluding framing bits but including FCS octets) between 64 and 1518 octets, inclusive, but had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error)."
  },
  "rEtherHistoryUndersizePkts": {
    "name": "rEtherHistoryUndersizePkts",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of packets received during this sampling interval that were less than 64 octets long (excluding framing bits but including FCS octets) and were otherwise well formed."
  },
  "rEtherHistoryOversizePkts": {
    "name": "rEtherHistoryOversizePkts",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of packets received during this sampling interval that were longer than 1518 octets (excluding framing bits but including FCS octets) but were otherwise well formed."
  },
  "rEtherHistoryFragments": {
    "name": "rEtherHistoryFragments",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of packets received during this sampling interval that were less than 64 octets in length (excluding framing bits but including FCS octets) had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error). Note that it is entirely normal for etherHistoryFragments to increment. This is because it counts both runts (which are normal occurrences due to collisions) and noise hits."
  },
  "rEtherHistoryJabbers": {
    "name": "rEtherHistoryJabbers",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2.1.13",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of packets received during this sampling interval that were longer than 1518 octets (excluding framing bits but including FCS octets), and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error). Note that this definition of jabber is different than the definition in IEEE-802.3 section 8.2.1.5 (10BASE5) and section 10.3.1.4 (10BASE2). These documents define jabber as the condition where any packet exceeds 20 ms. The allowed range to detect jabber is between 20 ms and 150 ms."
  },
  "rEtherHistoryCollisions": {
    "name": "rEtherHistoryCollisions",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2.1.14",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The best estimate of the total number of collisions on this Ethernet segment during this sampling interval. The value returned will depend on the location of the RMON probe. Section 8.2.1.3 (10BASE-5) and section 10.3.1.3 (10BASE-2) of IEEE standard 802.3 states that a station must detect a collision, in the receive mode, if three or more stations are transmitting simultaneously. A repeater port must detect a collision when two or more stations are transmitting simultaneously. Thus a probe placed on a repeater port could record more collisions than a probe connected to a station on the same segment would. Probe location plays a much smaller role when considering 10BASE-T. 14.2.1.4 (10BASE-T) of IEEE standard 802.3 defines a collision as the simultaneous presence of signals on the DO and RD circuits (transmitting and receiving at the same time). A 10BASE-T station can only detect collisions when it is transmitting. Thus probes placed on a station and a repeater, should report the same number of collisions. Note also that an RMON probe inside a repeater should ideally report collisions between the repeater and one or more other hosts (transmit collisions as defined by IEEE 802.3k) plus receiver collisions observed on any coax segments to which the repeater is connected."
  },
  "rEtherHistoryUtilization": {
    "name": "rEtherHistoryUtilization",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.2.2.1.15",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The best estimate of the mean physical layer network utilization on this interface during this sampling interval, in hundredths of a percent."
  },
  "rAlarmTable": {
    "name": "rAlarmTable",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.3.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A list of alarm entries."
  },
  "rAlarmEntry": {
    "name": "rAlarmEntry",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.3.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rAlarmIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "A list of parameters that set up a periodic checking for alarm conditions. For example, an instance of the alarmValue object might be named alarmValue.8"
  },
  "rAlarmIndex": {
    "name": "rAlarmIndex",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.3.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "An index that uniquely identifies an entry in the alarm table. Each such entry defines a diagnostic sample at a particular interval for an object on the device."
  },
  "rAlarmInterval": {
    "name": "rAlarmInterval",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.3.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The interval in seconds over which the data is sampled and compared with the rising and falling thresholds. When setting this variable, care should be taken in the case of deltaValue sampling - the interval should be set short enough that the sampled variable is very unlikely to increase or decrease by more than 2^31 - 1 during a single sampling interval. This object may not be modified if the associated alarmStatus object is equal to valid(1)."
  },
  "rAlarmVariable": {
    "name": "rAlarmVariable",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.3.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The object identifier of the particular variable to be sampled. Only variables that resolve to an ASN.1 primitive type of INTEGER (INTEGER, Counter, Gauge, or TimeTicks) may be sampled. Because SNMP access control is articulated entirely in terms of the contents of MIB views, no access control mechanism exists that can restrict the value of this object to identify only those objects that exist in a particular MIB view. Because there is thus no acceptable means of restricting the read access that could be obtained through the alarm mechanism, the probe must only grant write access to this object in those views that have read access to all objects on the probe. During a set operation, if the supplied variable name is not available in the selected MIB view, a badValue error must be returned. If at any time the variable name of an established alarmEntry is no longer available in the selected MIB view, the probe must change the status of this alarmEntry to invalid(4). This object may not be modified if the associated alarmStatus object is equal to valid(1)."
  },
  "rAlarmSampleType": {
    "name": "rAlarmSampleType",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.3.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "absoluteValue": 1,
          "deltaValue": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The method of sampling the selected variable and calculating the value to be compared against the thresholds. If the value of this object is absoluteValue(1), the value of the selected variable will be compared directly with the thresholds at the end of the sampling interval. If the value of this object is deltaValue(2), the value of the selected variable at the last sample will be subtracted from the current value, and the difference compared with the thresholds. This object may not be modified if the associated alarmStatus object is equal to valid(1)."
  },
  "rAlarmValue": {
    "name": "rAlarmValue",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.3.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The value of the statistic during the last sampling period. For example, if the sample type is deltaValue, this value will be the difference between the samples at the beginning and end of the period. If the sample type is absoluteValue, this value will be the sampled value at the end of the period. This is the value that is compared with the rising and falling thresholds. The value during the current sampling period is not made available until the period is completed and will remain available until the next period completes."
  },
  "rAlarmStartupAlarm": {
    "name": "rAlarmStartupAlarm",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.3.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "risingAlarm": 1,
          "fallingAlarm": 2,
          "risingOrFallingAlarm": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The alarm that may be sent when this entry is first set to valid. If the first sample after this entry becomes valid is greater than or equal to the risingThreshold and alarmStartupAlarm is equal to risingAlarm(1) or risingOrFallingAlarm(3), then a single rising alarm will be generated. If the first sample after this entry becomes valid is less than or equal to the fallingThreshold and alarmStartupAlarm is equal to fallingAlarm(2) or risingOrFallingAlarm(3), then a single falling alarm will be generated. This object may not be modified if the associated alarmStatus object is equal to valid(1)."
  },
  "rAlarmRisingThreshold": {
    "name": "rAlarmRisingThreshold",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.3.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "A threshold for the sampled statistic. When the current sampled value is greater than or equal to this threshold, and the value at the last sampling interval was less than this threshold, a single event will be generated. A single event will also be generated if the first sample after this entry becomes valid is greater than or equal to this threshold and the associated alarmStartupAlarm is equal to risingAlarm(1) or risingOrFallingAlarm(3). After a rising event is generated, another such event will not be generated until the sampled value falls below this threshold and reaches the alarmFallingThreshold. This object may not be modified if the associated alarmStatus object is equal to valid(1)."
  },
  "rAlarmFallingThreshold": {
    "name": "rAlarmFallingThreshold",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.3.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "A threshold for the sampled statistic. When the current sampled value is less than or equal to this threshold, and the value at the last sampling interval was greater than this threshold, a single event will be generated. A single event will also be generated if the first sample after this entry becomes valid is less than or equal to this threshold and the associated alarmStartupAlarm is equal to fallingAlarm(2) or risingOrFallingAlarm(3). After a falling event is generated, another such event will not be generated until the sampled value rises above this threshold and reaches the alarmRisingThreshold. This object may not be modified if the associated alarmStatus object is equal to valid(1)."
  },
  "rAlarmRisingEventIndex": {
    "name": "rAlarmRisingEventIndex",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.3.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The index of the eventEntry that is used when a rising threshold is crossed. The eventEntry identified by a particular value of this index is the same as identified by the same value of the eventIndex object. If there is no corresponding entry in the eventTable, then no association exists. In particular, if this value is zero, no associated event will be generated, as zero is not a valid event index. This object may not be modified if the associated alarmStatus object is equal to valid(1)."
  },
  "rAlarmFallingEventIndex": {
    "name": "rAlarmFallingEventIndex",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.3.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The index of the eventEntry that is used when a falling threshold is crossed. The eventEntry identified by a particular value of this index is the same as identified by the same value of the eventIndex object. If there is no corresponding entry in the eventTable, then no association exists. In particular, if this value is zero, no associated event will be generated, as zero is not a valid event index. This object may not be modified if the associated alarmStatus object is equal to valid(1)."
  },
  "rAlarmOwner": {
    "name": "rAlarmOwner",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.3.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OwnerString",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The entity that configured this entry and is therefore using the resources assigned to it."
  },
  "rAlarmStatus": {
    "name": "rAlarmStatus",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.3.1.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "EntryStatus",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The status of this alarm entry."
  },
  "rEventTable": {
    "name": "rEventTable",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.9.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A list of events to be generated."
  },
  "rEventEntry": {
    "name": "rEventEntry",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.9.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rEventIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "A set of parameters that describe an event to be generated when certain conditions are met. As an example, an instance of the eventLastTimeSent object might be named eventLastTimeSent.6"
  },
  "rEventIndex": {
    "name": "rEventIndex",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.9.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "An index that uniquely identifies an entry in the event table. Each such entry defines one event that is to be generated when the appropriate conditions occur."
  },
  "rEventDescription": {
    "name": "rEventDescription",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.9.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 127
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "A comment describing this event entry."
  },
  "rEventType": {
    "name": "rEventType",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.9.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "none": 1,
          "log": 2,
          "snmp-trap": 3,
          "log-and-trap": 4
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The type of notification that the probe will make about this event. In the case of log, an entry is made in the log table for each event. In the case of snmp-trap, an SNMP trap is sent to one or more management stations."
  },
  "rEventCommunity": {
    "name": "rEventCommunity",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.9.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 127
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "If an SNMP trap is to be sent, it will be sent to the SNMP community specified by this octet string. In the future this table will be extended to include the party security mechanism. This object shall be set to a string of length zero if it is intended that that mechanism be used to specify the destination of the trap."
  },
  "rEventLastTimeSent": {
    "name": "rEventLastTimeSent",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.9.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The value of sysUpTime at the time this event entry last generated an event. If this entry has not generated any events, this value will be zero."
  },
  "rEventOwner": {
    "name": "rEventOwner",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.9.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OwnerString",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The entity that configured this entry and is therefore using the resources assigned to it. If this object contains a string starting with 'monitor' and has associated entries in the log table, all connected management stations should retrieve those log entries, as they may have significance to all management stations connected to this device"
  },
  "rEventStatus": {
    "name": "rEventStatus",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.9.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "EntryStatus",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The status of this event entry. If this object is not equal to valid(1), all associated log entries shall be deleted by the agent."
  },
  "rLogTable": {
    "name": "rLogTable",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.9.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A list of events that have been logged."
  },
  "rLogEntry": {
    "name": "rLogEntry",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.9.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rLogEventIndex",
        "implied": 0
      },
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rLogIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "A set of data describing an event that has been logged. For example, an instance of the logDescription object might be named logDescription.6.47"
  },
  "rLogEventIndex": {
    "name": "rLogEventIndex",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.9.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The event entry that generated this log entry. The log identified by a particular value of this index is associated with the same eventEntry as identified by the same value of eventIndex."
  },
  "rLogIndex": {
    "name": "rLogIndex",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.9.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 2147483647
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "An index that uniquely identifies an entry in the log table amongst those generated by the same eventEntries. These indexes are assigned beginning with 1 and increase by one with each new log entry. The association between values of logIndex and logEntries is fixed for the lifetime of each logEntry. The agent may choose to delete the oldest instances of logEntry as required because of lack of memory. It is an implementation-specific matter as to when this deletion may occur."
  },
  "rLogTime": {
    "name": "rLogTime",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.9.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The value of sysUpTime when this log entry was created."
  },
  "rLogDescription": {
    "name": "rLogDescription",
    "oid": "1.3.6.1.4.1.13464.1.2.3.2.9.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "An implementation dependent description of the event that activated this log entry."
  },
  "rRisingAlarm": {
    "name": "rRisingAlarm",
    "oid": "1.3.6.1.4.1.13464.1.2.3.20.1",
    "class": "notificationtype",
    "objects": [
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rAlarmIndex"
      },
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rAlarmVariable"
      },
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rAlarmSampleType"
      },
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rAlarmValue"
      },
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rAlarmRisingThreshold"
      }
    ],
    "description": "The SNMP trap that is generated when an alarm entry crosses its rising threshold and generates an event that is configured for sending SNMP traps."
  },
  "rFallingAlarm": {
    "name": "rFallingAlarm",
    "oid": "1.3.6.1.4.1.13464.1.2.3.20.2",
    "class": "notificationtype",
    "objects": [
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rAlarmIndex"
      },
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rAlarmVariable"
      },
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rAlarmSampleType"
      },
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rAlarmValue"
      },
      {
        "module": "GBNServiceRMON-MIB",
        "object": "rAlarmFallingThreshold"
      }
    ],
    "description": "The SNMP trap that is generated when an alarm entry crosses its falling threshold and generates an event that is configured for sending SNMP traps."
  },
  "meta": {
    "comments": [
      "ASN.1 source file://MIBS/asn1/GBNServiceRMON-MIB.mib",
      "Produced by pysmi-0.3.4 at Tue Apr 20 18:56:02 2021",
      "On host samy-ThinkPad-T495s platform Linux version 5.8.0-50-generic by user root",
      "Using Python version 3.8.5 (default, Jan 27 2021, 15:41:15) "
    ],
    "module": "GBNServiceRMON-MIB"
  }
}