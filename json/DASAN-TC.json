{
  "imports": {
    "class": "imports",
    "DASAN-SMI": [
      "dasanModules"
    ],
    "SNMPv2-CONF": [
      "MODULE-COMPLIANCE",
      "NOTIFICATION-GROUP"
    ],
    "SNMPv2-SMI": [
      "iso",
      "NOTIFICATION-TYPE",
      "Counter32",
      "Counter64",
      "MODULE-IDENTITY",
      "MibIdentifier",
      "Unsigned32",
      "Integer32",
      "OBJECT-IDENTITY",
      "IpAddress",
      "Bits",
      "OBJECT-TYPE",
      "TimeTicks",
      "Gauge32"
    ],
    "SNMPv2-TC": [
      "TEXTUAL-CONVENTION",
      "DisplayString"
    ]
  },
  "dasanTextualConventions": {
    "name": "dasanTextualConventions",
    "oid": "1.3.6.1.4.1.6296.12.1",
    "class": "moduleidentity",
    "revisions": [
      {
        "revision": "2001-04-19 00:00",
        "description": "Added DasanAlarmSeverity textual convention. Changed SAPType display hint to d. Changed INTEGER to Integer32 in DasanPort and DasanIpProtocol TCs. Changed SnmpAdminString to OCTET STRING in DasanLocationSpecifier. Removed IMPORTs for dasanProducts and SnmpAdminString."
      },
      {
        "revision": "2000-11-21 00:00",
        "description": "Added DasanLocationClass, DasanLocationSpecifier DasanInetAddressMask, DasanAbsZeroBasedCounter32, DasanSnapShotAbsCounter32 textual conventions."
      },
      {
        "revision": "1998-10-28 00:00",
        "description": "Added DasanRowOperStatus, EntPhysicalIndexOrZero, Port and IpProtocol textual conventions."
      },
      {
        "revision": "1997-03-13 00:00",
        "description": "Added CountryCode textual convention."
      },
      {
        "revision": "1997-03-13 00:00",
        "description": "Added SAPType textual convention."
      },
      {
        "revision": "1996-08-14 00:00",
        "description": "Added InterfaceIndexOrZero textual convention."
      },
      {
        "revision": "1996-07-08 00:00",
        "description": "Added new DasanNetworkProtocol enumerations."
      },
      {
        "revision": "1996-02-22 00:00",
        "description": "Added Unsigned32 textual conventions."
      },
      {
        "revision": "1995-06-07 00:00",
        "description": "Miscellaneous updates/corrections, including making DasanNetworkProtocol enumerations contiguous."
      }
    ],
    "lastupdated": "200101180000Z",
    "organization": "Dasan Co., Ltd.",
    "contactinfo": "Dasan Co, Ltd.",
    "description": "This module defines textual conventions used throughout dasan enterprise mibs."
  },
  "DasanNetworkProtocol": {
    "name": "DasanNetworkProtocol",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "ip": 1,
          "decnet": 2,
          "pup": 3,
          "chaos": 4,
          "xns": 5,
          "x121": 6,
          "appletalk": 7,
          "clns": 8,
          "lat": 9,
          "vines": 10,
          "cons": 11,
          "apollo": 12,
          "stun": 13,
          "novell": 14,
          "qllc": 15,
          "snapshot": 16,
          "atmIlmi": 17,
          "bstun": 18,
          "x25pvc": 19,
          "unknown": 65535
        }
      }
    },
    "status": "current",
    "description": "Represents the different types of network layer protocols."
  },
  "DasanNetworkAddress": {
    "name": "DasanNetworkAddress",
    "class": "textualconvention",
    "type": {
      "type": "OCTET STRING",
      "class": "type"
    },
    "displayhint": "1x:",
    "status": "current",
    "description": "Represents a network layer address. The length and format of the address is protocol dependent as follows: ip 4 octets decnet 2 octets pup obsolete chaos 2 octets xns 10 octets first 4 octets are the net number last 6 octets are the host number x121 appletalk 3 octets first 2 octets are the net number last octet is the host number clns lat vines 6 octets first 4 octets are the net number last 2 octets are the host number cons apollo 10 octets first 4 octets are the net number last 6 octets are the host number stun 8 octets novell 10 octets first 4 octets are the net number last 6 octets are the host number qllc 6 octets bstun 1 octet - bi-sync serial tunnel snapshot 1 octet atmIlmi 4 octets x25 pvc 2 octets (12 bits) "
  },
  "InterfaceIndexOrZero": {
    "name": "InterfaceIndexOrZero",
    "class": "textualconvention",
    "type": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 2147483647
          }
        ]
      }
    },
    "displayhint": "d",
    "status": "current",
    "description": "Either the value 0, or the ifIndex value of an interface in the ifTable."
  },
  "SAPType": {
    "name": "SAPType",
    "class": "textualconvention",
    "type": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 254
          }
        ]
      }
    },
    "displayhint": "d",
    "status": "current",
    "description": "Service Access Point - is a term that denotes the means by which a user entity in layer n+1 accesses a service of a provider entity in layer n."
  },
  "CountryCode": {
    "name": "CountryCode",
    "class": "textualconvention",
    "type": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 0
          },
          {
            "min": 2,
            "max": 2
          }
        ]
      }
    },
    "displayhint": "2a",
    "status": "current",
    "description": "Represents a case-insensitive 2-letter country code taken from ISO-3166. Unrecognized countries are represented as empty string."
  },
  "EntPhysicalIndexOrZero": {
    "name": "EntPhysicalIndexOrZero",
    "class": "textualconvention",
    "type": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 2147483647
          }
        ]
      }
    },
    "status": "current",
    "description": "This textual convention is an extension of entPhysicalIndex. If non-zero, the object is an entPhysicalIndex. If zero, no appropriate entPhysicalIndex exists. Any additional semantics are object specific."
  },
  "DasanRowOperStatus": {
    "name": "DasanRowOperStatus",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "active": 1,
          "activeDependencies": 2,
          "inactiveDependency": 3,
          "missingDependency": 4
        }
      }
    },
    "status": "current",
    "description": "Represents the operational status of an table entry. This textual convention allows explicitly representing the states of rows dependent on rows in other tables. active(1) - Indicates this entry's RowStatus is active and the RowStatus for each dependency is active. activeDependencies(2) - Indicates that the RowStatus for each dependency is active, but the entry's RowStatus is not active. inactiveDependency(3) - Indicates that the RowStatus for at least one dependency is not active. missingDependency(4) - Indicates that at least one dependency does not exist in it's table. "
  },
  "DasanPort": {
    "name": "DasanPort",
    "class": "textualconvention",
    "type": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "status": "current",
    "description": "The TCP or UDP port number range.",
    "reference": "Transmission Control Protocol. J. Postel. RFC793, User Datagram Protocol. J. Postel. RFC768"
  },
  "DasanIpProtocol": {
    "name": "DasanIpProtocol",
    "class": "textualconvention",
    "type": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "status": "current",
    "description": "IP protocol number range.",
    "reference": "Internet Protocol. J. Postel. RFC791"
  },
  "DasanLocationClass": {
    "name": "DasanLocationClass",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "chassis": 1,
          "shelf": 2,
          "slot": 3,
          "subSlot": 4,
          "port": 5,
          "subPort": 6,
          "channel": 7,
          "subChannel": 8
        }
      }
    },
    "status": "current",
    "description": "An enumerated value which provides an indication of the general location type of a particular physical and/or logical interface. chassis - a system framework for mounting one or more shelves/slots/cards. shelf - a cabinet that holds one or more slots. slot - card or subSlot holder. subSlot - daughter-card holder. port - a physical port (e.g., a DS1 or DS3 physical port). subPort - a logical port on a physical port (e.g., a DS1 subPort on a DS3 physical port). channel - a logical interface (e.g., a DS0 channel, signalling channel, ATM port, other virtual interfaces). subChannel - a sub-channel on a logical interface. "
  },
  "DasanLocationSpecifier": {
    "name": "DasanLocationSpecifier",
    "class": "textualconvention",
    "type": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "status": "current",
    "description": "Use this TC to define objects that indicate the physical entity and/or logical interface location of a managed entity on a managed device. In SNMP, a standard mechanism for indicating the physical location of entities is via the ENTITY-MIB. However, that approach is not satisfactory in some cases because: 1. The entity requiring a location-based naming may be associated with an entity which can not be represented as a physical entity in the ENTITY-MIB, 2. NMS applications may desire a more direct name/representation of a physical entity than is available via the ENTITY-MIB, e.g., a physical entity which is named via a hierarchy of levels in the ENTITY-MIB. The value of an object defined using this TC is an ASCII string consisting of zero or more elements separated by commas. Each element is of the form <tag> = <value>. An example of this syntax is 'slot=5,port=3'. The syntax of the string is formally specified using ABNF notation (with one exception, noted below), as follows: location-specifier = elem *(',' elem) ; subject to ; size restriction specified in the SYNTAX ; clause below elem = loctype '=' number number = %x00-FFFFFFFF / %d0-4294967295 loctype = 1*32VCHAR It is recommended that loctype use one of the enumerated labels defined for DasanLocationClass. (NOTE: To conform to ABNF notation as defined in RFC2234, substitute the single-quote symbol with a double-quote symbol in the above rules.) A zero length of DasanLocationSpecifier is object-specific and must be defined as part of the description of any object which uses this syntax. ",
    "reference": "RFC2234, Augmented BNF for syntax specifications: ABNF"
  },
  "DasanInetAddressMask": {
    "name": "DasanInetAddressMask",
    "class": "textualconvention",
    "type": {
      "type": "Unsigned32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 128
          }
        ]
      }
    },
    "status": "current",
    "description": "Denotes a generic Internet subnet address mask. The Internet subnet address mask is represented as the number of contiguous 1-bit from MSB (most significant bit) of the Internet subnet address mask. A DasanInetAddressMask value is always interpreted within the context of an InetAddressType value. The InetAddressType only object or InetAddressType with InetAddress objects which define the context must be registered immediately before the object which uses the DasanInetAddressMask textual convention. In other words, the object identifiers for the InetAddressType object and the DasanInetAddressMask object MUST have the same length and the last sub-identifier of the InetAddressType object MUST be 1 less than the last sub-identifier of the DasanInetAddressMask object and MUST be 2 less than the last sub-identifier of the DasanInetAddressMask object if an InetAddress object is defined between InetAddressType and DasanInetAddressMask objects. The maximum value of the DasanInetAddressMask TC is 32 for the value 'ipv4(1)' in InetAddressType object and 128 for the value 'ipv6(2)' in InetAddressType object. The value zero is object-specific and must therefore be defined as part of the description of any object which uses this syntax. Examples of the usage of zero might include situations where Internet subnet mask was unknown, or when none subnet masks need to be referenced.",
    "reference": "RFC2851, Textual Conventions for Internet Network Addresses."
  },
  "DasanAbsZeroBasedCounter32": {
    "name": "DasanAbsZeroBasedCounter32",
    "class": "textualconvention",
    "type": {
      "type": "Gauge32",
      "class": "type"
    },
    "status": "current",
    "description": "This TC describes an object which counts events with the following semantics: objects of this type will be set to zero(0) on creation and will thereafter count appropriate events, it locks at the maximum value of 4,294,967,295 if the counter overflows. This TC may be used only in situations where wrapping is not possible or extremely unlikely situation."
  },
  "DasanSnapShotAbsCounter32": {
    "name": "DasanSnapShotAbsCounter32",
    "class": "textualconvention",
    "type": {
      "type": "Unsigned32",
      "class": "type"
    },
    "status": "current",
    "description": "This TC describes an object which stores a snap-shot value with the following semantics: objects of this type will take a snap-shot value from their associated DasanAbsZeroBasedCounter32 type objects on creation."
  },
  "DasanAlarmSeverity": {
    "name": "DasanAlarmSeverity",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "cleared": 1,
          "indeterminate": 2,
          "critical": 3,
          "major": 4,
          "minor": 5,
          "warning": 6,
          "info": 7
        }
      }
    },
    "status": "current",
    "description": "Represents the perceived alarm severity associated with a service or safety affecting condition and/or event. These are based on ITU severities, except that info(7) is added. cleared(1) - Indicates a previous alarm condition has been cleared. It is not required (unless specifically stated elsewhere on a case by case basis) that an alarm condition that has been cleared will produce a notification or other event containing an alarm severity with this value. indeterminate(2) - Indicates that the severity level cannot be determined. critical(3) - Indicates that a service or safety affecting condition has occurred and an immediate corrective action is required. major(4) - Indicates that a service affecting condition has occurred and an urgent corrective action is required. minor(5) - Indicates the existence of a non-service affecting condition and that corrective action should be taken in order to prevent a more serious (for example, service or safety affecting) condition. warning(6) - Indicates the detection of a potential or impending service or safety affecting condition, before any significant effects have been felt. info(7) - Indicates an alarm condition that does not meet any other severity definition. This can include important, but non-urgent, notices or informational events. ",
    "reference": "ITU-X.733"
  },
  "ModuleIndex": {
    "name": "ModuleIndex",
    "class": "textualconvention",
    "type": {
      "type": "Integer32",
      "class": "type"
    },
    "status": "current",
    "description": "The value of this object identifies the module for which this entry contains management information. The value of this object for a particular module has the same value as the moduleIndex object."
  },
  "PortIndex": {
    "name": "PortIndex",
    "class": "textualconvention",
    "type": {
      "type": "Integer32",
      "class": "type"
    },
    "status": "current",
    "description": "The value of this object identifies the port for which this entry contains management information. The value of this object for a particular module has the same value as the portIndex object."
  },
  "meta": {
    "comments": [
      "ASN.1 source file://MIBS/asn1/DASAN-TC.mib",
      "Produced by pysmi-0.3.4 at Tue Apr 20 18:20:07 2021",
      "On host samy-ThinkPad-T495s platform Linux version 5.8.0-50-generic by user root",
      "Using Python version 3.8.5 (default, Jan 27 2021, 15:41:15) "
    ],
    "module": "DASAN-TC"
  }
}