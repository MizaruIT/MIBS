{
  "imports": {
    "class": "imports",
    "HUAWEI-MIB": [
      "huaweiMgmt"
    ],
    "INET-ADDRESS-MIB": [
      "InetAddress",
      "InetAddressType",
      "InetPortNumber",
      "InetAddressPrefixLength"
    ],
    "SNMPv2-CONF": [
      "MODULE-COMPLIANCE",
      "NOTIFICATION-GROUP"
    ],
    "SNMPv2-SMI": [
      "OBJECT-TYPE",
      "MODULE-IDENTITY",
      "iso",
      "IpAddress",
      "Integer32",
      "MibIdentifier",
      "Counter64",
      "OBJECT-IDENTITY",
      "Unsigned32",
      "Bits",
      "Counter32",
      "TimeTicks",
      "NOTIFICATION-TYPE",
      "Gauge32"
    ],
    "SNMPv2-TC": [
      "RowStatus",
      "TruthValue",
      "TEXTUAL-CONVENTION",
      "DisplayString",
      "MacAddress"
    ]
  },
  "hwAclv6": {
    "name": "hwAclv6",
    "oid": "1.3.6.1.4.1.2011.5.112",
    "class": "moduleidentity",
    "revisions": [
      {
        "revision": "2012-02-10 12:00",
        "description": "V1.03, modified the description of some leaves of hwAclv6NumGroupTable, hwAclv6BasicRuleTable, hwAclv6AdvancedRuleTable."
      },
      {
        "revision": "2011-07-21 12:00",
        "description": "V1.02, added hwAclv6NumGroupAclType and hwAclv6NumGroupAclNumAllocMethod in hwAclv6NumGroupTable to allocate the ACLv6 group index automatically."
      },
      {
        "revision": "2011-01-20 00:00",
        "description": "V1.01, initial revision."
      }
    ],
    "lastupdated": "201202101200Z",
    "organization": "Huawei Technologies Co., Ltd.",
    "contactinfo": "Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ",
    "description": "The MIB is used for configuring IPv6 ACL rules.An access control list (ACL) is used to filter the specified data packets according to a series of matching rules configured in the ACL packets so that undesired data packets can be identified. By using the matching rules, network devices can permit or deny the matching data packets to pass."
  },
  "hwAclv6MibObject": {
    "name": "hwAclv6MibObject",
    "oid": "1.3.6.1.4.1.2011.5.112.1",
    "class": "objectidentity"
  },
  "hwAclv6NumGroupTable": {
    "name": "hwAclv6NumGroupTable",
    "oid": "1.3.6.1.4.1.2011.5.112.1.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "Describes the configured ACLv6 groups in the system and basic information about each group, such as the number of rules, steps, and descriptions. The index of this table is hwAclv6NumGroupAclNum. The hwAclv6NumGroupAclNum identifies an ACLv6 group."
  },
  "hwAclv6NumGroupEntry": {
    "name": "hwAclv6NumGroupEntry",
    "oid": "1.3.6.1.4.1.2011.5.112.1.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "HUAWEI-IPDSLAM-ACLV6-MIB",
        "object": "hwAclv6NumGroupAclNum",
        "implied": 0
      }
    ],
    "status": "current",
    "description": "Describes the configured ACLv6 groups in the system and basic information about each group, such as the number of rules, steps, and descriptions. The index of this entry is hwAclv6NumGroupAclNum. The hwAclv6NumGroupAclNum identifies an ACLv6 group. "
  },
  "hwAclv6NumGroupAclNum": {
    "name": "hwAclv6NumGroupAclNum",
    "oid": "1.3.6.1.4.1.2011.5.112.1.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Unsigned32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 2000,
            "max": 3999
          },
          {
            "min": 4294967295,
            "max": 4294967295
          }
        ]
      }
    },
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "The index of this hwAclv6NumGroupTable. Uniquely identifies an ACLv6 group. Value range: 2000-3999,4294967295 The groups with indexes ranging from 2000 to 2999 are basic ACLv6 groups. When hwAclv6NumGroupTable is used to create basic ACLv6 rules, a basic ACLv6 rule group with an index of the specified hwAclv6NumGroupAclNum value must be created through hwAclv6NumGroupTable. The groups with indexes ranging from 3000 to 3999 are advanced ACLv6 groups. When hwAclv6AdvancedTable is used to create advanced ACLv6 rule, an advanced ACLv6 rule group with an index of the specified hwAclv6AdvancedAclNum value must be created through hwAclv6NumGroupAclNum. The value 4294967295 means to allocate the group index automatically, which is only valid in the set operation. "
  },
  "hwAclv6NumGroupMatchOrder": {
    "name": "hwAclv6NumGroupMatchOrder",
    "oid": "1.3.6.1.4.1.2011.5.112.1.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "config": 1,
          "auto": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Indicates the priority order of an ACLv6 group. Options: 1. config(1) -the priority order of an ACLv6 group is configuration order 2. auto(2) -the priority order of an ACLv6 group is auto Currently, this leaf is read-only. The value is fixed to config(1), that is, the configuration order. "
  },
  "hwAclv6NumGroupSubitemNum": {
    "name": "hwAclv6NumGroupSubitemNum",
    "oid": "1.3.6.1.4.1.2011.5.112.1.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter32",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Indicates the number of rules in an ACLv6 group. This leaf is read-only. The value increases by one when a rule is added to the ACLv6 group. "
  },
  "hwAclv6NumGroupStep": {
    "name": "hwAclv6NumGroupStep",
    "oid": "1.3.6.1.4.1.2011.5.112.1.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 20
          }
        ]
      }
    },
    "default": {
      "default": {
        "value": 5,
        "format": "decimal"
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Indicates the step of adding rules to an ACLv6 group. Range: 1-20 When a rule is added and its ID is not specified, the ID of the rule is: step+last rule ID/step*step. If a user does not enter a value for hwAclv6NumGroupStep, the system uses the value 5 by default. "
  },
  "hwAclv6NumGroupDescription": {
    "name": "hwAclv6NumGroupDescription",
    "oid": "1.3.6.1.4.1.2011.5.112.1.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 127
          }
        ]
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Indicates the description of an ACLv6 group. It is used for users to identify different ACLv6 groups. Up to 127 characters are supported. If hwAclv6NumGroupDescription is not set, the description is null by default. "
  },
  "hwAclv6NumGroupCountClear": {
    "name": "hwAclv6NumGroupCountClear",
    "oid": "1.3.6.1.4.1.2011.5.112.1.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "cleared": 1,
          "nouse": 2
        }
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Used for clearing the software statistics of an ACLv6 group. Options: 1. cleared(1) -clear the software statistics of an ACLv6 group 2. nouse(2) -indicates no operation When this leaf is queried, the value is fixed to cleared(1). "
  },
  "hwAclv6NumGroupRowStatus": {
    "name": "hwAclv6NumGroupRowStatus",
    "oid": "1.3.6.1.4.1.2011.5.112.1.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "RowStatus",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Indicates the row status. Options: 1. active(1) -when this leaf is queried, the value is fixed to active(1). 2. createAndGo(4) -create an ACLv6 group 3. destroy(6) -delete an ACLv6 group It is used for creating or deleting an ACLv6 group, and clearing the software statistics of an ACLv6 group. To create an ACLv6 group, set hwAclv6NumGroupRowStatus to createAndGo(4). The hwAclv6NumGroupStep and hwAclv6NumGroupDescription parameters are optional. To delete an ACLv6 rule group, set hwAclv6NumGroupRowStatus to destroy(6). To clear the software statistics of a ACLv6 group, set hwAclv6NumGroupCountClear to cleared(1) and hwAclv6NumGroupRowStatus to createAndGo(4). When this leaf is queried, the value is fixed to active(1). "
  },
  "hwAclv6NumGroupAclType": {
    "name": "hwAclv6NumGroupAclType",
    "oid": "1.3.6.1.4.1.2011.5.112.1.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "basicAclv6": 2,
          "advAclv6": 3
        }
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "indicates the type of the ACLv6 group. Options: 1. basicAclv6(2) -Indicates that the type of the ACLv6 group is basic. 2. advAclv6(3) -Indicates that the type of the ACLv6 group is advanced. "
  },
  "hwAclv6NumGroupAclNumAllocMethod": {
    "name": "hwAclv6NumGroupAclNumAllocMethod",
    "oid": "1.3.6.1.4.1.2011.5.112.1.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "minFreeId": 1,
          "maxFreeId": 2
        }
      }
    },
    "default": {
      "default": {
        "value": 1,
        "format": "decimal"
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "indicates the method of allocating the ACLv6 group index automatically. Options: 1. minFreeId(1) -means to allocate the ACLv6 group index from the minimal free index. 2. maxFreeId(2) -means to allocate the ACLv6 group index from the maximal free index. "
  },
  "hwAclv6BasicRuleTable": {
    "name": "hwAclv6BasicRuleTable",
    "oid": "1.3.6.1.4.1.2011.5.112.1.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "Describes the details about a basic ACLv6 rule in a basic ACLv6 group, including the source IP address, prefix length, and other attributes of the rule. The indexes of this table are hwAclv6BasicAclNum and hwAclv6BasicSubitem. hwAclv6BasicAclNum is the ID of a basic ACLv6 group. Make sure that the ID is already created in hwAclv6NumGroupTable. hwAclv6BasicSubitem is the ID of a basic ACLv6 rule in the basic ACLv6 group. "
  },
  "hwAclv6BasicRuleEntry": {
    "name": "hwAclv6BasicRuleEntry",
    "oid": "1.3.6.1.4.1.2011.5.112.1.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "HUAWEI-IPDSLAM-ACLV6-MIB",
        "object": "hwAclv6BasicAclNum",
        "implied": 0
      },
      {
        "module": "HUAWEI-IPDSLAM-ACLV6-MIB",
        "object": "hwAclv6BasicSubitem",
        "implied": 0
      }
    ],
    "status": "current",
    "description": "Describes the details about a basic ACLv6 rule in a basic ACLv6 group, including the source IP address, prefix length, and other attributes of the rule. The indexes of this entry are hwAclv6BasicAclNum and hwAclv6BasicSubitem. hwAclv6BasicAclNum is the ID of a basic ACLv6 group. Make sure that the ID is already created in hwAclv6NumGroupTable. hwAclv6BasicSubitem is the ID of a basic ACLv6 rule in the basic ACLv6 group. "
  },
  "hwAclv6BasicAclNum": {
    "name": "hwAclv6BasicAclNum",
    "oid": "1.3.6.1.4.1.2011.5.112.1.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Unsigned32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 2000,
            "max": 2999
          }
        ]
      }
    },
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "Uniquely identifies a basic ACLv6 group. Range: 2000-2999 Make sure that the ID of the ACLv6 group is already created in hwAclv6NumGroupTable. "
  },
  "hwAclv6BasicSubitem": {
    "name": "hwAclv6BasicSubitem",
    "oid": "1.3.6.1.4.1.2011.5.112.1.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Unsigned32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 4294967295
          }
        ]
      }
    },
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "Describes the ID of a basic ACLv6 rule in the basic ACLv6 group, uniquely identifying a basic ACLv6 rule. Range: 0-4294967295 In the create operation, if the value is 4294967295, the ID of a rule is generated automatically. Otherwise, the ID of a rule is already created according to the specified value. The automatically generated ID of an ACLv6 rule depends on the value of hwAclv6NumGroupStep, which corresponds to a basic ACLv6 group in hwAclv6NumGroupTable. The generated ID of the rule is: step+last rule ID/step*step . "
  },
  "hwAclv6BasicAct": {
    "name": "hwAclv6BasicAct",
    "oid": "1.3.6.1.4.1.2011.5.112.1.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "permit": 1,
          "deny": 2
        }
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the action of a rule. Options: 1. permit(1) -indicates that the data packets that meet the conditions can pass 2. deny(2) -indicates that the data packets that meet the conditions are discarded "
  },
  "hwAclv6BasicSrcIpAddressType": {
    "name": "hwAclv6BasicSrcIpAddressType",
    "oid": "1.3.6.1.4.1.2011.5.112.1.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "InetAddressType",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the ip-address type of the rule. The value represents a type of Internet address. Options: 1. unknown(0) -An unknown address type. This value must be used if the value of the corresponding InetAddress object is a zero-length string. It may also be used to indicate an IP address that is not in one of the formats defined below. 2. ipv4(1) -An IPv4 address as defined by the InetAddressIPv4 textual convention. 3. ipv6(2) -An IPv6 address as defined by the InetAddressIPv6 textual convention. 4. ipv4z(3) -A non-global IPv4 address including a zone index as defined by the InetAddressIPv4z textual convention. 5. ipv6z(4) -A non-global IPv6 address including a zone index as defined by the InetAddressIPv6z textual convention. 6. dns(16) -A DNS domain name as defined by the InetAddressDNS textual convention. Each definition of a concrete InetAddressType value must be accompanied by a definition of a textual convention for use with that InetAddressType. To support future extensions, the InetAddressType textual convention SHOULD NOT be sub-typed in object type definitions. It MAY be sub-typed in compliance statements in order to require only a subset of these address types for a compliant implementation. Implementations must ensure that InetAddressType objects and any dependent objects (e.g., InetAddress objects) are consistent. An inconsistentValue error must be generated if an attempt to change an InetAddressType object would, for example, lead to an undefined InetAddress value. In particular, InetAddressType/InetAddress pairs must be changed together if the address type changes (e.g., from ipv6(2) to ipv4(1)). "
  },
  "hwAclv6BasicSrcIpAddress": {
    "name": "hwAclv6BasicSrcIpAddress",
    "oid": "1.3.6.1.4.1.2011.5.112.1.2.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "InetAddress",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes source IP address of the rule. Denotes a generic Internet address. An InetAddress value is always interpreted within the context of an InetAddressType value. Every usage of the InetAddress textual convention is required to specify the InetAddressType object that provides the context. It is suggested that the InetAddressType object be logically registered before the object(s) that use the InetAddress textual convention, if they appear in the same logical row. The value of an InetAddress object must always be consistent with the value of the associated InetAddressType object. Attempts to set an InetAddress object to a value inconsistent with the associated InetAddressType must fail with an inconsistentValue error. When this textual convention is used as the syntax of an index object, there may be issues with the limit of 128 sub-identifiers specified in SMIv2, STD 58. In this case, the object definition MUST include a 'SIZE' clause to limit the number of potential instance sub-identifiers; otherwise the applicable constraints MUST be stated in the appropriate conceptual row DESCRIPTION clauses, or in the surrounding documentation if there is no single DESCRIPTION clause that is appropriate. "
  },
  "hwAclv6BasicSrcIpAddressPrefixLength": {
    "name": "hwAclv6BasicSrcIpAddressPrefixLength",
    "oid": "1.3.6.1.4.1.2011.5.112.1.2.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "InetAddressPrefixLength",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes source IP address prefix length of the rule. Denotes the length of a generic Internet network address prefix. A value of n corresponds to an IP address mask that has n contiguous 1-bits from the most significant bit (MSB), with all other bits set to 0. An InetAddressPrefixLength value is always interpreted within the context of an InetAddressType value. Every usage of the InetAddressPrefixLength textual convention is required to specify the InetAddressType object that provides the context. It is suggested that the InetAddressType object be logically registered before the object(s) that use the InetAddressPrefixLength textual convention, if they appear in the same logical row. InetAddressPrefixLength values larger than the maximum length of an IP address for a specific InetAddressType are treated as the maximum significant value applicable for the InetAddressType. The maximum significant value is 32 for the InetAddressType 'ipv4(1)' and 'ipv4z(3)' and 128 for the InetAddressType 'ipv6(2)' and 'ipv6z(4)'. The maximum significant value for the InetAddressType 'dns(16)' is 0. The value zero is object-specific and must be defined as part of the description of any object that uses this syntax. Examples of the usage of zero might include situations where the Internet network address prefix is unknown or does not apply. The upper bound of the prefix length has been chosen to be consistent with the maximum size of an InetAddress."
  },
  "hwAclv6BasicTimeRangeName": {
    "name": "hwAclv6BasicTimeRangeName",
    "oid": "1.3.6.1.4.1.2011.5.112.1.2.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 32
          }
        ]
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the time range name of a rule. It is used when the effective time of a rule needs to be configured. If hwAclv6BasicTimeRangeName is not set, the rule is valid all the time by default. "
  },
  "hwAclv6BasicEnable": {
    "name": "hwAclv6BasicEnable",
    "oid": "1.3.6.1.4.1.2011.5.112.1.2.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TruthValue",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Describes whether the rule is valid. Options: 1. true(1) -the rule is valid 2. false(2) -the rule is invalid If the rule is associated with a time range parameter through hwAclv6BasicTimeRangeName and the current time is within the defined time range, the value is true(1), which indicates that the rule is valid. If the current time is not within the defined time range, the value is false(2), which indicates that the rule is invalid. If the basic ACL rule is not associated with a time range parameter, the rule is valid all the time. "
  },
  "hwAclv6BasicCount": {
    "name": "hwAclv6BasicCount",
    "oid": "1.3.6.1.4.1.2011.5.112.1.2.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter32",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Describes the statistics of packets that match the rule. "
  },
  "hwAclv6BasicCountClear": {
    "name": "hwAclv6BasicCountClear",
    "oid": "1.3.6.1.4.1.2011.5.112.1.2.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "cleared": 1,
          "nouse": 2
        }
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Clears the statistics of packets that match the rule. Options: 1. cleared(1) -clear the statistics of packets that match the basic ACL rules 2. nouse(2) -indicates no operation When this leaf is queried, the value is fixed to cleared(1). "
  },
  "hwAclv6BasicPriority": {
    "name": "hwAclv6BasicPriority",
    "oid": "1.3.6.1.4.1.2011.5.112.1.2.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 9
          }
        ]
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the priority of a rule. Range: 0-9 Default: 0 The priority ascends with the value. When multiple rules are matched at the same time, the rule with the highest priority prevails. If multiple rules are matched and the priorities are the same, software does not manage the rules and the hardware logic determines which priority prevails. To prevent such a case, you can set different priorities for the rules. "
  },
  "hwAclv6BasicRowStatus": {
    "name": "hwAclv6BasicRowStatus",
    "oid": "1.3.6.1.4.1.2011.5.112.1.2.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "RowStatus",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Indicates the row status. Options: 1. active(1) -when this leaf is queried, the value is fixed to active(1). 2. createAndGo(4) -create a basic ACLv6 rule 3. destroy(6) -delete a basic ACLv6 rule and clear the packet statistics of a basic ACLv6 rule It is used for creating or deleting a basic ACLv6 rule and clearing the packet statistics of a basic ACLv6 rule. To create a rule, enter hwAclv6BasicAct and set hwAclv6BasicRowStatus to createAndGo(4). hwAclv6BasicSrcIpAddress, hwAclv6BasicSrcIpAddressPrefixLength, hwAclv6BasicTimeRangeName are optional. To delete a basic ACLv6 rule, set hwAclv6BasicRowStatus to destroy(6). To clear the packet statistics of a basic ACLv6 rule, you must set hwAclv6BasicCountClear to cleared(1) and hwAclv6BasicRowStatus to createAndGo(4). When this leaf is queried, the value is fixed to active(1). "
  },
  "hwAclv6AdvancedRuleTable": {
    "name": "hwAclv6AdvancedRuleTable",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "Describes the details about an advanced ACLv6 rule in an advanced ACLv6 group. The indexes of this table are hwAclv6AdvancedAclNum and hwAclv6AdvancedSubitem. hwAclv6AdvancedAclNum is the ID of an advanced ACLv6 group. Make sure that the ID is already created in hwAclv6NumGroupTable. hwAclv6AdvancedSubitem is the ID of an advanced ACLv6 rule in the advance ACLv6 group. "
  },
  "hwAclv6AdvancedRuleEntry": {
    "name": "hwAclv6AdvancedRuleEntry",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "HUAWEI-IPDSLAM-ACLV6-MIB",
        "object": "hwAclv6AdvancedAclNum",
        "implied": 0
      },
      {
        "module": "HUAWEI-IPDSLAM-ACLV6-MIB",
        "object": "hwAclv6AdvancedSubitem",
        "implied": 0
      }
    ],
    "status": "current",
    "description": "Describes the details about an advanced ACLv6 rule in an advanced ACLv6 group. The indexes of this entry are hwAclv6AdvancedAclNum and hwAclv6AdvancedSubitem. hwAclv6AdvancedAclNum is the ID of an advanced ACLv6 group. Make sure that the ID is already created in hwAclv6NumGroupTable. hwAclv6AdvancedSubitem is the ID of an advanced ACLv6 rule in the advance ACLv6 group. "
  },
  "hwAclv6AdvancedAclNum": {
    "name": "hwAclv6AdvancedAclNum",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Unsigned32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 3000,
            "max": 3999
          }
        ]
      }
    },
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "Uniquely identifies an advanced ACLv6 group. Range: 3000-3999 Make sure that the ID of the ACLv6 group is already created in hwAclv6NumGroupTable. "
  },
  "hwAclv6AdvancedSubitem": {
    "name": "hwAclv6AdvancedSubitem",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Unsigned32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 4294967295
          }
        ]
      }
    },
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "Describes the ID of an advanced ACLv6 rule in an advanced ACLv6 group, uniquely identifying an advanced ACLv6 rule. Range: 0-4294967295 In the create operation, if the value is 4294967295, the ID of an advanced ACLv6 rule is generated automatically. Otherwise, the ID of an advanced ACLv6 rule is already created according to the specified value. The automatically generated ID of an advanced ACLv6 rule depends on the value of hwAclv6NumGroupStep, which corresponds to an advanced ACLv6 group in hwAclv6NumGroupTable. The generated ID of the rule is step+last rule ID/step*step. "
  },
  "hwAclv6AdvancedAct": {
    "name": "hwAclv6AdvancedAct",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "permit": 1,
          "deny": 2
        }
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the action of a rule. Options: 1. permit(1) -indicates that the data packets that meet the conditions can pass 2. deny(2) -indicates that the data packets that meet the conditions are discarded "
  },
  "hwAclv6AdvancedProtocol": {
    "name": "hwAclv6AdvancedProtocol",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the protocol of IP packets that matches an advanced ACLv6 rule. Range: 0-255 Default: 0 Common protocols: GRE tunneling(47) Internet Control Message Protocol6(58) Any IP protocol(0) IPv6-Authentication header(51) IPv6 Encapsulating Security Payload(50) OSPF routing protocol(89) Transmission control protocol(6) User Datagram protocol(17) "
  },
  "hwAclv6AdvancedSrcIpAddressType": {
    "name": "hwAclv6AdvancedSrcIpAddressType",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "InetAddressType",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the ip-address type of the rule. The value represents a type of Internet address. Options: 1. unknown(0) -An unknown address type. This value must be used if the value of the corresponding InetAddress object is a zero-length string. It may also be used to indicate an IP address that is not in one of the formats defined below. 2. ipv4(1) -An IPv4 address as defined by the InetAddressIPv4 textual convention. 3. ipv6(2) -An IPv6 address as defined by the InetAddressIPv6 textual convention. 4. ipv4z(3) -A non-global IPv4 address including a zone index as defined by the InetAddressIPv4z textual convention. 5. ipv6z(4) -A non-global IPv6 address including a zone index as defined by the InetAddressIPv6z textual convention. 6. dns(16) -A DNS domain name as defined by the InetAddressDNS textual convention. Each definition of a concrete InetAddressType value must be accompanied by a definition of a textual convention for use with that InetAddressType. To support future extensions, the InetAddressType textual convention SHOULD NOT be sub-typed in object type definitions. It MAY be sub-typed in compliance statements in order to require only a subset of these address types for a compliant implementation. Implementations must ensure that InetAddressType objects and any dependent objects (e.g., InetAddress objects) are consistent. An inconsistentValue error must be generated if an attempt to change an InetAddressType object would, for example, lead to an undefined InetAddress value. In particular, InetAddressType/InetAddress pairs must be changed together if the address type changes (e.g., from ipv6(2) to ipv4(1)). "
  },
  "hwAclv6AdvancedSrcIpAddress": {
    "name": "hwAclv6AdvancedSrcIpAddress",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "InetAddress",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes source IP address of the rule. Denotes a generic Internet address. An InetAddress value is always interpreted within the context of an InetAddressType value. Every usage of the InetAddress textual convention is required to specify the InetAddressType object that provides the context. It is suggested that the InetAddressType object be logically registered before the object(s) that use the InetAddress textual convention, if they appear in the same logical row. The value of an InetAddress object must always be consistent with the value of the associated InetAddressType object. Attempts to set an InetAddress object to a value inconsistent with the associated InetAddressType must fail with an inconsistentValue error. When this textual convention is used as the syntax of an index object, there may be issues with the limit of 128 sub-identifiers specified in SMIv2, STD 58. In this case, the object definition MUST include a 'SIZE' clause to limit the number of potential instance sub-identifiers; otherwise the applicable constraints MUST be stated in the appropriate conceptual row DESCRIPTION clauses, or in the surrounding documentation if there is no single DESCRIPTION clause that is appropriate. "
  },
  "hwAclv6AdvancedSrcIpAddressPrefixLength": {
    "name": "hwAclv6AdvancedSrcIpAddressPrefixLength",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "InetAddressPrefixLength",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes source IP address prefix length of the rule. Denotes the length of a generic Internet network address prefix. A value of n corresponds to an IP address mask that has n contiguous 1-bits from the most significant bit (MSB), with all other bits set to 0. An InetAddressPrefixLength value is always interpreted within the context of an InetAddressType value. Every usage of the InetAddressPrefixLength textual convention is required to specify the InetAddressType object that provides the context. It is suggested that the InetAddressType object be logically registered before the object(s) that use the InetAddressPrefixLength textual convention, if they appear in the same logical row. InetAddressPrefixLength values larger than the maximum length of an IP address for a specific InetAddressType are treated as the maximum significant value applicable for the InetAddressType. The maximum significant value is 32 for the InetAddressType 'ipv4(1)' and 'ipv4z(3)' and 128 for the InetAddressType 'ipv6(2)' and 'ipv6z(4)'. The maximum significant value for the InetAddressType 'dns(16)' is 0. The value zero is object-specific and must be defined as part of the description of any object that uses this syntax. Examples of the usage of zero might include situations where the Internet network address prefix is unknown or does not apply. The upper bound of the prefix length has been chosen to be consistent with the maximum size of an InetAddress. "
  },
  "hwAclv6AdvancedSrcOp": {
    "name": "hwAclv6AdvancedSrcOp",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "lt": 1,
          "eq": 2,
          "gt": 3,
          "neq": 4,
          "range": 5,
          "invalid": 255
        }
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the operation types of comparing packet source ports when the type of hwAclv6AdvancedProtocol is set to TCP or UDP. Range: 0-5 Options: 1. lt(1) -indicates '<' 2. eq(2) -indicates '=' 3. gt(3) -indicates '>' 4. neq(4) -indicates '!=' 5. range(5) -indicates within the range 6. invalid(255) -indicates an invalid field. Enter hwAclv6AdvancedSrcPort1 and hwAclv6AdvancedSrcPort2 for the comparison operation only when range(5) is entered. For other values, enter only hwAclv6AdvancedSrcPort1. "
  },
  "hwAclv6AdvancedSrcPort1": {
    "name": "hwAclv6AdvancedSrcPort1",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "InetPortNumber",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the operation value of port 1 in the comparison operation types of the source port in hwAclv6AdvancedSrcOp when hwAclv6AdvancedProtocol is set to TCP or UDP. Range: 0-65535 For example, when hwAclv6AdvancedSrcOp is set to eq(2) (=), it indicates that the source port ID of matched packets equals to the value of hwAclv6AdvancedSrcPort1. If the value is not specified for an advanced ACLv6 rule, the invalid value 0 is obtained in the query operation. The number in the brackets is the port IDs that are commonly used. The port names and meanings of different port names are as follows: bgp: Border Gateway Protocol(179) chargen: Character generator (19) cmd: Remote commands (514) daytime: Daytime (13) discard: Discard (9) domain: Domain Name Service (53) echo: Echo (7) exec: Exec (512) finger: Finger (79) ftp: File Transfer Protocol (21) ftp-data: FTP data connections (20) gopher: Gopher (70) hostname: NIC hostname server (101) irc: Internet Relay Chat (194) klogin: Kerberos login (543) kshell: Kerberos shell (544) login: Login (rlogin, 513) lpd: Printer service (515) nntp: Network News Transport Protocol (119) pop2: Post Office Protocol v2 (109) pop3: Post Office Protocol v3 (110) smtp: Simple Mail Transport Protocol (25) sunrpc: SUN Remote Procedure Call (111) tacacs: TAC Access Control System (49) talk: Talk (517) telnet: Telnet (23) time: Time (37) uucp: Unix-to-Unix Copy Program (540) whois: Nicname (43) www: World Wide Web (HTTP, 80) "
  },
  "hwAclv6AdvancedSrcPort2": {
    "name": "hwAclv6AdvancedSrcPort2",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "InetPortNumber",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the operation value of port 2 in the comparison operation types of the source port in hwAclv6AdvancedSrcOp when hwAclv6AdvancedProtocol is set to TCP or UDP. Range: 0-65535 The operation value of port 2 is needed only when hwAclv6AdvancedSrcOp is set to range(5). It is dedicated to describe the upper threshold of ports. If the value is not specified for an advanced ACL rule , the invalid value 0 is obtained in the query operation. For the port IDs that are commonly used, port names and meanings of different port names, see the descriptions in hwAclv6AdvancedSrcPort1. "
  },
  "hwAclv6AdvancedDestIpAddressType": {
    "name": "hwAclv6AdvancedDestIpAddressType",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "InetAddressType",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Destination IP address type of the advanced ACLv6 rule. A value that represents a type of Internet address. Options: 1. unknown(0) -An unknown address type. This value must be used if the value of the corresponding InetAddress object is a zero-length string. It may also be used to indicate an IP address that is not in one of the formats defined below. 2. ipv4(1) -An IPv4 address as defined by the InetAddressIPv4 textual convention. 3. ipv6(2) -An IPv6 address as defined by the InetAddressIPv6 textual convention. 4. ipv4z(3) -A non-global IPv4 address including a zone index as defined by the InetAddressIPv4z textual convention. 5. ipv6z(4) -A non-global IPv6 address including a zone index as defined by the InetAddressIPv6z textual convention. 6. dns(16) -A DNS domain name as defined by the InetAddressDNS textual convention. Each definition of a concrete InetAddressType value must be accompanied by a definition of a textual convention for use with that InetAddressType. To support future extensions, the InetAddressType textual convention SHOULD NOT be sub-typed in object type definitions. It MAY be sub-typed in compliance statements in order to require only a subset of these address types for a compliant implementation. Implementations must ensure that InetAddressType objects and any dependent objects (e.g., InetAddress objects) are consistent. An inconsistentValue error must be generated if an attempt to change an InetAddressType object would, for example, lead to an undefined InetAddress value. In particular, InetAddressType/InetAddress pairs must be changed together if the address type changes (e.g., from ipv6(2) to ipv4(1))."
  },
  "hwAclv6AdvancedDestIpAddress": {
    "name": "hwAclv6AdvancedDestIpAddress",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "InetAddress",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes destination IP address of the advanced ACLv6 rule. Denotes a generic Internet address. An InetAddress value is always interpreted within the context of an InetAddressType value. Every usage of the InetAddress textual convention is required to specify the InetAddressType object that provides the context. It is suggested that the InetAddressType object be logically registered before the object(s) that use the InetAddress textual convention, if they appear in the same logical row. The value of an InetAddress object must always be consistent with the value of the associated InetAddressType object. Attempts to set an InetAddress object to a value inconsistent with the associated InetAddressType must fail with an inconsistentValue error. When this textual convention is used as the syntax of an index object, there may be issues with the limit of 128 sub-identifiers specified in SMIv2, STD 58. In this case, the object definition MUST include a 'SIZE' clause to limit the number of potential instance sub-identifiers; otherwise the applicable constraints MUST be stated in the appropriate conceptual row DESCRIPTION clauses, or in the surrounding documentation if there is no single DESCRIPTION clause that is appropriate. "
  },
  "hwAclv6AdvancedDestIpAddressPrefixLength": {
    "name": "hwAclv6AdvancedDestIpAddressPrefixLength",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.13",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "InetAddressPrefixLength",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes destination IP address prefix length of the advanced ACLv6 rule. Denotes the length of a generic Internet network address prefix. A value of n corresponds to an IP address mask that has n contiguous 1-bits from the most significant bit (MSB), with all other bits set to 0. An InetAddressPrefixLength value is always interpreted within the context of an InetAddressType value. Every usage of the InetAddressPrefixLength textual convention is required to specify the InetAddressType object that provides the context. It is suggested that the InetAddressType object be logically registered before the object(s) that use the InetAddressPrefixLength textual convention, if they appear in the same logical row. InetAddressPrefixLength values larger than the maximum length of an IP address for a specific InetAddressType are treated as the maximum significant value applicable for the InetAddressType. The maximum significant value is 32 for the InetAddressType 'ipv4(1)' and 'ipv4z(3)' and 128 for the InetAddressType 'ipv6(2)' and 'ipv6z(4)'. The maximum significant value for the InetAddressType 'dns(16)' is 0. The value zero is object-specific and must be defined as part of the description of any object that uses this syntax. Examples of the usage of zero might include situations where the Internet network address prefix is unknown or does not apply. The upper bound of the prefix length has been chosen to be consistent with the maximum size of an InetAddress. "
  },
  "hwAclv6AdvancedDestOp": {
    "name": "hwAclv6AdvancedDestOp",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.14",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "lt": 1,
          "eq": 2,
          "gt": 3,
          "neq": 4,
          "range": 5,
          "invalid": 255
        }
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes destination port operation symbol of the advanced ACLv6 rule when the hwAclv6AdvancedProtocol is TCP or UDP. Options: 1. lt(1) -indicates '<' 2. eq(2) -indicates '=' 3. gt(3) -indicates '>' 4. neq(4) -indicates '!=' 5. range(5) -indicates within the range 6. invalid(255) -indicates an invalid field. Enter hwAclv6AdvancedDestPort1 and hwAclv6AdvancedDestPort2 for the comparison operation only when range(5) is entered. For other values, enter only hwAclv6AdvancedDestPort1. "
  },
  "hwAclv6AdvancedDestPort1": {
    "name": "hwAclv6AdvancedDestPort1",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.15",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "InetPortNumber",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the operation value of port 1 in the comparison operation types of the destination port in hwAclv6AdvancedDestOp when hwAclv6AdvancedProtocol is set to TCP or UDP. Range: 0-65535 For example, when hwAclv6AdvancedDestOp is set to eq(2) (=), it indicates that the ID of the destination port that match packets equals to the value of hwAclv6AdvancedDestPort1. If the value is not specified for an advanced ACLv6 rule, the invalid value 0 is obtained in the query operation. For the port IDs that are commonly used, port names and meanings of different port names, see the descriptions in hwAclv6AdvancedSrcPort1. "
  },
  "hwAclv6AdvancedDestPort2": {
    "name": "hwAclv6AdvancedDestPort2",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.16",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "InetPortNumber",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the operation value of port 2 in the comparison operation types of the destination port in hwAclv6AdvancedDestOp when hwAclv6AdvancedProtocol is set to TCP or UDP. Range: 0-65535 The operation value of port 2 is needed only when hwAclv6AdvancedDestOp is set to range(5). It is dedicated to describe the upper threshold of ports. If the value is not specified for an advanced ACLv6 rule, the invalid value 0 is obtained in the query operation. For the port IDs that are commonly used, port names and meanings of different port names, see the descriptions in hwAclv6AdvancedSrcPort1. "
  },
  "hwAclv6AdvancedPrecedence": {
    "name": "hwAclv6AdvancedPrecedence",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.17",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": -1,
            "max": -1
          },
          {
            "min": 0,
            "max": 7
          }
        ]
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the priority field of data frames that an advanced ACLv6 rule needs to match. If the value is not specified for an advanced ACLv6 rule, the invalid value -1 is obtained in the query operation. The name and meanings of the precedence values are as follows: routine: routine priority(0) priority: priority(1) immediate: immediate priority(2) flash: flash priority(3) flashOverride: flash-override priority(4) critical: critical priority(5) internet: internetwork control priority(6) network: network control priority(7) invalid: invalid field(-1) "
  },
  "hwAclv6AdvancedTos": {
    "name": "hwAclv6AdvancedTos",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.18",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": -1,
            "max": -1
          },
          {
            "min": 0,
            "max": 15
          }
        ]
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the type of service (ToS) field of data frames that an advanced ACLv6 rule needs to match. Range: 0-15, -1 If the value is not specified for an advanced ACLv6 rule, the invalid value -1 is obtained in the query operation. The number in the brackets is the ToS value. The meanings of ToS names are as follows: normal Normal service (0) min-monetary-cost: the service with minimum monetary cost (1) max-reliability: the service with maximum reliability (2) max-throughput: the service with maximum throughput (4) min-delay: the service with minimum delay (8) "
  },
  "hwAclv6AdvancedDscp": {
    "name": "hwAclv6AdvancedDscp",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.19",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": -1,
            "max": -1
          },
          {
            "min": 0,
            "max": 63
          }
        ]
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the differentiated services code point (DSCP) value of data frames that an advanced ACLv6 rule needs to match. Range: 0-63, -1 If the value is not specified for an advanced ACLv6 rule, the invalid value -1 is obtained in the query operation. The number in the brackets is the DSCP value. The names and meanings of the DSCP names are as follows: af1: service of Assured Forwarding 1 (10) af2: service of Assured Forwarding 2 (18) af3: service of Assured Forwarding 3 (26) af4: service of Assured Forwarding 4 (34) be: Best Effort service (0) cs1: service of Class Seletor 1 (8) cs2: service of Class Seletor 2 (16) cs3: service of Class Seletor 3 (24) cs4: service of Class Seletor 4 (32) cs5: service of Class Seletor 5 (40) cs6: service of Class Seletor 6 (48) cs7: service of Class Seletor 7 (56) ef: Expedited Forwarding service (46) "
  },
  "hwAclv6AdvancedTimeRangeName": {
    "name": "hwAclv6AdvancedTimeRangeName",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.20",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 32
          }
        ]
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the time range name of a rule. It is used when the effective time of a rule needs to be configured. If hwAclv6AdvancedTimeRangeName is not set, the rule is valid all the time by default. "
  },
  "hwAclv6AdvancedIcmpv6Type": {
    "name": "hwAclv6AdvancedIcmpv6Type",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.21",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": -1,
            "max": -1
          },
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the ICMPv6 type when packets are filtered by ICMPv6 type and when hwAclv6AdvancedProtocol is set to ICMPv6. Range: 0-255, -1 If the value is not specified for an advanced ACLv6 rule, the invalid value -1 is obtained in the query operation. Type: Indicates the ICMPv6 packet type Code: Indicates the ICMPv6 code. The meanings are as follows: echo Type=128, Code=0 echo-reply Type=129, Code=0 err-Header-field Type=4, Code=0 frag-time-exceeded Type=3, Code=1 hop-limit-exceeded Type=3, Code=0 host-admin-prohib Type=1, Code=1 host-unreachable Type=1, Code=3 neighbor-advertisement Type=136, Code=0 neighbor-solicitation Type=135, Code=0 network-unreachable Type=1, Code=0 packet-too-big Type=2, Code=0 port-unreachable Type=1, Code=4 redirect Type=137, Code=0 router-advertisement Type=134, Code=0 router-solicitation Type=133, Code=0 unknown-ipv6-opt Type=4, Code=2 unknown-next-hdr Type=4, Code=1 "
  },
  "hwAclv6AdvancedIcmpv6Code": {
    "name": "hwAclv6AdvancedIcmpv6Code",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.22",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": -1,
            "max": -1
          },
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes ICMPv6 codes that the ICMPv6 packets are filtered both by ICMPv6 type and ICMP code when hwAclv6AdvancedProtocol is set to ICMPv6. Range: 0-255, -1 If the value is not specified for an advanced ACLv6 rule, the invalid value -1 is obtained in the query operation. For the definition and meanings of ICMPv6 codes, see the description in hwAclv6AdvancedIcmpv6Type. "
  },
  "hwAclv6AdvancedEnable": {
    "name": "hwAclv6AdvancedEnable",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.23",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TruthValue",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Describes whether an advanced ACLv6 rule is valid. Options: 1. true(1) -indicates that an advanced ACLv6 rule is valid 2. false(2) -indicates that an advanced ACLv6 rule is invalid If the advanced ACLv6 rule is associated with a time range parameter through hwAclv6AdvancedTimeRangeName and the current time is within the defined time range, the value is true(1), which indicates validity. If the current time is not within the defined time range, the value is false(2), which indicates invalidity. If the advanced ACLv6 rule is not associated with a time range parameter, the advanced ACLv6 rule is valid all the time. "
  },
  "hwAclv6AdvancedCount": {
    "name": "hwAclv6AdvancedCount",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.24",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter32",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Describes the statistics of packets that match the rule. "
  },
  "hwAclv6AdvancedCountClear": {
    "name": "hwAclv6AdvancedCountClear",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.25",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "cleared": 1,
          "nouse": 2
        }
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Clears the statistics of packets that match the rule. Options: 1. cleared(1) -clear the statistics of packets that match the advanced ACLv6 rules 2. nouse(2) -indicates no operation When this leaf is queried, the value is fixed to cleared(1). "
  },
  "hwAclv6AdvancedPriority": {
    "name": "hwAclv6AdvancedPriority",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.26",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 9
          }
        ]
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Describes the priority of a rule. Range: 0-9 Default: 0 The priority ascends with the value. When multiple rules are matched at the same time, the rule with the highest priority prevails. If multiple rules are matched and the priorities are the same, software does not manage the rules and the hardware logic determines which priority prevails. To prevent such a case, you can set different priorities for the rules. "
  },
  "hwAclv6AdvancedRowStatus": {
    "name": "hwAclv6AdvancedRowStatus",
    "oid": "1.3.6.1.4.1.2011.5.112.1.3.1.27",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "RowStatus",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "Indicates the row status. Options: 1. active(1) -when this leaf is queried, the value is fixed to active(1). 2. createAndGo(4) -create an advanced ACLv6 rule 3. destroy(6) -delete an advanced ACLv6 rule and clear the packet statistics of an advanced ACLv6 rule It is used for creating or deleting an advanced ACLv6 rule and clearing the packet statistics of an advanced ACLv6 rule. To create an advanced ACLv6 rule, enter hwAclv6AdvancedAct and set hwAclv6AdvancedRowStatus to createAndGo(4). Other parameters are optional. The operator of the source port and destination port and port 1 and port 2 take effect only when the protocol type is specified as TCP or UDP. Port 2 needs to be specified only when the port operator character is specified as a value range. The IDs of the two ports are not differentiated, which are automatically adjusted after delivery. hwAclv6AdvancedIcmpv6Type and hwAclv6AdvancedIcmpv6Code are specified only when the protocol type is ICMP. To delete an advanced ACLv6 rule, set hwAclv6AdvancedRowStatus to destroy(6). To clear the statistics of packets that match the advanced ACLv6 rules, set hwAclv6AdvancedCountClear to cleared(1) and hwAclv6AdvancedRowStatus to createAndGo(4). When this leaf is queried, the value is fixed to active(1). "
  },
  "hwAclv6Traps": {
    "name": "hwAclv6Traps",
    "oid": "1.3.6.1.4.1.2011.5.112.2",
    "class": "objectidentity"
  },
  "hwAclv6CommonTraps": {
    "name": "hwAclv6CommonTraps",
    "oid": "1.3.6.1.4.1.2011.5.112.2.1",
    "class": "objectidentity"
  },
  "hwAclv6CommonTrapsPrefix": {
    "name": "hwAclv6CommonTrapsPrefix",
    "oid": "1.3.6.1.4.1.2011.5.112.2.1.0",
    "class": "objectidentity"
  },
  "hwAclv6AddBasicAclTrap": {
    "name": "hwAclv6AddBasicAclTrap",
    "oid": "1.3.6.1.4.1.2011.5.112.2.1.0.1",
    "class": "notificationtype",
    "objects": [
      {
        "module": "HUAWEI-IPDSLAM-ACLV6-MIB",
        "object": "hwAclv6BasicAclNum"
      },
      {
        "module": "HUAWEI-IPDSLAM-ACLV6-MIB",
        "object": "hwAclv6BasicSubitem"
      }
    ],
    "status": "current",
    "description": "The hwAclv6AddBasicAclTrap will be sent when the basic aclv6 rule is added."
  },
  "hwAclv6DeleteBasicAclTrap": {
    "name": "hwAclv6DeleteBasicAclTrap",
    "oid": "1.3.6.1.4.1.2011.5.112.2.1.0.2",
    "class": "notificationtype",
    "objects": [
      {
        "module": "HUAWEI-IPDSLAM-ACLV6-MIB",
        "object": "hwAclv6BasicAclNum"
      },
      {
        "module": "HUAWEI-IPDSLAM-ACLV6-MIB",
        "object": "hwAclv6BasicSubitem"
      }
    ],
    "status": "current",
    "description": "The hwAclv6DeleteBasicAclTrap will be sent when the basic aclv6 rule is deleted."
  },
  "hwAclv6AddAdvancedAclTrap": {
    "name": "hwAclv6AddAdvancedAclTrap",
    "oid": "1.3.6.1.4.1.2011.5.112.2.1.0.3",
    "class": "notificationtype",
    "objects": [
      {
        "module": "HUAWEI-IPDSLAM-ACLV6-MIB",
        "object": "hwAclv6AdvancedAclNum"
      },
      {
        "module": "HUAWEI-IPDSLAM-ACLV6-MIB",
        "object": "hwAclv6AdvancedSubitem"
      }
    ],
    "status": "current",
    "description": "The hwAclv6AddAdvancedAclTrap will be sent when the advanced aclv6 rule is added."
  },
  "hwAclv6DeleteAdvancedAclTrap": {
    "name": "hwAclv6DeleteAdvancedAclTrap",
    "oid": "1.3.6.1.4.1.2011.5.112.2.1.0.4",
    "class": "notificationtype",
    "objects": [
      {
        "module": "HUAWEI-IPDSLAM-ACLV6-MIB",
        "object": "hwAclv6AdvancedAclNum"
      },
      {
        "module": "HUAWEI-IPDSLAM-ACLV6-MIB",
        "object": "hwAclv6AdvancedSubitem"
      }
    ],
    "status": "current",
    "description": "The hwAclv6DeleteAdvancedAclTrap will be sent when the advanced aclv6 rule is deleted."
  },
  "hwAclv6AlarmTraps": {
    "name": "hwAclv6AlarmTraps",
    "oid": "1.3.6.1.4.1.2011.5.112.2.2",
    "class": "objectidentity"
  },
  "meta": {
    "comments": [
      "ASN.1 source file://MIBS/asn1/HUAWEI-IPDSLAM-ACLV6-MIB.mib",
      "Produced by pysmi-0.3.4 at Tue Apr 20 19:30:50 2021",
      "On host samy-ThinkPad-T495s platform Linux version 5.8.0-50-generic by user root",
      "Using Python version 3.8.5 (default, Jan 27 2021, 15:41:15) "
    ],
    "module": "HUAWEI-IPDSLAM-ACLV6-MIB"
  }
}