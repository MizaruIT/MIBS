{
  "imports": {
    "class": "imports",
    "INET-ADDRESS-MIB": [
      "InetAddress"
    ],
    "SNMPv2-CONF": [
      "MODULE-COMPLIANCE",
      "NOTIFICATION-GROUP"
    ],
    "SNMPv2-SMI": [
      "MODULE-IDENTITY",
      "MibIdentifier",
      "Integer32",
      "iso",
      "Bits",
      "IpAddress",
      "Unsigned32",
      "Gauge32",
      "TimeTicks",
      "Counter64",
      "OBJECT-TYPE",
      "OBJECT-IDENTITY",
      "enterprises",
      "Counter32",
      "NOTIFICATION-TYPE"
    ],
    "SNMPv2-TC": [
      "TEXTUAL-CONVENTION",
      "DisplayString"
    ]
  },
  "ibm": {
    "name": "ibm",
    "oid": "1.3.6.1.4.1.2",
    "class": "objectidentity"
  },
  "ibmProd": {
    "name": "ibmProd",
    "oid": "1.3.6.1.4.1.2.6",
    "class": "objectidentity"
  },
  "bcCustom": {
    "name": "bcCustom",
    "oid": "1.3.6.1.4.1.2.6.215",
    "class": "moduleidentity",
    "revisions": [
      {
        "revision": "2011-05-27 10:30",
        "description": "Initial version of this module."
      }
    ],
    "lastupdated": "200807291830Z",
    "organization": "Brocade Communications Systems, Inc.,",
    "contactinfo": "Customer Support Group Brocade Communications Systems, 1745 Technology Drive, San Jose, CA 95110 U.S.A Tel: +1-408-392-6061 Fax: +1-408-392-6656 Email: support@Brocade.COM WEB: www.brocade.com",
    "description": "The MIB module is to get the details of Pharos Embedded switch. copyright (c) 1996-2003 Brocade Communications Systems, Inc. All rights reserved."
  },
  "bcCustomMibVersion": {
    "name": "bcCustomMibVersion",
    "oid": "1.3.6.1.4.1.2.6.215.1",
    "class": "objectidentity",
    "status": "current",
    "description": "The OID subtree for version information"
  },
  "ports": {
    "name": "ports",
    "oid": "1.3.6.1.4.1.2.6.215.2",
    "class": "objectidentity",
    "status": "current",
    "description": "The OID subtree for Portmodule details"
  },
  "firmware": {
    "name": "firmware",
    "oid": "1.3.6.1.4.1.2.6.215.3",
    "class": "objectidentity",
    "status": "current",
    "description": "The OID subtree for Firmware operations"
  },
  "files": {
    "name": "files",
    "oid": "1.3.6.1.4.1.2.6.215.4",
    "class": "objectidentity",
    "status": "current",
    "description": "The OID subtree for various file operations"
  },
  "protocols": {
    "name": "protocols",
    "oid": "1.3.6.1.4.1.2.6.215.5",
    "class": "objectidentity",
    "status": "current",
    "description": "The OID subtree for various protocol configuration operations"
  },
  "license": {
    "name": "license",
    "oid": "1.3.6.1.4.1.2.6.215.6",
    "class": "objectidentity",
    "status": "current",
    "description": "The OID subtree for feature license key configuration operations"
  },
  "mibCustomVersion": {
    "name": "mibCustomVersion",
    "oid": "1.3.6.1.4.1.2.6.215.1.1",
    "class": "objectidentity"
  },
  "mibMajorMinor": {
    "name": "mibMajorMinor",
    "oid": "1.3.6.1.4.1.2.6.215.1.1.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Integer32",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "The MIB major and minor version number is a 4 byte value of the form xx:xx:yy:yy. The higher 2 byte (xx:xx) is for the major version number. The lower 2 byte (yy:yy) is for the minor version number. Rule of MIB Version: Major: Incremented by one every time a new object is added. When the Major number is incremented the Minor number should be reset and start at the value 1. Minor: Increment by one only when an object is modified and no new object(s) are added."
  },
  "iomGlobal": {
    "name": "iomGlobal",
    "oid": "1.3.6.1.4.1.2.6.215.1.2",
    "class": "objectidentity"
  },
  "iomCapability": {
    "name": "iomCapability",
    "oid": "1.3.6.1.4.1.2.6.215.1.2.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "The AMM will use this object read the IOM capabilities. The IOM must set its capabilities prior to its POST transition. The unsigned INTEGER value will be treated as the 32 bits in network byte order. That is the bit 0 will be the left most bit and bit 31 will be the right most bit. The bit pattern definition is defined as below. Bit(31): IOM Mode Changeable: Set to 1, IOM supports to change its operation mode. Bit(30): Reserved for Port Based VLAN: Set to 1, IOM supports port based VLAN. Bit(29): Reserved for Port Statistics: Set to 1, IOM supports port statistics. Bit(28): Firmware group: Set to 1, IOM supports firmware group MIB objects. Bit(27): Files group: : Set to 1, IOM supports files group MIB objects. Bit(26): Reserved for VLAN group: Set to 1, IOM supports system vlan group MIB objects. Bit(25): Protocols: Set to 1, IOM supports protocols group MIB objects. Bit(24): Port Information: Set to 1, IOM supports port information group MIB objects. Bit(23): Feature License Information:Set to 1, IOM supports license key status reporting group MIB objects. Bit(22): PCI Adapter Inventory Information: Set 626 to 1, IOM supports reporting of PCI Adapter Inventory group MIB objects. Note: applicable for a PCIe IOM only. Bit(0-21): Reserved: must be set to zeroes."
  },
  "iomMode": {
    "name": "iomMode",
    "oid": "1.3.6.1.4.1.2.6.215.1.2.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "managedSwitchMode": 1,
          "passthruNativeMode": 2,
          "passthruEnhanceMode": 3
        }
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "This MIB object provides the ability to read and write the current operation mode of operation of the IOM"
  },
  "portInformation": {
    "name": "portInformation",
    "oid": "1.3.6.1.4.1.2.6.215.2.1",
    "class": "objectidentity"
  },
  "portInformationTable": {
    "name": "portInformationTable",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "Table that contains port information for the I/O Module."
  },
  "portInformationEntry": {
    "name": "portInformationEntry",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "IBM-BCCUSTOM-MIB",
        "object": "portModuleIndex",
        "implied": 0
      },
      {
        "module": "IBM-BCCUSTOM-MIB",
        "object": "portModuleType",
        "implied": 0
      }
    ],
    "status": "current",
    "description": "I/O Module port entry"
  },
  "portModuleIndex": {
    "name": "portModuleIndex",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "I/O Module port sequence index."
  },
  "portModuleType": {
    "name": "portModuleType",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unUsed": 0,
          "externalPort": 1,
          "externalManagementPort": 2,
          "externalDualPort": 3,
          "bladePort": 4,
          "mmManagementPort": 5,
          "uplinkPort": 6,
          "interModulePort": 7,
          "interModuleManagementPort": 8,
          "interModuleDualPort": 9,
          "interModuleExternalBridgePort": 10,
          "interModuleInternalBridgePort": 11
        }
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Indicates the given port type of the I/O Module. The definitions of port types are: unUsed: the value of zero indicates the request is for a real port index of the IOM in the OID. In the port type GET operation, the return value of zero means the port is not used for anything. externalPort: This port is connected to an external device and is for data traffic. externalManagementPort: This port is solely for an external management connection. This port is not used for data traffic from an external device externalDualPort: This port is used for both data traffic as well as for management traffic. bladePort : This port is connected to a blade. mmManagementPort: This port is connected to the Management Module. uplinkPort: This port is configured for up link functionality. interModulePort(: This port is connected to another I/O Module for data. interModuleManagementPort: This port is connected to another I/O Module for management purpose. interModuleDualPort: The port is connected to another I/O Module and can be used for both data and management purpose. interModuleExternalBridgePort: This port is an external bridge port that connects to another bridge. interModuleInternalBridgePort: This port is an internal bridge port that connects to chassis bridge module. To get the port type of a given port, the port type in OID must be zero and the port command in the OID is 2. For an example: To get a port type of the real port index 7, the OID would be: 1.3.6.1.4.1.2.6.215.2.1.1.1.2.7.0 and the result should be 4 (bladePort)."
  },
  "portModuleLinkState": {
    "name": "portModuleLinkState",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "down": 0,
          "up": 1,
          "initialized": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "The current port link state of the I/O Module. down: the physical port is down or off. up: the physical port 817 is up and active initialized: the physical port has completed initializion but is not active yet."
  },
  "portModuleLabel": {
    "name": "portModuleLabel",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 128
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "The port string label of the I/O module. The IOM may allow for the port label to be configured from the I/O Modules user interface but the default port label must reflect.port type description as defined below: Unused port External port External Management port External Dual port Blade port MM Management port Up-Link port Interconnect Modular port Interconnect Modular Management port Interconnect Modular Dual port The write ACCESS will allow AMM to change the port label as needed."
  },
  "portModuleSpeed": {
    "name": "portModuleSpeed",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "autoduplex": 0,
          "hundred-Mbpsfullduplex": 1,
          "one-Gbpsfullduplex": 10,
          "two-Gbpsfullduplex": 20,
          "four-Gbpsfullduplex": 40,
          "six-Gbpsfullduplex": 60,
          "eight-Gbpsfullduplex": 80,
          "ten-Gbpsfullduplex": 100,
          "fourteen-Gbpsfullduplex": 140,
          "sixteen-Gbpsfullduplex": 160,
          "twenty-Gbpsfullduplex": 200,
          "fourty-Gbpsfullduplex": 400,
          "fivtysix-Gbpsfullduplex": 560,
          "sixty-Gbpsfullduplex": 600,
          "eighty-Gbpsfullduplex": 800,
          "hundred-Gbpsfullduplex": 1000,
          "hundredandtwelve-Gbpsfullduplex": 1120,
          "hundredandsixtyeight-Gbpsfullduplex": 1680
        }
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "The INTEGER value will indicate the current speed of the port. The INTEGER values are defined as follows: A signed value is Half duplex, A unsigned value is FULL Duplex. The value is the speed in multiple of 100 Mbps. The value of 0 is special for AUTO Speed, Auto Duplex. For example: 0: (SET) Auto Speed, Auto Duplex, GET (Not available due to link down) -1: 100 Mbps Half Duplex 1: 100 Mbps FULL Duplex 10: 1 Gbps FULL Duplex 20: 2 Gbps FULL Duplex 40: 4 Gbps FULL Duplex. 60: 6 Gbps FULL Duplex. 80: 8 Gbps FULL Duplex 100: 10 Gbps FULL Duplex 140: 14 Gbps FULL Duplex 160: 16 Gbps FULL Duplex 200: 20 Gbps FULL Duplex 400: 40 Gbps FULL Duplex 560: 56 Gbps FULL Duplex 600: 60 Gbps FULL Duplex 800: 80 Gbps FULL Duplex 1000: 100 Gbps FULL Duplex 1120: 112 Gbps FULL Duplex 1680: 168 Gbps FULL Duplex The value of zero is invalid in the get operation but it is valid in the set operation (Zero is the value used for a set operation for Auto Speed, Auto Duplex )."
  },
  "portModuleMedia": {
    "name": "portModuleMedia",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "copper": 0,
          "serdes": 1,
          "opticalShortHaul": 32,
          "opticalInterHaul": 40,
          "opticalLongHaul": 48,
          "other": 255
        }
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "The port media type of the I/O Module."
  },
  "portModuleProtocol": {
    "name": "portModuleProtocol",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "ethernet": 16,
          "fibreChannel": 32,
          "scalability": 48,
          "infiniband": 64,
          "pciExpress": 80,
          "myrinet": 112,
          "serial": 120
        }
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "The port protocol of the I/O Module."
  },
  "portModuleTotal": {
    "name": "portModuleTotal",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "This value must return the the total number of ports supported on the IOM. This value must be customized"
  },
  "portModuleSpeedList": {
    "name": "portModuleSpeedList",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 128
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "The string contains all the available speed settings that is applicable to the port. It is a special format so the application can parse the string to obtain all the possible speed settings. The speeds supported are define by 927 a token inside the pair of <> brackets. Inside the bracket there are two parts: the speed number which is the multiple of 100 Mbps and a word either HALF or FULL. For examples: <1 HALF> indicates 100 Mbps Half Duplex. <1 FULL> is 100 Mbps Full Duplex. <10 FULL> is 1 Gbps FULL Duplex. <20 FULL> is 2 Gbps FULL Duplex. <40 FULL> is 4 Gbps FULL Duplex <60 FULL> is 6 Gbps FULL Duplex <80 FULL> is 8 Gbps FULL Duplex <100 FULL> is 10 Gbps FULL Duplex. <140 FULL> is 14 Gbps FULL Duplex. <160 FULL> is 16 Gbps FULL Duplex. <200 FULL> is 20 Gbps FULL Duplex <400 FULL> is 40 Gbps FULL Duplex <560 FULL> is 56 Gbps FULL Duplex <600 FULL> is 60 Gbps FULL Duplex. <800 FULL> is 80 Gbps FULL Duplex. <1000 FULL> is 100 Gbps FULL Duplex. <1120 FULL> is 112 Gbps FULL Duplex. <1680 FULL> is 168 Gbps FULL Duplex. <AUTO> is a special token to indicate Auto Speed, Auto Duplex. <END> is a special token to mark the end of the list. The format of the string is <token><token><token> <END> The first token is always the current setting of the port. examples: <AUTO><1 HALF><1 FULL><10 FULL><40 FULL><100 FULL><END> The example shows the port is currently set as AUTO. The port can be set to any value of Auto, 100 Mbps Half Duplex, 100 Mbps Full Duplex, 1 Gbps Full Duplex, 4 Gbps Full Duplex, and 10 Gbps Full Duplex."
  },
  "portModuleReal": {
    "name": "portModuleReal",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "To map from relative port index based on port type to the real port index of the server."
  },
  "portModuleRelative": {
    "name": "portModuleRelative",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "To map from real port index to the relative port index of the server."
  },
  "portModuleLaneCount": {
    "name": "portModuleLaneCount",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "onex": 1,
          "twox": 2,
          "fourx": 4,
          "eightx": 8,
          "twelvex": 12,
          "sixteenx": 16
        }
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "The value represents the number of lanes supported by the port."
  },
  "portModuleCableLength": {
    "name": "portModuleCableLength",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.13",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "The length (in meters) of the cable supported by this port."
  },
  "portModuleCableManufacturer": {
    "name": "portModuleCableManufacturer",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.14",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 128
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "A string that contains the cable manufacturer. The name cannot exceed 64 1028 octets."
  },
  "portModuleCableCompatiblity": {
    "name": "portModuleCableCompatiblity",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.15",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "incompatible": 0,
          "compatible": 1,
          "compatibleButNotRecommnded": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Indicates the compatibility of the external cable which is currently plugged into this port."
  },
  "portModuleCableType": {
    "name": "portModuleCableType",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.16",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 128
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "A string that designates the external cable type for this port. The name cannot exceed 64 octets. For example, Active Copper, Passive Copper, Active Fibre, Passive Fibre."
  },
  "portModuleDataRate": {
    "name": "portModuleDataRate",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.17",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "sdr": 0,
          "ddr": 1,
          "qdr": 2,
          "edr": 3,
          "fdr": 4
        }
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "The value represents the data rate supported for this port. SDR (single data rate), DDR (double data rate), QDR (quad data rate), EDR (enhanced data rate), FDR (fourteen data rate)."
  },
  "portModuleLicensedState": {
    "name": "portModuleLicensedState",
    "oid": "1.3.6.1.4.1.2.6.215.2.1.1.1.18",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "notApplicable": 0,
          "notLicensed": 1,
          "licensed": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "The value represents the port license state. If this port is a base port that does not require a license key then the state will always indicate notApplicable. If the port needs to be enabled by a license key then the state may be licensed or not licensed depending on if the license key is installed."
  },
  "firmwareOps": {
    "name": "firmwareOps",
    "oid": "1.3.6.1.4.1.2.6.215.3.1",
    "class": "objectidentity"
  },
  "fwInformationTable": {
    "name": "fwInformationTable",
    "oid": "1.3.6.1.4.1.2.6.215.3.1.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "Table of Firmware Image information."
  },
  "fwInformationEntry": {
    "name": "fwInformationEntry",
    "oid": "1.3.6.1.4.1.2.6.215.3.1.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "IBM-BCCUSTOM-MIB",
        "object": "fwImageIndex",
        "implied": 0
      }
    ],
    "status": "current",
    "description": "I/O Module Firmware Image entry"
  },
  "fwImageIndex": {
    "name": "fwImageIndex",
    "oid": "1.3.6.1.4.1.2.6.215.3.1.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Firmware Image index."
  },
  "fwImageInformation": {
    "name": "fwImageInformation",
    "oid": "1.3.6.1.4.1.2.6.215.3.1.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Information about the image - This string must follow the format below: Version: %s\\n, Rel-Date: %s\\n, Status: %s\\n, Type: %s\\n, Size: %s\\n, Other-Info: %s\\n\\ Version: The version of the image and should match firmware VPD information. Rel-Date: The release date of the image which should match firmware VPD information of form MM/DD/YYYY. Status: To show if the image is currently Active or Not-Active (backup image ) or Reboot-Active (requires reboot to become active image) and should match firmware VPD information. Type: Boot Rom, Application, Bundled, Diagnostic, Generic Firmware which should match firmware VPD information. A Boot Rom or Application or Diagnostic or Generic image should be used to designate that the image is a single file when updates are performed for the targeted type of firmware. A Bundled image type would be used to designate that the file contains multiple firmware update packages. This should be used if all images in the bundled image have the same version, Release date, . If a bundled image then the image types included in the bundle must be listed in the Other Info. Size: Size of image in KB (Kilobyte) rounded to next 1KB increment. (Note: the MM will read the size of the current image in the IOM and if the size exceeds the allowable space on the MMs internal file system then the MM will not allow the file to be uploaded. In addition if the current image file size is within the limits of the MMs file system but the MM determines the new update image on an external server would exceed the MMs internal file systems allocation then the MM will fail the update. In this case the user on the MM will have to directly transfer the image to the IOM and not use the MMs file system as a source for the update. Other-Info: Any additional information that the IOM wishes to provide. String example 1: (Bundled image that is expanded on IOM) Version: 20.2.2.9, Rel Date: 09/26/2011, Type: Bundled, Status: Active, Size:27500KB, Other Info: Contains Boot ROM and Application images. String example 2: (Application image that is the backup image) Version: 20.1.0.20, Rel Date: 02/27/2012, Type: Application, Status: Not- Active, Size:1200KB, Other Info: None String example 3: (Application image that will become the active image on next reboot) Version: 20.1.0.25, Rel Date: 05/20/2012, Type: Application, Status: Reboot- Active, Size:1200KB, Other Info: None The format of the Firmware Image Information is very important and must be strictly followed. It is intended for other applications to parse and make use of the information. The string is made up of many parts of text information. Each part has the format of the form Token: information_string\\n,. Each part consists of a token followed by token information. The end of each part is marked by a new line character, and a comma or a null character. The total length of the string cannot exceed 256 octets."
  },
  "fwImageFileLocation": {
    "name": "fwImageFileLocation",
    "oid": "1.3.6.1.4.1.2.6.215.3.1.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "mmServer": 0,
          "externalServerRequired": 1
        }
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "This object indicates whether the IOM implementation of firmware updates has requirements on the server that would prevent the MM acting as the server for the image file(s). If there are no unique requirements then mmIsServer will not be set and one of the other enumerations will need to be set. - If the IOM firmware update requires the update file to be un-compressed on the server before transfer to the IOM then externalServerRequired must be set by IOM. - If the IOM firmware update is larger than 100MB the externalServerRequired must be set by IOM. Additional reasons for restrictions may be added 1198 in the future."
  },
  "fwImageProtocols": {
    "name": "fwImageProtocols",
    "oid": "1.3.6.1.4.1.2.6.215.3.1.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 32
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "The CMM will use this command to read the current supported and enabled IOM file transfer protocols. The bit mask is treated as 32 bits in network byte order. 1310 That is the bit 0 will be the left most bit and bit 31 will be the right most bit. The bit pattern definition is defined as below. Supported Bit Mask (Bits 31:16): Bit(31): This bit is set to 1 if TFTP is supported. Bit(30): This bit is set to 1 if FTP is supported Bit(29): This bit is set to 1 if SFTP (via SSH) is supported Bit(28): This bit is set to 1 if HTTP is supported. Bit(27): This bit is set to 1 if HTTPs is supported Bit(26:16): Reserved: must be set to zeroes. Enabled Bit Mask (Bits 15:0): Bit(15): This bit is set to 1 if TFTP is enabled. Bit(14): This bit is set to 1 if FTP is enabled Bit(13): This bit is set to 1 if SFTP (via SSH) is enabled. Bit(12): This bit is set to 1 if HTTP is enabled. Bit(11): This bit is set to 1 if HTTPs is enabled Bit(10:0): Reserved: must be set to zeroes. ."
  },
  "firmwareCmd": {
    "name": "firmwareCmd",
    "oid": "1.3.6.1.4.1.2.6.215.3.1.2",
    "class": "objectidentity"
  },
  "firmwareImageCnt": {
    "name": "firmwareImageCnt",
    "oid": "1.3.6.1.4.1.2.6.215.3.1.2.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "The I/O Module must indicate the number of firmware images that can be updated. For example a value of 0 should be used if no images can be updated, a value of 1 should be used if 1 firmware image can be updated."
  },
  "firmwareImageNum": {
    "name": "firmwareImageNum",
    "oid": "1.3.6.1.4.1.2.6.215.3.1.2.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "This value indicates the image number that will be updated. For example, if the value is 2, that means firmware image 2 must be updated on the I/O Module. This value is write only by MM to the I/O Module."
  },
  "firmwareAction": {
    "name": "firmwareAction",
    "oid": "1.3.6.1.4.1.2.6.215.3.1.2.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unknown": 0,
          "get": 1,
          "rsvd2": 2,
          "rsvd3": 3,
          "rsvd4": 4,
          "rsvd5": 5,
          "rsvd6": 6,
          "rsvd7": 7,
          "rsvd8": 8,
          "rsvd9": 9,
          "rsvd10": 10
        }
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "The action the I/O Module must take for the firmware update operation.Upon receiving this command IOM must immediately execute the operation with all the necessary information which was preset prior to receiving this request"
  },
  "fwUpdateOperationStatus": {
    "name": "fwUpdateOperationStatus",
    "oid": "1.3.6.1.4.1.2.6.215.3.1.2.4",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noOperation": 0,
          "success": 101,
          "failure": 201
        }
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "The status of the firmware update operation 0: No operation pending. 1-100: the percentage of completion of the update operation. 101: success. 201: failed"
  },
  "firmwareServer": {
    "name": "firmwareServer",
    "oid": "1.3.6.1.4.1.2.6.215.3.1.2.5",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 128
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "This is a string of information about the final result of firmware update operation. It will further qualify in detail the information provided by the firmware update operation status and provide a text string indicating if the operation was successful or not successful. When the operation has completed successfully then the text string Success should be used. When the operation is not successful then a text string such as Failed to contact server or Image was not valid, would be appropriate to explain the reason for the failure."
  },
  "fwUpdateImageActivation": {
    "name": "fwUpdateImageActivation",
    "oid": "1.3.6.1.4.1.2.6.215.3.1.2.6",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "This value indicates which image index that the I/O Module must immediately activate."
  },
  "fwUpdateImageUri": {
    "name": "fwUpdateImageUri",
    "oid": "1.3.6.1.4.1.2.6.215.3.1.2.7",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 512
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "This is a URI string specifies the protocol and various location parameters to be used by the switch to perform a get operation using any of the supported protocols TFTP, FTP, sFTP. SFTP and FTP are mandatory and TFTP is recommended to support various user update tools. The IOM must report the protocols supported for the level of executing firmware in the IOM capabilities field of the VPD EEPROM. In this context the CMM (or remote host) acts as the server and the IOM acts as the client. The format of this string is as follows: <protocol>://<username>:<password>@<IP address or hostname:<port>/<path>/<filename> An example of a URI for the firmware packet file would be: ftp://USERID:PASSW0RD@192.168.0.2:30045/tmp/1308 application.img1 or ftp://USERID:PASSW0RD@[fe80::290:27ff:fe29:6019]:30045/tmp/application.img or sftp://USERID:PASSW0RD@192.168.0.2:30045/tmp/application.img or sftp://USERID:PASSW0RD@[fe80::290:27ff:fe29:6019]:30045/tmp/application.img where the FTP or sFTP protocol will be used for transferring the packet file, username is USERID, password is PASSW0RD, host IP address is either fe80::290:27ff:fe29:6019 or 192.168.0.2, port number is 30045, and /tmp is the full pathname to the packet file application.img. Some protocols do not need the username, password, and the port number, so the minimum requirement for a fully qualified address would be: <protocol>://<IP address or hostname>/<path</<filename> An example of a fully qualified address for the firmware packet file can be: tftp://192.168.0.2:2022/tmp/application.img. ote: (1) the MM will set the URI to the IOM. This URI may point to a server that is internal to the chassis with an IP address/hostname or if the server is external to the chassis then a public IP address/ hostname. Therefore the IP address of the server may or may not be the MMs IP address. In addition when a public IP address/hostname is used the filename in the URI may point to the top level directory that contains many files that make up the firmware image and the IOM is responsible to accept or reject this operation and indicate this by utilizing the status OID."
  },
  "fwUpdateImageSftpRsaKey": {
    "name": "fwUpdateImageSftpRsaKey",
    "oid": "1.3.6.1.4.1.2.6.215.3.1.2.8",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "deprecated",
    "description": "Contains the public 1024 bit RSA key used for a secure file transfer utilizing sFTP over a SSH connection.The CMM will issue a set (write) of this object with the CMMs current public key when a SFTP transfer is required for a firmware transfer will occur to the CMMs SFTP server. This will enable the IOMs SSH client to perform SSH public key authentication with the CMMs SSH server."
  },
  "systemFile": {
    "name": "systemFile",
    "oid": "1.3.6.1.4.1.2.6.215.4.1",
    "class": "objectidentity"
  },
  "systemFileInformationTable": {
    "name": "systemFileInformationTable",
    "oid": "1.3.6.1.4.1.2.6.215.4.1.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "Table of System File information."
  },
  "systemFileInformationEntry": {
    "name": "systemFileInformationEntry",
    "oid": "1.3.6.1.4.1.2.6.215.4.1.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "IBM-BCCUSTOM-MIB",
        "object": "systemFileIndex",
        "implied": 0
      }
    ],
    "status": "current",
    "description": "I/O Module System File entry"
  },
  "systemFileIndex": {
    "name": "systemFileIndex",
    "oid": "1.3.6.1.4.1.2.6.215.4.1.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "System File index."
  },
  "systemFileInformation": {
    "name": "systemFileInformation",
    "oid": "1.3.6.1.4.1.2.6.215.4.1.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 128
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Information about the system file(s) that are supported by the IOM, on which the CMM can perform a get or put operation from/to the IOM. Two types of files are mandatory for the IOM, service file and configuration file. This string must follow the format below - This string must follow the format below: File-Name: %s\\n, Size: %d KB\\n, Date: %s\\n, Category: %s\\n, Type: %s, Other-Info: %s\\n\\0 File-Name: The file name of the file i.e service.log, new_config.cfg Size: The size of the file in Kbyte. Date: The date of the last update to the file. It must be in this format: mm/dd/yyyy hh:mm:ss. The hour is from 0-23. The time is based on GMT. Category: The system file must be one of the categories below: Service-Data, Saved-Configuration, Active-Configuration, New-Configuration, Other Type: It is either binary or text. Other-Info: Any additional information that the IOM wishes to provide about the file. String example 1:File Name: service.log, Size: 98 KB Date: 09/26/2008 14:35:21, Category: Service- Data, Type:text, Other Info: Service Data file. String example 2: File Name: config.cfg, Size: 6 KB Date: 09/26/2011 16:35:32, Category: Active-Configuration, Type: text, Other Info: Active Configuration file. The format of the System File Information is very important and must be strictly followed. It is intended for other applications to parse and make use of the information. The string is made up of many parts of text information. Each part has the format of the form Token: information_string\\n,. Each part consists of a token followed by token information. The end of each part is marked by a new line character, and a comma or a null character.The total length of the string cannot exceed 256 octets. Note: All IOMs must minimally support the Service-Data file type."
  },
  "systemFileInformationProtocols": {
    "name": "systemFileInformationProtocols",
    "oid": "1.3.6.1.4.1.2.6.215.4.1.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 32
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "The CMM will use this command to read the current supported and enabled IOM file transfer protocols. The bit mask is treated as 32 bits in network byte order. That is the bit 0 will be the left most bit and bit 31 will be the right most bit. The bit pattern definition is defined as below. Supported Bit Mask (Bits 31:16): Bit(31): This bit is set to 1 if TFTP is supported. Bit(30): This bit is set to 1 if FTP is supported Bit(29): This bit is set to 1 if SFTP (via SSH) is supported Bit(28): This bit is set to 1 if HTTP is supported. Bit(27): This bit is set to 1 if HTTPs is supported Bit(26:16): Reserved: must be set to zeroes. Enabled Bit Mask (Bits 15:0): Bit(15): This bit is set to 1 if TFTP is enabled. Bit(14): This bit is set to 1 if FTP is enabled Bit(13): This bit is set to 1 if SFTP (via SSH) is enabled. Bit(12): This bit is set to 1 if HTTP is enabled. Bit(11): This bit is set to 1 if HTTPs is enabled Bit(10:0): Reserved: must be set to zeroes. ."
  },
  "systemFileCmd": {
    "name": "systemFileCmd",
    "oid": "1.3.6.1.4.1.2.6.215.4.2",
    "class": "objectidentity"
  },
  "systemFileCmdCnt": {
    "name": "systemFileCmdCnt",
    "oid": "1.3.6.1.4.1.2.6.215.4.2.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "The I/O Module must indicate the number of system files that it has available to user. For an example a value of 0 should be used if it has no system file, a value of 1 should be used if it has 1 system file."
  },
  "systemFileCmdFilename": {
    "name": "systemFileCmdFilename",
    "oid": "1.3.6.1.4.1.2.6.215.4.2.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 128
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "deprecated",
    "description": "The system file name and category of the file set by AMM that the I/O Module must use to perform an operation on the file. The string format of this command is defined: 1366 File-Name: %s\\n, Category: %s\\n\\0 File-Name: The file name of the file i.e service.log, new_config.cfg Category: The system file must be one of the categories defined in the MIB Object systemFileInformation. The format of this string is very important and must be strictly followed. The string is made up of many parts of text information. Each part has the format of the form Token: information_string\\n,. Each part consists of a token followed by token information. The end of each part is marked by a new line character, and a comma or a null character.1433 The total length of the string cannot exceed 256 octets."
  },
  "systemFileCmdMaxSize": {
    "name": "systemFileCmdMaxSize",
    "oid": "1.3.6.1.4.1.2.6.215.4.2.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "The AMM will set the maximum file size allowable for the IOM system file when IOM upload its system file to a remote server. IOM must not exceed this file size limit. The file size will be in KB unit. The value of zero is to denote no limitation. If the actual file size of the system file on IOM is greater than the file size limitation, AMM will set other filter such as Severity, or timestamp to help reduce the file size before IOM upload the file to remote server. If the file size still exceeds the limitation, IOM must truncate the file to only include the most recent activity."
  },
  "systemFileCmdUri": {
    "name": "systemFileCmdUri",
    "oid": "1.3.6.1.4.1.2.6.215.4.2.4",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "This is a URI string that specifies the location and various parameters to be used by the switch to perform a get or put operation using any of the supported protocols TFTP, FTP, sFTP, SFTP and FTP are mandatory and TFTP is recommended to support various user update tools. The IOM must report the protocols supported for the level of executing firmware in the IOM capabilities field of the VPD EEPROM. In this context the CMM (or remote host) acts as the server and the IOM acts as the client. The format of this string is as follows: <protocol>://<username>:<password>@<IP address or hostname>:<port>/<path>/<filename> An example of a fully qualified address for the firmware packet file would be: ftp://USERID:PASSW0RD@192.168.0.2:30045/tmp/service.log or ftp://USERID:PASSW0RD@[fe80::290:27ff:fe29:6019]:30045/tmp/service.log or sftp://USERID:PASSW0RD@192.168.0.2:30045/tmp/service.log or sftp://USERID:PASSW0RD@[fe80::290:27ff:fe29:6019]:30045/tmp/service.log where the FTP or sFTP protocol will be used for transferring the packet file, username is USERID, password is PASSW0RD, host IP address is fe80::290:27ff:fe29:6019 or 192.168.0.2, port number is 30045, and /tmp is the full pathname to the packet file service.log. Some protocols do not need the username, password, and the port number, so the minimum requirement for a fully qualified address would be: <protocol>://<IP address or hostname>/<path</<filename> An example of a fully qualified address for the firmware packet file can be: tftp://192.168.0.2:2022/1527 tmp/service.log"
  },
  "systemFileCmdSftpRsaKey": {
    "name": "systemFileCmdSftpRsaKey",
    "oid": "1.3.6.1.4.1.2.6.215.4.2.5",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "deprecated",
    "description": "Contains the public 1024 bit RSA key used for a secure a file transfer utilizing sFTP over a SSH connection. The CMM will issue a set (write) of this object with the CMMs current public key when a SFTP transfer is required for a firmware transfer will occur to the CMMs SFTP server. This will enable the IOMs SSH client to perform SSH public key authentication with the CMMs SSH server."
  },
  "systemFileCmdExecuteOp": {
    "name": "systemFileCmdExecuteOp",
    "oid": "1.3.6.1.4.1.2.6.215.4.2.6",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unknown": 0,
          "ssget": 1,
          "cfgget": 2,
          "cfgput": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "The action the I/O Module must take on the system file MAX-ACCESS operation. Upon receiving this command IOM must immediately execute the operation with all the necessary information which was preset prior to receiving this request."
  },
  "systemFileOperationStatus": {
    "name": "systemFileOperationStatus",
    "oid": "1.3.6.1.4.1.2.6.215.4.2.7",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noOperation": 0,
          "inprogress": 50,
          "success": 101,
          "failed": 201
        }
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "The status of the system file operation: 0: No operation pending. 1-100: the percentage of completion of the operation. 101: success. 201: failed"
  },
  "systemFileOpStatusString": {
    "name": "systemFileOpStatusString",
    "oid": "1.3.6.1.4.1.2.6.215.4.2.8",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 128
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "This is a string of information about the final result of system file operation. It will further qualify in detail the information provided by the system file operation status and provide a text string indicating if the operation was successful or not successful. When the operation has completed successfully then the text string Success should be used. When the operation is not successful then a text string such as Failed to contact server or File was not valid, would be appropriate to explain the reason for the failure."
  },
  "systemFileActivation": {
    "name": "systemFileActivation",
    "oid": "1.3.6.1.4.1.2.6.215.4.2.9",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noOp": 0,
          "activate": 1
        }
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "This object is used only for configuration files. After the transfer of the configuration file is completed to the IOM the CMM can use this object to immediately activate the configuration file at the IOM."
  },
  "ntpConfig": {
    "name": "ntpConfig",
    "oid": "1.3.6.1.4.1.2.6.215.5.1",
    "class": "objectidentity"
  },
  "ntpEnable": {
    "name": "ntpEnable",
    "oid": "1.3.6.1.4.1.2.6.215.5.1.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "disabled": 0,
          "enabled": 1
        }
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "Disable/Enable the NTP client. When set to enabled the MM previously set the following additional NTP client objects The NTP client must then be configured to values specified in the following objects and must update immediately the IOMs clock from the configured NTP server address. Note: certain IOM implementations1 may have their NTP client always enabled AND does not support the ability to disable or enable the NTP client from any external user interface. - If this is true, then a get of this object will always return enabled and a set to enable will return no_error. If a set of this object is performed to disabled then the IOM will return a gen_error. - If this is not true then a get and set to enable or disable must return no_error."
  },
  "ntpSrvIpv6Address": {
    "name": "ntpSrvIpv6Address",
    "oid": "1.3.6.1.4.1.2.6.215.5.1.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "NTP server's IPv6 address. Note: This address represents the address that will be used for NTP requests and responses that utilize the MM internal port. A value of all zeroes indicates no address is configured. Note the MM will set an IPv6 or IPv4 address. If IPv6 address is set then the IPv4 NTP address will be zero. If IPv4 address is set then the IPv4 NTP address will be zero."
  },
  "ntpSrvIpv4Address": {
    "name": "ntpSrvIpv4Address",
    "oid": "1.3.6.1.4.1.2.6.215.5.1.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "IpAddress",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "NTP server's IPv4 address. Note: This address represents the address that will be used for NTP requests and responses that utilize the MM internal port. A value of all zeroes indicates no address is configured. Note the MM will set an IPv6 or IPv4 address. If IPv6 address is set then the IPv4 NTP address will be zero. If IPv4 address is set then the IPv4 NTP address will be zero."
  },
  "ntpUpdateFrequency": {
    "name": "ntpUpdateFrequency",
    "oid": "1.3.6.1.4.1.2.6.215.5.1.4",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "The frequency in minutes that the NTP client service will synchronize the local clock with the NTP server. The value range is 1 to 44640 minutes. Note: certain IOM implementations may have their NTP client configured to always perform time synchronization at a specific frequency AND does not support the ability to change this frequency from any external user interface. - If this is true, then a get of this object will always return the frequency rounded to a 1 minute interval. If a set is issued for this object then IOM will return a gen_error. - If this is true, then a get of this object will always return the frequency rounded to a 1 minute interval. If a set is issued for this object then IOM will return a gen_error. If this is not true then a get and set must return no_error "
  },
  "ntpv3AuthConfig": {
    "name": "ntpv3AuthConfig",
    "oid": "1.3.6.1.4.1.2.6.215.5.1.5",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 128
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "The NTP v3 authentication entry to be used for time sync with a secure NTP server. The format of an authentication entry is <key index>::<key type>::<key>. The <key index> must be an INTEGER between 1 and 65534. <key type> must be M which signify MD5 encryption. The <key> is the actual value of the authentication key (symmetric) as configured on the NTP server. A SET operation can set the <key>. A GET operation returns back data in the format: <key index>::<key type> and does not return the encryption actual key value."
  },
  "ntpv3AuthEnable": {
    "name": "ntpv3AuthEnable",
    "oid": "1.3.6.1.4.1.2.6.215.5.1.6",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "disabled": 0,
          "enabled": 1
        }
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "Enables/Disables NTPv3 authentication"
  },
  "ehcmSnmpv3Cfg": {
    "name": "ehcmSnmpv3Cfg",
    "oid": "1.3.6.1.4.1.2.6.215.5.2",
    "class": "objectidentity"
  },
  "ehcmSnmpv3IPv6TrapAddress": {
    "name": "ehcmSnmpv3IPv6TrapAddress",
    "oid": "1.3.6.1.4.1.2.6.215.5.2.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "Trap destination IPv6 address. Note: This address represents the address that will be used for by IBM director for receiving SNMPv3 traps for the EHCM defined SNMPv3 user. This address is in addition to the MM IP address and does not override or replace that trap address. This value is normally set to zero and will only be set when director request the MM to set to a valid IP address. A value of all zeroes indicates no address is configured. Note the MM will set an IPv6 or IPv4 address. If IPv6 address is set then the IPv4 trap address will be zero. If IPv4 address is set then the IPv6 trap address will be zero."
  },
  "ehcmSnmpv3IPv4TrapAddress": {
    "name": "ehcmSnmpv3IPv4TrapAddress",
    "oid": "1.3.6.1.4.1.2.6.215.5.2.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "IpAddress",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "Trap destination IPv4 address. Note: This address represents the address that will be used for by IBM director for receiving SNMPv3 traps for the EHCM defined SNMPv3 user. This address is in addition to the MMs IP address and does not override or replace that trap address. This value is normally set to zero and will only be set when director request the MM to set to a valid IP address. A value of all zeroes indicates no address is configured. Note: the MM will set an IPv6 or IPv4 address. If IPv6 address is set then the IPv4 trap address will be zero. If IPv4 address is set then the IPv6 trap address will be zero."
  },
  "licenseKeyInformationTable": {
    "name": "licenseKeyInformationTable",
    "oid": "1.3.6.1.4.1.2.6.215.6.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "Table of License key information."
  },
  "licenseKeyInformationEntry": {
    "name": "licenseKeyInformationEntry",
    "oid": "1.3.6.1.4.1.2.6.215.6.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "IBM-BCCUSTOM-MIB",
        "object": "licenseKeyIndex",
        "implied": 0
      }
    ],
    "status": "current",
    "description": "License Key entry"
  },
  "licenseKeyIndex": {
    "name": "licenseKeyIndex",
    "oid": "1.3.6.1.4.1.2.6.215.6.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "License Key index."
  },
  "licenseKeyDescStringInformation": {
    "name": "licenseKeyDescStringInformation",
    "oid": "1.3.6.1.4.1.2.6.215.6.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Information about the system file - This string must follow the format below: Description: %s\\n, Date-Time: %s\\n, License-ID: %s\\n, Other-Info: %s\\n\\0 Description: Description of the license key feature, for example NetCorp 12 Port License Key Upgrade for Fibre Switch. Date-Time: The date and time of the license key was installed in this format: mm/dd/yyyy hh:mm:ss. The hour is from 0-23. The time is based on GMT. License-ID: License ID, for example 222345K. Other-Info: Any additional information that the IOM wishes to provide about the key. String example 1:File Description: NetCorp 12 Port License Key Upgrade for Fibre Switch, Date-Time: 09/26/2008 14:35:21, License-ID: 222345K, Other Info: Test information. The format of the License Key Information is very important and must be strictly followed. It is intended for other applications to parse and make use of the information. The string is made up of many parts of text information. Each part has the format of the form Token: information_string\\n,. Each part consists of a token followed by token information. The end of each part is marked by a new line character, and a comma or a null character. The total length of the string cannot exceed 256 octets."
  },
  "licenseKeyCurrentState": {
    "name": "licenseKeyCurrentState",
    "oid": "1.3.6.1.4.1.2.6.215.6.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unknown": 0,
          "valid": 1,
          "notValid": 2,
          "expired": 3,
          "usageExceeded": 4
        }
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Provides information on the current state of the license"
  },
  "meta": {
    "comments": [
      "ASN.1 source file://MIBS/asn1/IBM-BCCUSTOM-MIB.mib",
      "Produced by pysmi-0.3.4 at Tue Apr 20 19:29:45 2021",
      "On host samy-ThinkPad-T495s platform Linux version 5.8.0-50-generic by user root",
      "Using Python version 3.8.5 (default, Jan 27 2021, 15:41:15) "
    ],
    "module": "IBM-BCCUSTOM-MIB"
  }
}