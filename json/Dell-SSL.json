{
  "imports": {
    "class": "imports",
    "Dell-MIB": [
      "rnd"
    ],
    "SNMPv2-CONF": [
      "MODULE-COMPLIANCE",
      "NOTIFICATION-GROUP"
    ],
    "SNMPv2-SMI": [
      "Gauge32",
      "OBJECT-IDENTITY",
      "OBJECT-TYPE",
      "Integer32",
      "Unsigned32",
      "IpAddress",
      "NOTIFICATION-TYPE",
      "iso",
      "MibIdentifier",
      "Counter32",
      "Counter64",
      "Bits",
      "MODULE-IDENTITY",
      "TimeTicks"
    ],
    "SNMPv2-TC": [
      "TruthValue",
      "DisplayString",
      "TEXTUAL-CONVENTION",
      "RowStatus"
    ]
  },
  "rlSsl": {
    "name": "rlSsl",
    "oid": "1.3.6.1.4.1.89.100",
    "class": "moduleidentity",
    "revisions": [
      {
        "revision": "2003-09-21 00:00",
        "description": "Added this MODULE-IDENTITY clause."
      }
    ],
    "lastupdated": "200309210000Z",
    "organization": "Dell",
    "contactinfo": "www.dell.com",
    "description": "The private MIB module definition for SSL."
  },
  "rlSslCertificateGenerationTable": {
    "name": "rlSslCertificateGenerationTable",
    "oid": "1.3.6.1.4.1.89.100.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "This table is used for : 1. generating keys and self signed certificate - saved in flash and RAM (not in configuration file) 2. generating certificate requests - saved in RAM, can be read by rlSslCertificateExportTable 3. generating self signed certificate - saved in flash and RAM (not in configuraion file) By setting rlSslCertificateGenerationAction to the appropriate value this action takes place. The other fields of this table are used for each of this actions"
  },
  "rlSslCertificateGenerationEntry": {
    "name": "rlSslCertificateGenerationEntry",
    "oid": "1.3.6.1.4.1.89.100.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "Dell-SSL",
        "object": "rlSslCertificateGenerationIndex",
        "implied": 0
      }
    ],
    "status": "current",
    "description": " The row definition for this table."
  },
  "rlSslCertificateGenerationIndex": {
    "name": "rlSslCertificateGenerationIndex",
    "oid": "1.3.6.1.4.1.89.100.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "This index is always set to 1 no matter for which certificate or certificate request the action refers to."
  },
  "rlSslCertificateGenerationId": {
    "name": "rlSslCertificateGenerationId",
    "oid": "1.3.6.1.4.1.89.100.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "The device can hold a number of keys/certificates/certificate requests. These certificates are always numbered from 1 to N (maximum number of certificates in device). This field decides to which keys/certificates/certificate requests the action refers."
  },
  "rlSslCertificateGenerationCountryName": {
    "name": "rlSslCertificateGenerationCountryName",
    "oid": "1.3.6.1.4.1.89.100.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 2,
            "max": 2
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "Value of country name field that will appear when a new certificate request or self signed certificate is generated."
  },
  "rlSslCertificateGenerationStateOrProvinceName": {
    "name": "rlSslCertificateGenerationStateOrProvinceName",
    "oid": "1.3.6.1.4.1.89.100.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "Value of state or province name field that will appear when a new certificate or self signed certificate is generated."
  },
  "rlSslCertificateGenerationLocalityName": {
    "name": "rlSslCertificateGenerationLocalityName",
    "oid": "1.3.6.1.4.1.89.100.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "Value of locality field that will appear when a new certificate or self signed certificate is generated."
  },
  "rlSslCertificateGenerationOrganizationName": {
    "name": "rlSslCertificateGenerationOrganizationName",
    "oid": "1.3.6.1.4.1.89.100.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "Value of organization field that will appear when a new certificate or self signed certificate is generated."
  },
  "rlSslCertificateGenerationOrganizationUnitName": {
    "name": "rlSslCertificateGenerationOrganizationUnitName",
    "oid": "1.3.6.1.4.1.89.100.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "Value of organization field that will appear when a new certificate or self signed certificate is generated."
  },
  "rlSslCertificateGenerationCommonName": {
    "name": "rlSslCertificateGenerationCommonName",
    "oid": "1.3.6.1.4.1.89.100.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "Value of common name field that will appear when a new certificate or self signed certificate is generated."
  },
  "rlSslCertificateGenerationValidDays": {
    "name": "rlSslCertificateGenerationValidDays",
    "oid": "1.3.6.1.4.1.89.100.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "When generating self signed certificate this field sets the valid fields. 'Valid from' is current GMT and 'valid to' current GMT + the value of this field."
  },
  "rlSslCertificateGenerationRsaKeyLength": {
    "name": "rlSslCertificateGenerationRsaKeyLength",
    "oid": "1.3.6.1.4.1.89.100.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 512,
            "max": 2048
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "Setting the RSA key size that will be created when a new key is generated - generateRsaKeyAndSelfSignedCertificate"
  },
  "rlSslCertificateGenerationPassphrase": {
    "name": "rlSslCertificateGenerationPassphrase",
    "oid": "1.3.6.1.4.1.89.100.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "When a RSA key is generated (generateRsaKeyAndSelfSignedCertificate) this passphrase is saved in flash and when the time comes and the certificate and the key are exported in PKCS12 format this passphrase is used to encrypt it. If the passphrase is empty the key and certificate can not be exported. There is no method of obtaining this passphrase once a key was generated."
  },
  "rlSslCertificateGenerationAction": {
    "name": "rlSslCertificateGenerationAction",
    "oid": "1.3.6.1.4.1.89.100.1.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "generateRsaKeyAndSelfSignedCertificate": 1,
          "generateSelfSignedCertificate": 2,
          "generatePkcs12": 3,
          "generateCertificateRequest": 4
        }
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "Setting to a regenerateCertificate causes a new certificate to be generated and to be used for all new sessions."
  },
  "rlSslCertificateExportTable": {
    "name": "rlSslCertificateExportTable",
    "oid": "1.3.6.1.4.1.89.100.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "This table is used for viewing saved data from RAM and flash."
  },
  "rlSslCertificateExportEntry": {
    "name": "rlSslCertificateExportEntry",
    "oid": "1.3.6.1.4.1.89.100.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "Dell-SSL",
        "object": "rlSslCertificateExportId",
        "implied": 0
      },
      {
        "module": "Dell-SSL",
        "object": "rlSslCertificateExportType",
        "implied": 0
      },
      {
        "module": "Dell-SSL",
        "object": "rlSslCertificateExportFragmentId",
        "implied": 0
      }
    ],
    "status": "current",
    "description": " The row definition for this table."
  },
  "rlSslCertificateExportId": {
    "name": "rlSslCertificateExportId",
    "oid": "1.3.6.1.4.1.89.100.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Identifies the index of this certficate / certificate request the table holds."
  },
  "rlSslCertificateExportType": {
    "name": "rlSslCertificateExportType",
    "oid": "1.3.6.1.4.1.89.100.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "certificateRequestPemFormat": 1,
          "certificatePemFormat": 2,
          "certificateOpenSslFormat": 3,
          "certificateAndKeyPkcs12": 4
        }
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Identifies the type of data the current entry shows."
  },
  "rlSslCertificateExportFragmentId": {
    "name": "rlSslCertificateExportFragmentId",
    "oid": "1.3.6.1.4.1.89.100.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Identifies the index of this fragment in the certificate request."
  },
  "rlSslCertificateExportFragmentText": {
    "name": "rlSslCertificateExportFragmentText",
    "oid": "1.3.6.1.4.1.89.100.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "A part of the readable text entry for the certificate request."
  },
  "rlSslCertificateSave": {
    "name": "rlSslCertificateSave",
    "oid": "1.3.6.1.4.1.89.100.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "Saves data from rlSslCertificateImportTable to RAM and CDB. When an external certificate should be copied to the device first we copy it to rlSslCertificateImportTable and then this scalar is set to the certificate id that we want to save - 1. All entries in rlSslCertificateImportTable that have this id and their format is equal to the current value of rlSslCertificateSaveFormat are concatenated. 2. If the imported certificate format is .. - section 1 result is validated against the key with the same index. If validation fails for any reason - the certificate is not saved and the setting this scalar fails.] This scalar is for certificate 1 only... for certificate 2 use rlSslCertificateSave2 "
  },
  "rlSslCertificateSaveFormat": {
    "name": "rlSslCertificateSaveFormat",
    "oid": "1.3.6.1.4.1.89.100.4",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "x509": 1,
          "pkcs12": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "."
  },
  "rlSslImportedPKCS12CertificatePassphrase": {
    "name": "rlSslImportedPKCS12CertificatePassphrase",
    "oid": "1.3.6.1.4.1.89.100.5",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 8,
            "max": 96
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "."
  },
  "rlSslCertificateImportTable": {
    "name": "rlSslCertificateImportTable",
    "oid": "1.3.6.1.4.1.89.100.6",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "This table is used for copying an external certificate to the device - see rlSslCertificateSave"
  },
  "rlSslCertificateImportEntry": {
    "name": "rlSslCertificateImportEntry",
    "oid": "1.3.6.1.4.1.89.100.6.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "Dell-SSL",
        "object": "rlSslCertificateImportId",
        "implied": 0
      },
      {
        "module": "Dell-SSL",
        "object": "rlSslCertificateImportFormat",
        "implied": 0
      },
      {
        "module": "Dell-SSL",
        "object": "rlSslCertificateImportFragmentId",
        "implied": 0
      }
    ],
    "status": "current",
    "description": " The row definition for this table."
  },
  "rlSslCertificateImportId": {
    "name": "rlSslCertificateImportId",
    "oid": "1.3.6.1.4.1.89.100.6.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "The certificate ID."
  },
  "rlSslCertificateImportFormat": {
    "name": "rlSslCertificateImportFormat",
    "oid": "1.3.6.1.4.1.89.100.6.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "x509": 1,
          "pkcs12": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "."
  },
  "rlSslCertificateImportFragmentId": {
    "name": "rlSslCertificateImportFragmentId",
    "oid": "1.3.6.1.4.1.89.100.6.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "Identifies the index of this fragment in the certificate."
  },
  "rlSslCertificateImportFragmentText": {
    "name": "rlSslCertificateImportFragmentText",
    "oid": "1.3.6.1.4.1.89.100.6.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "A part of the readable text entry for the certificate."
  },
  "rlSslCertificateImportFragmentStatus": {
    "name": "rlSslCertificateImportFragmentStatus",
    "oid": "1.3.6.1.4.1.89.100.6.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "RowStatus",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "current"
  },
  "rlSslSSLv2Enable": {
    "name": "rlSslSSLv2Enable",
    "oid": "1.3.6.1.4.1.89.100.7",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enabled": 1,
          "disabled": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "if enabled then SSLv2 will be supported , if disabled SSLv2 won't be supported. only SSLV3 and TSL1. Note: disabling SSLv2 is more secure."
  },
  "RlSslPublicKeyAlgorithm": {
    "name": "RlSslPublicKeyAlgorithm",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "rsa": 1,
          "dsa": 2
        }
      }
    },
    "status": "current",
    "description": "This textual convention describes the various possible public key algorithms. The key algorithm is used to select the PK to be generated and is also used when viewing the public keys."
  },
  "rlSslImportExportSelfKeyTable": {
    "name": "rlSslImportExportSelfKeyTable",
    "oid": "1.3.6.1.4.1.89.100.8",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "This table can be used for 2 purposes: 1) Importing public/private key pair to serve as the device key when acting as SSL server. This is done by setting entries to this table, according to the specified format. When the last entry (footer) is set, the whole key pair is checked and if valid, stored in CDB. 2) Exporting the device SSL server public/private key. This can be done by performing GetNext operations on this table."
  },
  "rlSslImportExportSelfKeyEntry": {
    "name": "rlSslImportExportSelfKeyEntry",
    "oid": "1.3.6.1.4.1.89.100.8.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "Dell-SSL",
        "object": "rlSslImportExportSelfKeyFormat",
        "implied": 0
      },
      {
        "module": "Dell-SSL",
        "object": "rlSslImportExportSelfKeyIndex",
        "implied": 0
      },
      {
        "module": "Dell-SSL",
        "object": "rlSslImportExportSelfKeyFragmentId",
        "implied": 0
      }
    ],
    "status": "current",
    "description": " The row definition for this table."
  },
  "rlSslImportExportSelfKeyFormat": {
    "name": "rlSslImportExportSelfKeyFormat",
    "oid": "1.3.6.1.4.1.89.100.8.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "uuencoded-format": 1
        }
      }
    },
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "Specifies the format of public/key pair. The following formats are supported for import/export: 1) uuencoded_format - in this format both private and public key are in uu-encoded format, and are seperated from one another by header and footer. An example of the concateneation of all fragments in this format is: -----BEGIN RSA PRIVATE KEY----- tDaNkZZoCxXfkLLsLDlZ6T9H8U4Gz637eRV7BYBpapkidAxY1UG0/qgfKLPkbId4wzht6ArV9bE4fMtX wSMOxL3q31pOmUdVhjbWYcgZQBDy1DjFSbuIEdP85c96B9bBE2nPv90mSvb/6j8R2NItT/KJeiYMtLtI N3m6/zESKJGIrX0jP1RFDjVZSS5chSAFgB0egsLZEyOQn7jAqpX/x/easD2J6F/OjPXlJ9Hff2tMb3NU QYyBoWH2J9IxhWB6Vo66R9Y04JGR18uL/rV2sMCtpg5ppkVTEpNTp9qE1yXocR2NmzUfNFap+GJ4IHj8 CzkVfmJM/kEWaJsYgHbAgLyRg4QVyelfobv1B71aQ+u1z9KGu/QajkWdR04OQfsGOL1CvU2LGYDcRjfH jv+jl/UkDRRjoD9kt2WvouT+OL6esvKl0OJBqWbGNXg9TWv/VLtJIwgUno+MLaJuOM4Fh44+wpnqUXwQ TFtBFc8pzt5BoOwbv9gXpicTkq4/+GhwXWXxSVFebKhnHAvKSLT+Ba7K7ZeR8EIIxbXdDNFOiS45R2KI jxxXLXK44u6KGl5MygCKXUOFlJ+Zhgrq6ZH17z/RVJQ2CWqb5Ekn9GY3kH9QZ3mb4MDPfriWi2lHGXHY JmJd4SLQhpBdnOS5tu84QmyU3dNbAdzghDsR+dEY/6g7Cn0kcVkeHNZ0H+mCZik5f6XBD8eplkk43bdR FrkwTeAjwurGcKwdiKkR4DlfSq3DKssVBucTqUpqsKqPXLwTIL44rWKhEPXgGPB2XDG0VLvIRKkAgEGI LNTwOm091Ro= -----END RSA PRIVATE KEY----- -----BEGIN RSA PUBLIC KEY----- MIGHAoGBAOeIC9gRg3YaEGGMp3C00qNwLINAEDZV/J4BWM5WnWwCWZyHXDs2XiEmFu0ZONAD4gcT2f2f NNfCBPye39VVuOkKQuSV0MLLX5800LZ4y1BNcPzPZHpnGaCzl7iAjhfj9MolzAh5VRjeiYt0t1um4dm+ q9A4BtfpJqDYxCW9uxd/AgEj -----END RSA PUBLIC KEY----- "
  },
  "rlSslImportExportSelfKeyIndex": {
    "name": "rlSslImportExportSelfKeyIndex",
    "oid": "1.3.6.1.4.1.89.100.8.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "Identifies the SSL server key index (there can be more than one key)."
  },
  "rlSslImportExportSelfKeyFragmentId": {
    "name": "rlSslImportExportSelfKeyFragmentId",
    "oid": "1.3.6.1.4.1.89.100.8.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "Identifies the index of this fragment in the key pair input/output."
  },
  "rlSslImportExportSelfKeyAlgorithm": {
    "name": "rlSslImportExportSelfKeyAlgorithm",
    "oid": "1.3.6.1.4.1.89.100.8.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "RlSslPublicKeyAlgorithm",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "Identifies the type of key pair."
  },
  "rlSslImportExportSelfKeyFragmentText": {
    "name": "rlSslImportExportSelfKeyFragmentText",
    "oid": "1.3.6.1.4.1.89.100.8.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "A part of the readable text entry for the key pair input/output."
  },
  "rlSslCertificateSave2": {
    "name": "rlSslCertificateSave2",
    "oid": "1.3.6.1.4.1.89.100.9",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "Saves data from rlSslCertificateImportTable to RAM and CDB. When an external certificate should be copied to the device first we copy it to rlSslCertificateImportTable and then this scalar is set to the certificate id that we want to save - 1. All entries in rlSslCertificateImportTable that have this id and their format is equal to the current value of rlSslCertificateSaveFormat are concatenated. 2. If the imported certificate format is .. - section 1 result is validated against the key with the same index. If validation fails for any reason - the certificate is not saved and the setting this scalar fails.] This scalar is for certificate 2 only... for certificate 1 use rlSslCertificateSave "
  },
  "rlSslisCertificate1Default": {
    "name": "rlSslisCertificate1Default",
    "oid": "1.3.6.1.4.1.89.100.10",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "TruthValue",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "if set to true then this is the default key , will be configured when auto generation is done , will set to try , all other cases will be set to false. "
  },
  "rlSslisCertificate2Default": {
    "name": "rlSslisCertificate2Default",
    "oid": "1.3.6.1.4.1.89.100.11",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "TruthValue",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "current",
    "description": "if set to true then this is the default key , will be configured when auto generation is done , will set to try , all other cases will be set to false. "
  },
  "meta": {
    "comments": [
      "ASN.1 source file://MIBS/asn1/Dell-SSL.mib",
      "Produced by pysmi-0.3.4 at Tue Apr 20 15:44:13 2021",
      "On host samy-ThinkPad-T495s platform Linux version 5.8.0-50-generic by user root",
      "Using Python version 3.8.5 (default, Jan 27 2021, 15:41:15) "
    ],
    "module": "Dell-SSL"
  }
}