{
  "imports": {
    "class": "imports",
    "SNMPv2-CONF": [
      "MODULE-COMPLIANCE",
      "NOTIFICATION-GROUP"
    ],
    "SNMPv2-SMI": [
      "OBJECT-TYPE",
      "Counter32",
      "OBJECT-IDENTITY",
      "TRAP-TYPE",
      "Integer32",
      "MODULE-IDENTITY",
      "NOTIFICATION-TYPE",
      "IpAddress",
      "Bits",
      "TimeTicks",
      "Unsigned32",
      "iso",
      "enterprises",
      "Counter64",
      "mgmt",
      "MibIdentifier",
      "Gauge32"
    ],
    "SNMPv2-TC": [
      "TEXTUAL-CONVENTION",
      "PhysAddress",
      "DisplayString"
    ]
  },
  "mib_2": {
    "name": "mib_2",
    "oid": "1.3.6.1.2.1",
    "class": "objectidentity"
  },
  "DisplayString": {
    "name": "DisplayString",
    "class": "type",
    "type": {
      "type": "OCTET STRING",
      "class": "type"
    }
  },
  "PhysAddress": {
    "name": "PhysAddress",
    "class": "type",
    "type": {
      "type": "OCTET STRING",
      "class": "type"
    }
  },
  "system": {
    "name": "system",
    "oid": "1.3.6.1.2.1.1",
    "class": "objectidentity"
  },
  "interfaces": {
    "name": "interfaces",
    "oid": "1.3.6.1.2.1.2",
    "class": "objectidentity"
  },
  "at": {
    "name": "at",
    "oid": "1.3.6.1.2.1.3",
    "class": "objectidentity"
  },
  "ip": {
    "name": "ip",
    "oid": "1.3.6.1.2.1.4",
    "class": "objectidentity"
  },
  "icmp": {
    "name": "icmp",
    "oid": "1.3.6.1.2.1.5",
    "class": "objectidentity"
  },
  "tcp": {
    "name": "tcp",
    "oid": "1.3.6.1.2.1.6",
    "class": "objectidentity"
  },
  "udp": {
    "name": "udp",
    "oid": "1.3.6.1.2.1.7",
    "class": "objectidentity"
  },
  "egp": {
    "name": "egp",
    "oid": "1.3.6.1.2.1.8",
    "class": "objectidentity"
  },
  "transmission": {
    "name": "transmission",
    "oid": "1.3.6.1.2.1.10",
    "class": "objectidentity"
  },
  "snmp": {
    "name": "snmp",
    "oid": "1.3.6.1.2.1.11",
    "class": "objectidentity"
  },
  "dot1dBridge": {
    "name": "dot1dBridge",
    "oid": "1.3.6.1.2.1.17",
    "class": "objectidentity"
  },
  "a3Com": {
    "name": "a3Com",
    "oid": "1.3.6.1.4.1.43",
    "class": "objectidentity"
  },
  "products": {
    "name": "products",
    "oid": "1.3.6.1.4.1.43.1",
    "class": "objectidentity"
  },
  "terminalServer": {
    "name": "terminalServer",
    "oid": "1.3.6.1.4.1.43.1.1",
    "class": "objectidentity"
  },
  "dedicatedBridgeServer": {
    "name": "dedicatedBridgeServer",
    "oid": "1.3.6.1.4.1.43.1.2",
    "class": "objectidentity"
  },
  "dedicatedRouteServer": {
    "name": "dedicatedRouteServer",
    "oid": "1.3.6.1.4.1.43.1.3",
    "class": "objectidentity"
  },
  "brouter": {
    "name": "brouter",
    "oid": "1.3.6.1.4.1.43.1.4",
    "class": "objectidentity"
  },
  "genericMSWorkstation": {
    "name": "genericMSWorkstation",
    "oid": "1.3.6.1.4.1.43.1.5",
    "class": "objectidentity"
  },
  "genericMSServer": {
    "name": "genericMSServer",
    "oid": "1.3.6.1.4.1.43.1.6",
    "class": "objectidentity"
  },
  "genericUnixServer": {
    "name": "genericUnixServer",
    "oid": "1.3.6.1.4.1.43.1.7",
    "class": "objectidentity"
  },
  "hub": {
    "name": "hub",
    "oid": "1.3.6.1.4.1.43.1.8",
    "class": "objectidentity"
  },
  "cards": {
    "name": "cards",
    "oid": "1.3.6.1.4.1.43.1.9",
    "class": "objectidentity"
  },
  "chipsets": {
    "name": "chipsets",
    "oid": "1.3.6.1.4.1.43.1.10",
    "class": "objectidentity"
  },
  "linkBuilder3GH": {
    "name": "linkBuilder3GH",
    "oid": "1.3.6.1.4.1.43.1.8.1",
    "class": "objectidentity"
  },
  "linkBuilder10BTi": {
    "name": "linkBuilder10BTi",
    "oid": "1.3.6.1.4.1.43.1.8.2",
    "class": "objectidentity"
  },
  "linkBuilderECS": {
    "name": "linkBuilderECS",
    "oid": "1.3.6.1.4.1.43.1.8.3",
    "class": "objectidentity"
  },
  "linkBuilderMSH": {
    "name": "linkBuilderMSH",
    "oid": "1.3.6.1.4.1.43.1.8.4",
    "class": "objectidentity"
  },
  "linkBuilderFMS": {
    "name": "linkBuilderFMS",
    "oid": "1.3.6.1.4.1.43.1.8.5",
    "class": "objectidentity"
  },
  "linkBuilderFddiWorkGroupHub": {
    "name": "linkBuilderFddiWorkGroupHub",
    "oid": "1.3.6.1.4.1.43.1.8.6",
    "class": "objectidentity"
  },
  "linkBuilderFMSII": {
    "name": "linkBuilderFMSII",
    "oid": "1.3.6.1.4.1.43.1.8.7",
    "class": "objectidentity"
  },
  "linkSwitchFMS": {
    "name": "linkSwitchFMS",
    "oid": "1.3.6.1.4.1.43.1.8.8",
    "class": "objectidentity"
  },
  "linkSwitchMSH": {
    "name": "linkSwitchMSH",
    "oid": "1.3.6.1.4.1.43.1.8.9",
    "class": "objectidentity"
  },
  "linkBuilderFMSLBridge": {
    "name": "linkBuilderFMSLBridge",
    "oid": "1.3.6.1.4.1.43.1.8.10",
    "class": "objectidentity"
  },
  "linkBuilderTP8i": {
    "name": "linkBuilderTP8i",
    "oid": "1.3.6.1.4.1.43.1.8.11",
    "class": "objectidentity"
  },
  "linkBuilder3GH_cards": {
    "name": "linkBuilder3GH_cards",
    "oid": "1.3.6.1.4.1.43.1.9.1",
    "class": "objectidentity"
  },
  "linkBuilder10BTi_cards": {
    "name": "linkBuilder10BTi_cards",
    "oid": "1.3.6.1.4.1.43.1.9.2",
    "class": "objectidentity"
  },
  "linkBuilderECS_cards": {
    "name": "linkBuilderECS_cards",
    "oid": "1.3.6.1.4.1.43.1.9.3",
    "class": "objectidentity"
  },
  "linkBuilderMSH_cards": {
    "name": "linkBuilderMSH_cards",
    "oid": "1.3.6.1.4.1.43.1.9.4",
    "class": "objectidentity"
  },
  "linkBuilderFMS_cards": {
    "name": "linkBuilderFMS_cards",
    "oid": "1.3.6.1.4.1.43.1.9.5",
    "class": "objectidentity"
  },
  "linkBuilderFMSII_cards": {
    "name": "linkBuilderFMSII_cards",
    "oid": "1.3.6.1.4.1.43.1.9.6",
    "class": "objectidentity"
  },
  "a3C512": {
    "name": "a3C512",
    "oid": "1.3.6.1.4.1.43.1.9.7",
    "class": "objectidentity"
  },
  "linkBuilderTP8i_cards": {
    "name": "linkBuilderTP8i_cards",
    "oid": "1.3.6.1.4.1.43.1.9.8",
    "class": "objectidentity"
  },
  "linkBuilder10BTi_cards_utp": {
    "name": "linkBuilder10BTi_cards_utp",
    "oid": "1.3.6.1.4.1.43.1.9.2.1",
    "class": "objectidentity"
  },
  "linkBuilder10BT_cards_utp": {
    "name": "linkBuilder10BT_cards_utp",
    "oid": "1.3.6.1.4.1.43.1.9.2.2",
    "class": "objectidentity"
  },
  "linkBuilderFMS_cards_utp": {
    "name": "linkBuilderFMS_cards_utp",
    "oid": "1.3.6.1.4.1.43.1.9.5.1",
    "class": "objectidentity"
  },
  "linkBuilderFMS_cards_coax": {
    "name": "linkBuilderFMS_cards_coax",
    "oid": "1.3.6.1.4.1.43.1.9.5.2",
    "class": "objectidentity"
  },
  "linkBuilderFMS_cards_fiber": {
    "name": "linkBuilderFMS_cards_fiber",
    "oid": "1.3.6.1.4.1.43.1.9.5.3",
    "class": "objectidentity"
  },
  "linkBuilderFMS_cards_12fiber": {
    "name": "linkBuilderFMS_cards_12fiber",
    "oid": "1.3.6.1.4.1.43.1.9.5.4",
    "class": "objectidentity"
  },
  "linkBuilderFMS_cards_24utp": {
    "name": "linkBuilderFMS_cards_24utp",
    "oid": "1.3.6.1.4.1.43.1.9.5.5",
    "class": "objectidentity"
  },
  "linkBuilderFMSII_cards_12tp_rj45": {
    "name": "linkBuilderFMSII_cards_12tp_rj45",
    "oid": "1.3.6.1.4.1.43.1.9.6.1",
    "class": "objectidentity"
  },
  "linkBuilderFMSII_cards_10coax_bnc": {
    "name": "linkBuilderFMSII_cards_10coax_bnc",
    "oid": "1.3.6.1.4.1.43.1.9.6.2",
    "class": "objectidentity"
  },
  "linkBuilderFMSII_cards_6fiber_st": {
    "name": "linkBuilderFMSII_cards_6fiber_st",
    "oid": "1.3.6.1.4.1.43.1.9.6.3",
    "class": "objectidentity"
  },
  "linkBuilderFMSII_cards_12fiber_st": {
    "name": "linkBuilderFMSII_cards_12fiber_st",
    "oid": "1.3.6.1.4.1.43.1.9.6.4",
    "class": "objectidentity"
  },
  "linkBuilderFMSII_cards_24tp_rj45": {
    "name": "linkBuilderFMSII_cards_24tp_rj45",
    "oid": "1.3.6.1.4.1.43.1.9.6.5",
    "class": "objectidentity"
  },
  "linkBuilderFMSII_cards_24tp_telco": {
    "name": "linkBuilderFMSII_cards_24tp_telco",
    "oid": "1.3.6.1.4.1.43.1.9.6.6",
    "class": "objectidentity"
  },
  "linkBuilderTP8i_cards_8tp_rj45": {
    "name": "linkBuilderTP8i_cards_8tp_rj45",
    "oid": "1.3.6.1.4.1.43.1.9.8.1",
    "class": "objectidentity"
  },
  "amp_mib": {
    "name": "amp_mib",
    "oid": "1.3.6.1.4.1.43.3",
    "class": "objectidentity"
  },
  "genericTrap": {
    "name": "genericTrap",
    "oid": "1.3.6.1.4.1.43.4",
    "class": "objectidentity"
  },
  "viewBuilderApps": {
    "name": "viewBuilderApps",
    "oid": "1.3.6.1.4.1.43.5",
    "class": "objectidentity"
  },
  "specificTrap": {
    "name": "specificTrap",
    "oid": "1.3.6.1.4.1.43.6",
    "class": "objectidentity"
  },
  "linkBuilder3GH_mib": {
    "name": "linkBuilder3GH_mib",
    "oid": "1.3.6.1.4.1.43.7",
    "class": "objectidentity"
  },
  "linkBuilder10BTi_mib": {
    "name": "linkBuilder10BTi_mib",
    "oid": "1.3.6.1.4.1.43.8",
    "class": "objectidentity"
  },
  "linkBuilderECS_mib": {
    "name": "linkBuilderECS_mib",
    "oid": "1.3.6.1.4.1.43.9",
    "class": "objectidentity"
  },
  "generic": {
    "name": "generic",
    "oid": "1.3.6.1.4.1.43.10",
    "class": "objectidentity"
  },
  "genExperimental": {
    "name": "genExperimental",
    "oid": "1.3.6.1.4.1.43.10.1",
    "class": "objectidentity"
  },
  "setup": {
    "name": "setup",
    "oid": "1.3.6.1.4.1.43.10.2",
    "class": "objectidentity"
  },
  "sysLoader": {
    "name": "sysLoader",
    "oid": "1.3.6.1.4.1.43.10.3",
    "class": "objectidentity"
  },
  "security": {
    "name": "security",
    "oid": "1.3.6.1.4.1.43.10.4",
    "class": "objectidentity"
  },
  "gauges": {
    "name": "gauges",
    "oid": "1.3.6.1.4.1.43.10.5",
    "class": "objectidentity"
  },
  "asciiAgent": {
    "name": "asciiAgent",
    "oid": "1.3.6.1.4.1.43.10.6",
    "class": "objectidentity"
  },
  "serialIf": {
    "name": "serialIf",
    "oid": "1.3.6.1.4.1.43.10.7",
    "class": "objectidentity"
  },
  "repeaterMgmt": {
    "name": "repeaterMgmt",
    "oid": "1.3.6.1.4.1.43.10.8",
    "class": "objectidentity"
  },
  "endStation": {
    "name": "endStation",
    "oid": "1.3.6.1.4.1.43.10.9",
    "class": "objectidentity"
  },
  "localSnmp": {
    "name": "localSnmp",
    "oid": "1.3.6.1.4.1.43.10.10",
    "class": "objectidentity"
  },
  "manager": {
    "name": "manager",
    "oid": "1.3.6.1.4.1.43.10.11",
    "class": "objectidentity"
  },
  "unusedGeneric12": {
    "name": "unusedGeneric12",
    "oid": "1.3.6.1.4.1.43.10.12",
    "class": "objectidentity"
  },
  "chassis": {
    "name": "chassis",
    "oid": "1.3.6.1.4.1.43.10.14",
    "class": "objectidentity"
  },
  "mrmResilience": {
    "name": "mrmResilience",
    "oid": "1.3.6.1.4.1.43.10.15",
    "class": "objectidentity"
  },
  "tokenRing": {
    "name": "tokenRing",
    "oid": "1.3.6.1.4.1.43.10.16",
    "class": "objectidentity"
  },
  "multiRepeater": {
    "name": "multiRepeater",
    "oid": "1.3.6.1.4.1.43.10.17",
    "class": "objectidentity"
  },
  "bridgeMgmt": {
    "name": "bridgeMgmt",
    "oid": "1.3.6.1.4.1.43.10.18",
    "class": "objectidentity"
  },
  "fault": {
    "name": "fault",
    "oid": "1.3.6.1.4.1.43.10.19",
    "class": "objectidentity"
  },
  "poll": {
    "name": "poll",
    "oid": "1.3.6.1.4.1.43.10.20",
    "class": "objectidentity"
  },
  "powerSupply": {
    "name": "powerSupply",
    "oid": "1.3.6.1.4.1.43.10.21",
    "class": "objectidentity"
  },
  "testData": {
    "name": "testData",
    "oid": "1.3.6.1.4.1.43.10.1.1",
    "class": "objectidentity"
  },
  "ifExtensions": {
    "name": "ifExtensions",
    "oid": "1.3.6.1.4.1.43.10.1.2",
    "class": "objectidentity"
  },
  "netBuilder_mib": {
    "name": "netBuilder_mib",
    "oid": "1.3.6.1.4.1.43.11",
    "class": "objectidentity"
  },
  "lBridgeECS_mib": {
    "name": "lBridgeECS_mib",
    "oid": "1.3.6.1.4.1.43.12",
    "class": "objectidentity"
  },
  "deskMan_mib": {
    "name": "deskMan_mib",
    "oid": "1.3.6.1.4.1.43.13",
    "class": "objectidentity"
  },
  "linkBuilderMSH_mib": {
    "name": "linkBuilderMSH_mib",
    "oid": "1.3.6.1.4.1.43.14",
    "class": "objectidentity"
  },
  "linkBuilderFMS_mib": {
    "name": "linkBuilderFMS_mib",
    "oid": "1.3.6.1.4.1.43.15",
    "class": "objectidentity"
  },
  "linkBuilderFDDI_wghub_mib": {
    "name": "linkBuilderFDDI_wghub_mib",
    "oid": "1.3.6.1.4.1.43.16",
    "class": "objectidentity"
  },
  "linkSwitch_mib": {
    "name": "linkSwitch_mib",
    "oid": "1.3.6.1.4.1.43.17",
    "class": "objectidentity"
  },
  "sysDescr": {
    "name": "sysDescr",
    "oid": "1.3.6.1.2.1.1.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "A textual description of the entity. This value should include the full name and version identification of the system's hardware type, software operating-system, and networking software. It is mandatory that this only contain printable ASCII characters."
  },
  "sysObjectID": {
    "name": "sysObjectID",
    "oid": "1.3.6.1.2.1.1.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The vendor's authoritative identification of the network management subsystem contained in the entity. This value is allocated within the SMI enterprises subtree (1.3.6.1.4.1) and provides an easy and unambiguous means for determining `what kind of box' is being managed. For example, if vendor `Flintstones, Inc.' was assigned the subtree 1.3.6.1.4.1.4242, it could assign the identifier 1.3.6.1.4.1.4242.1.1 to its `Fred Router'."
  },
  "sysUpTime": {
    "name": "sysUpTime",
    "oid": "1.3.6.1.2.1.1.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The time (in hundredths of a second) since the network management portion of the system was last re-initialized."
  },
  "sysContact": {
    "name": "sysContact",
    "oid": "1.3.6.1.2.1.1.4",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The textual identification of the contact person for this managed node, together with information on how to contact this person."
  },
  "sysName": {
    "name": "sysName",
    "oid": "1.3.6.1.2.1.1.5",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "An administratively-assigned name for this managed node. By convention, this is the node's fully-qualified domain name."
  },
  "sysLocation": {
    "name": "sysLocation",
    "oid": "1.3.6.1.2.1.1.6",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The physical location of this node (e.g., `telephone closet, 3rd floor')."
  },
  "sysServices": {
    "name": "sysServices",
    "oid": "1.3.6.1.2.1.1.7",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 127
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "A value which indicates the set of services that this entity primarily offers. The value is a sum. This sum initially takes the value zero, Then, for each layer, L, in the range 1 through 7, that this node performs transactions for, 2 raised to (L - 1) is added to the sum. For example, a node which performs primarily routing functions would have a value of 4 (2^(3-1)). In contrast, a node which is a host offering application services would have a value of 72 (2^(4-1) + 2^(7-1)). Note that in the context of the Internet suite of protocols, values should be calculated accordingly: layer functionality 1 physical (e.g., repeaters) 2 datalink/subnetwork (e.g., bridges) 3 internet (e.g., IP gateways) 4 end-to-end (e.g., IP hosts) 7 applications (e.g., mail relays) For systems including OSI protocols, layers 5 and 6 may also be counted."
  },
  "ifNumber": {
    "name": "ifNumber",
    "oid": "1.3.6.1.2.1.2.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of network interfaces (regardless of their current state) present on this system."
  },
  "ifTable": {
    "name": "ifTable",
    "oid": "1.3.6.1.2.1.2.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A list of interface entries. The number of entries is given by the value of ifNumber."
  },
  "ifEntry": {
    "name": "ifEntry",
    "oid": "1.3.6.1.2.1.2.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "ifIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "An interface entry containing objects at the subnetwork layer and below for a particular interface."
  },
  "ifIndex": {
    "name": "ifIndex",
    "oid": "1.3.6.1.2.1.2.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "A unique value for each interface. Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization."
  },
  "ifDescr": {
    "name": "ifDescr",
    "oid": "1.3.6.1.2.1.2.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the hardware interface."
  },
  "ifType": {
    "name": "ifType",
    "oid": "1.3.6.1.2.1.2.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "regular1822": 2,
          "hdh1822": 3,
          "ddn-x25": 4,
          "rfc877-x25": 5,
          "ethernet-csmacd": 6,
          "iso88023-csmacd": 7,
          "iso88024-tokenBus": 8,
          "iso88025-tokenRing": 9,
          "iso88026-man": 10,
          "starLan": 11,
          "proteon-10Mbit": 12,
          "proteon-80Mbit": 13,
          "hyperchannel": 14,
          "fddi": 15,
          "lapb": 16,
          "sdlc": 17,
          "ds1": 18,
          "e1": 19,
          "basicISDN": 20,
          "primaryISDN": 21,
          "propPointToPointSerial": 22,
          "ppp": 23,
          "softwareLoopback": 24,
          "eon": 25,
          "ethernet-3Mbit": 26,
          "nsip": 27,
          "slip": 28,
          "ultra": 29,
          "ds3": 30,
          "sip": 31,
          "frame-relay": 32
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The type of interface, distinguished according to the physical/link protocol(s) immediately `below' the network layer in the protocol stack."
  },
  "ifMtu": {
    "name": "ifMtu",
    "oid": "1.3.6.1.2.1.2.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The size of the largest datagram which can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface."
  },
  "ifSpeed": {
    "name": "ifSpeed",
    "oid": "1.3.6.1.2.1.2.2.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Gauge",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "An estimate of the interface's current bandwidth in bits per second. For interfaces which do not vary in bandwidth or for those where no accurate estimation can be made, this object should contain the nominal bandwidth."
  },
  "ifPhysAddress": {
    "name": "ifPhysAddress",
    "oid": "1.3.6.1.2.1.2.2.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "PhysAddress",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The interface's address at the protocol layer immediately `below' the network layer in the protocol stack. For interfaces which do not have such an address (e.g., a serial line), this object should contain an octet string of zero length."
  },
  "ifAdminStatus": {
    "name": "ifAdminStatus",
    "oid": "1.3.6.1.2.1.2.2.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "up": 1,
          "down": 2,
          "testing": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The desired state of the interface. The testing(3) state indicates that no operational packets can be passed."
  },
  "ifOperStatus": {
    "name": "ifOperStatus",
    "oid": "1.3.6.1.2.1.2.2.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "up": 1,
          "down": 2,
          "testing": 3
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed."
  },
  "ifLastChange": {
    "name": "ifLastChange",
    "oid": "1.3.6.1.2.1.2.2.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The value of sysUpTime at the time the interface entered its current operational state. If the current state was entered prior to the last re- initialization of the local network management subsystem, then this object contains a zero value."
  },
  "ifInOctets": {
    "name": "ifInOctets",
    "oid": "1.3.6.1.2.1.2.2.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of octets received on the interface, including framing characters."
  },
  "ifInUcastPkts": {
    "name": "ifInUcastPkts",
    "oid": "1.3.6.1.2.1.2.2.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of subnetwork-unicast packets delivered to a higher-layer protocol."
  },
  "ifInNUcastPkts": {
    "name": "ifInNUcastPkts",
    "oid": "1.3.6.1.2.1.2.2.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of non-unicast (i.e., subnetwork- broadcast or subnetwork-multicast) packets delivered to a higher-layer protocol."
  },
  "ifInDiscards": {
    "name": "ifInDiscards",
    "oid": "1.3.6.1.2.1.2.2.1.13",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space."
  },
  "ifInErrors": {
    "name": "ifInErrors",
    "oid": "1.3.6.1.2.1.2.2.1.14",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol."
  },
  "ifInUnknownProtos": {
    "name": "ifInUnknownProtos",
    "oid": "1.3.6.1.2.1.2.2.1.15",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of packets received via the interface which were discarded because of an unknown or unsupported protocol."
  },
  "ifOutOctets": {
    "name": "ifOutOctets",
    "oid": "1.3.6.1.2.1.2.2.1.16",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of octets transmitted out of the interface, including framing characters."
  },
  "ifOutUcastPkts": {
    "name": "ifOutUcastPkts",
    "oid": "1.3.6.1.2.1.2.2.1.17",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent."
  },
  "ifOutNUcastPkts": {
    "name": "ifOutNUcastPkts",
    "oid": "1.3.6.1.2.1.2.2.1.18",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of packets that higher-level protocols requested be transmitted to a non- unicast (i.e., a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent."
  },
  "ifOutDiscards": {
    "name": "ifOutDiscards",
    "oid": "1.3.6.1.2.1.2.2.1.19",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space."
  },
  "ifOutErrors": {
    "name": "ifOutErrors",
    "oid": "1.3.6.1.2.1.2.2.1.20",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of outbound packets that could not be transmitted because of errors."
  },
  "ifOutQLen": {
    "name": "ifOutQLen",
    "oid": "1.3.6.1.2.1.2.2.1.21",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Gauge",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The length of the output packet queue (in packets)."
  },
  "ifSpecific": {
    "name": "ifSpecific",
    "oid": "1.3.6.1.2.1.2.2.1.22",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "A reference to MIB definitions specific to the particular media being used to realize the interface. For example, if the interface is realized by an ethernet, then the value of this object refers to a document defining objects specific to ethernet. If this information is not present, its value should be set to the OBJECT object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value."
  },
  "ipForwarding": {
    "name": "ipForwarding",
    "oid": "1.3.6.1.2.1.4.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "forwarding": 1,
          "not-forwarding": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The indication of whether this entity is acting as an IP gateway in respect to the forwarding of datagrams received by, but not addressed to, this entity. IP gateways forward datagrams. IP hosts do not (except those source-routed via the host). Note that for some managed nodes, this object may take on only a subset of the values possible. Accordingly, it is appropriate for an agent to return a `badValue' response if a management station attempts to change this object to an inappropriate value."
  },
  "ipDefaultTTL": {
    "name": "ipDefaultTTL",
    "oid": "1.3.6.1.2.1.4.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The default value inserted into the Time-To-Live field of the IP header of datagrams originated at this entity, whenever a TTL value is not supplied by the transport layer protocol."
  },
  "ipInReceives": {
    "name": "ipInReceives",
    "oid": "1.3.6.1.2.1.4.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of input datagrams received from interfaces, including those received in error."
  },
  "ipInHdrErrors": {
    "name": "ipInHdrErrors",
    "oid": "1.3.6.1.2.1.4.4",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of input datagrams discarded due to errors in their IP headers, including bad checksums, version number mismatch, other format errors, time-to-live exceeded, errors discovered in processing their IP options, etc."
  },
  "ipInAddrErrors": {
    "name": "ipInAddrErrors",
    "oid": "1.3.6.1.2.1.4.5",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of input datagrams discarded because the IP address in their IP header's destination field was not a valid address to be received at this entity. This count includes invalid addresses (e.g., 0.0.0.0) and addresses of unsupported Classes (e.g., Class E). For entities which are not IP Gateways and therefore do not forward datagrams, this counter includes datagrams discarded because the destination address was not a local address."
  },
  "ipForwDatagrams": {
    "name": "ipForwDatagrams",
    "oid": "1.3.6.1.2.1.4.6",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of input datagrams for which this entity was not their final IP destination, as a result of which an attempt was made to find a route to forward them to that final destination. In entities which do not act as IP Gateways, this counter will include only those packets which were Source-Routed via this entity, and the Source- Route option processing was successful."
  },
  "ipInUnknownProtos": {
    "name": "ipInUnknownProtos",
    "oid": "1.3.6.1.2.1.4.7",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of locally-addressed datagrams received successfully but discarded because of an unknown or unsupported protocol."
  },
  "ipInDiscards": {
    "name": "ipInDiscards",
    "oid": "1.3.6.1.2.1.4.8",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of input IP datagrams for which no problems were encountered to prevent their continued processing, but which were discarded (e.g., for lack of buffer space). Note that this counter does not include any datagrams discarded while awaiting re-assembly."
  },
  "ipInDelivers": {
    "name": "ipInDelivers",
    "oid": "1.3.6.1.2.1.4.9",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of input datagrams successfully delivered to IP user-protocols (including ICMP)."
  },
  "ipOutRequests": {
    "name": "ipOutRequests",
    "oid": "1.3.6.1.2.1.4.10",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of IP datagrams which local IP user-protocols (including ICMP) supplied to IP in requests for transmission. Note that this counter does not include any datagrams counted in ipForwDatagrams."
  },
  "ipOutDiscards": {
    "name": "ipOutDiscards",
    "oid": "1.3.6.1.2.1.4.11",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of output IP datagrams for which no problem was encountered to prevent their transmission to their destination, but which were discarded (e.g., for lack of buffer space). Note that this counter would include datagrams counted in ipForwDatagrams if any such packets met this (discretionary) discard criterion."
  },
  "ipOutNoRoutes": {
    "name": "ipOutNoRoutes",
    "oid": "1.3.6.1.2.1.4.12",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of IP datagrams discarded because no route could be found to transmit them to their destination. Note that this counter includes any packets counted in ipForwDatagrams which meet this `no-route' criterion. Note that this includes any datagrams which a host cannot route because all of its default gateways are down."
  },
  "ipReasmTimeout": {
    "name": "ipReasmTimeout",
    "oid": "1.3.6.1.2.1.4.13",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The maximum number of seconds which received fragments are held while they are awaiting reassembly at this entity."
  },
  "ipReasmReqds": {
    "name": "ipReasmReqds",
    "oid": "1.3.6.1.2.1.4.14",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of IP fragments received which needed to be reassembled at this entity."
  },
  "ipReasmOKs": {
    "name": "ipReasmOKs",
    "oid": "1.3.6.1.2.1.4.15",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of IP datagrams successfully re- assembled."
  },
  "ipReasmFails": {
    "name": "ipReasmFails",
    "oid": "1.3.6.1.2.1.4.16",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of failures detected by the IP re- assembly algorithm (for whatever reason: timed out, errors, etc). Note that this is not necessarily a count of discarded IP fragments since some algorithms (notably the algorithm in RFC 815) can lose track of the number of fragments by combining them as they are received."
  },
  "ipFragOKs": {
    "name": "ipFragOKs",
    "oid": "1.3.6.1.2.1.4.17",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of IP datagrams that have been successfully fragmented at this entity."
  },
  "ipFragFails": {
    "name": "ipFragFails",
    "oid": "1.3.6.1.2.1.4.18",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of IP datagrams that have been discarded because they needed to be fragmented at this entity but could not be, e.g., because their Don't Fragment flag was set."
  },
  "ipFragCreates": {
    "name": "ipFragCreates",
    "oid": "1.3.6.1.2.1.4.19",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of IP datagram fragments that have been generated as a result of fragmentation at this entity."
  },
  "ipAddrTable": {
    "name": "ipAddrTable",
    "oid": "1.3.6.1.2.1.4.20",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "The table of addressing information relevant to this entity's IP addresses."
  },
  "ipAddrEntry": {
    "name": "ipAddrEntry",
    "oid": "1.3.6.1.2.1.4.20.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "ipAdEntAddr",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "The addressing information for one of this entity's IP addresses."
  },
  "ipAdEntAddr": {
    "name": "ipAdEntAddr",
    "oid": "1.3.6.1.2.1.4.20.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "IpAddress",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The IP address to which this entry's addressing information pertains."
  },
  "ipAdEntIfIndex": {
    "name": "ipAdEntIfIndex",
    "oid": "1.3.6.1.2.1.4.20.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex."
  },
  "ipAdEntNetMask": {
    "name": "ipAdEntNetMask",
    "oid": "1.3.6.1.2.1.4.20.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "IpAddress",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0."
  },
  "ipAdEntBcastAddr": {
    "name": "ipAdEntBcastAddr",
    "oid": "1.3.6.1.2.1.4.20.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The value of the least-significant bit in the IP broadcast address used for sending datagrams on the (logical) interface associated with the IP address of this entry. For example, when the Internet standard all-ones broadcast address is used, the value will be 1. This value applies to both the subnet and network broadcasts addresses used by the entity on this (logical) interface."
  },
  "ipAdEntReasmMaxSize": {
    "name": "ipAdEntReasmMaxSize",
    "oid": "1.3.6.1.2.1.4.20.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The size of the largest IP datagram which this entity can re-assemble from incoming IP fragmented datagrams received on this interface."
  },
  "ipRouteTable": {
    "name": "ipRouteTable",
    "oid": "1.3.6.1.2.1.4.21",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "This entity's IP Routing table."
  },
  "ipRouteEntry": {
    "name": "ipRouteEntry",
    "oid": "1.3.6.1.2.1.4.21.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "ipRouteDest",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "A route to a particular destination."
  },
  "ipRouteDest": {
    "name": "ipRouteDest",
    "oid": "1.3.6.1.2.1.4.21.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "IpAddress",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The destination IP address of this route. An entry with a value of 0.0.0.0 is considered a default route. Multiple routes to a single destination can appear in the table, but access to such multiple entries is dependent on the table- access mechanisms defined by the network management protocol in use."
  },
  "ipRouteIfIndex": {
    "name": "ipRouteIfIndex",
    "oid": "1.3.6.1.2.1.4.21.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The index value which uniquely identifies the local interface through which the next hop of this route should be reached. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex."
  },
  "ipRouteMetric1": {
    "name": "ipRouteMetric1",
    "oid": "1.3.6.1.2.1.4.21.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The primary routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1."
  },
  "ipRouteMetric2": {
    "name": "ipRouteMetric2",
    "oid": "1.3.6.1.2.1.4.21.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1."
  },
  "ipRouteMetric3": {
    "name": "ipRouteMetric3",
    "oid": "1.3.6.1.2.1.4.21.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1."
  },
  "ipRouteMetric4": {
    "name": "ipRouteMetric4",
    "oid": "1.3.6.1.2.1.4.21.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1."
  },
  "ipRouteNextHop": {
    "name": "ipRouteNextHop",
    "oid": "1.3.6.1.2.1.4.21.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "IpAddress",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The IP address of the next hop of this route. (In the case of a route bound to an interface which is realized via a broadcast media, the value of this field is the agent's IP address on that interface.)"
  },
  "ipRouteType": {
    "name": "ipRouteType",
    "oid": "1.3.6.1.2.1.4.21.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "invalid": 2,
          "direct": 3,
          "indirect": 4
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The type of route. Note that the values direct(3) and indirect(4) refer to the notion of direct and indirect routing in the IP architecture. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the ipRouteTable object. That is, it effectively disassociates the destination identified with said entry from the route identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant ipRouteType object."
  },
  "ipRouteProto": {
    "name": "ipRouteProto",
    "oid": "1.3.6.1.2.1.4.21.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "local": 2,
          "netmgmt": 3,
          "icmp": 4,
          "egp": 5,
          "ggp": 6,
          "hello": 7,
          "rip": 8,
          "is-is": 9,
          "es-is": 10,
          "ciscoIgrp": 11,
          "bbnSpfIgp": 12,
          "ospf": 13,
          "bgp": 14
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The routing mechanism via which this route was learned. Inclusion of values for gateway routing protocols is not intended to imply that hosts should support those protocols."
  },
  "ipRouteAge": {
    "name": "ipRouteAge",
    "oid": "1.3.6.1.2.1.4.21.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The number of seconds since this route was last updated or otherwise determined to be correct. Note that no semantics of `too old' can be implied except through knowledge of the routing protocol by which the route was learned."
  },
  "ipRouteMask": {
    "name": "ipRouteMask",
    "oid": "1.3.6.1.2.1.4.21.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "IpAddress",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Indicate the mask to be logical-ANDed with the destination address before being compared to the value in the ipRouteDest field. For those systems that do not support arbitrary subnet masks, an agent constructs the value of the ipRouteMask by determining whether the value of the correspondent ipRouteDest field belong to a class-A, B, or C network, and then using one of: mask network 255.0.0.0 class-A 255.255.0.0 class-B 255.255.255.0 class-C If the value of the ipRouteDest is 0.0.0.0 (a default route), then the mask value is also 0.0.0.0. It should be noted that all IP routing subsystems implicitly use this mechanism."
  },
  "ipRouteMetric5": {
    "name": "ipRouteMetric5",
    "oid": "1.3.6.1.2.1.4.21.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1."
  },
  "ipRouteInfo": {
    "name": "ipRouteInfo",
    "oid": "1.3.6.1.2.1.4.21.1.13",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "A reference to MIB definitions specific to the particular routing protocol which is responsible for this route, as determined by the value specified in the route's ipRouteProto value. If this information is not present, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntactically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value."
  },
  "ipNetToMediaTable": {
    "name": "ipNetToMediaTable",
    "oid": "1.3.6.1.2.1.4.22",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "The IP Address Translation table used for mapping from IP addresses to physical addresses."
  },
  "ipNetToMediaEntry": {
    "name": "ipNetToMediaEntry",
    "oid": "1.3.6.1.2.1.4.22.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "ipNetToMediaIfIndex",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "ipNetToMediaNetAddress",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "Each entry contains one IpAddress to `physical' address equivalence."
  },
  "ipNetToMediaIfIndex": {
    "name": "ipNetToMediaIfIndex",
    "oid": "1.3.6.1.2.1.4.22.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The interface on which this entry's equivalence is effective. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex."
  },
  "ipNetToMediaPhysAddress": {
    "name": "ipNetToMediaPhysAddress",
    "oid": "1.3.6.1.2.1.4.22.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "PhysAddress",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The media-dependent `physical' address."
  },
  "ipNetToMediaNetAddress": {
    "name": "ipNetToMediaNetAddress",
    "oid": "1.3.6.1.2.1.4.22.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "IpAddress",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The IpAddress corresponding to the media- dependent `physical' address."
  },
  "ipNetToMediaType": {
    "name": "ipNetToMediaType",
    "oid": "1.3.6.1.2.1.4.22.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "invalid": 2,
          "dynamic": 3,
          "static": 4
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The type of mapping. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the ipNetToMediaTable. That is, it effectively disassociates the interface identified with said entry from the mapping identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant ipNetToMediaType object."
  },
  "ipRoutingDiscards": {
    "name": "ipRoutingDiscards",
    "oid": "1.3.6.1.2.1.4.23",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of routing entries which were chosen to be discarded even though they are valid. One possible reason for discarding such an entry could be to free-up buffer space for other routing entries."
  },
  "icmpInMsgs": {
    "name": "icmpInMsgs",
    "oid": "1.3.6.1.2.1.5.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of ICMP messages which the entity received. Note that this counter includes all those counted by icmpInErrors."
  },
  "icmpInErrors": {
    "name": "icmpInErrors",
    "oid": "1.3.6.1.2.1.5.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP messages which the entity received but determined as having ICMP-specific errors (bad ICMP checksums, bad length, etc.)."
  },
  "icmpInDestUnreachs": {
    "name": "icmpInDestUnreachs",
    "oid": "1.3.6.1.2.1.5.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Destination Unreachable messages received."
  },
  "icmpInTimeExcds": {
    "name": "icmpInTimeExcds",
    "oid": "1.3.6.1.2.1.5.4",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Time Exceeded messages received."
  },
  "icmpInParmProbs": {
    "name": "icmpInParmProbs",
    "oid": "1.3.6.1.2.1.5.5",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Parameter Problem messages received."
  },
  "icmpInSrcQuenchs": {
    "name": "icmpInSrcQuenchs",
    "oid": "1.3.6.1.2.1.5.6",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Source Quench messages received."
  },
  "icmpInRedirects": {
    "name": "icmpInRedirects",
    "oid": "1.3.6.1.2.1.5.7",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Redirect messages received."
  },
  "icmpInEchos": {
    "name": "icmpInEchos",
    "oid": "1.3.6.1.2.1.5.8",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Echo (request) messages received."
  },
  "icmpInEchoReps": {
    "name": "icmpInEchoReps",
    "oid": "1.3.6.1.2.1.5.9",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Echo Reply messages received."
  },
  "icmpInTimestamps": {
    "name": "icmpInTimestamps",
    "oid": "1.3.6.1.2.1.5.10",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Timestamp (request) messages received."
  },
  "icmpInTimestampReps": {
    "name": "icmpInTimestampReps",
    "oid": "1.3.6.1.2.1.5.11",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Timestamp Reply messages received."
  },
  "icmpInAddrMasks": {
    "name": "icmpInAddrMasks",
    "oid": "1.3.6.1.2.1.5.12",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Address Mask Request messages received."
  },
  "icmpInAddrMaskReps": {
    "name": "icmpInAddrMaskReps",
    "oid": "1.3.6.1.2.1.5.13",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Address Mask Reply messages received."
  },
  "icmpOutMsgs": {
    "name": "icmpOutMsgs",
    "oid": "1.3.6.1.2.1.5.14",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of ICMP messages which this entity attempted to send. Note that this counter includes all those counted by icmpOutErrors."
  },
  "icmpOutErrors": {
    "name": "icmpOutErrors",
    "oid": "1.3.6.1.2.1.5.15",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP messages which this entity did not send due to problems discovered within ICMP such as a lack of buffers. This value should not include errors discovered outside the ICMP layer such as the inability of IP to route the resultant datagram. In some implementations there may be no types of error which contribute to this counter's value."
  },
  "icmpOutDestUnreachs": {
    "name": "icmpOutDestUnreachs",
    "oid": "1.3.6.1.2.1.5.16",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Destination Unreachable messages sent."
  },
  "icmpOutTimeExcds": {
    "name": "icmpOutTimeExcds",
    "oid": "1.3.6.1.2.1.5.17",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Time Exceeded messages sent."
  },
  "icmpOutParmProbs": {
    "name": "icmpOutParmProbs",
    "oid": "1.3.6.1.2.1.5.18",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Parameter Problem messages sent."
  },
  "icmpOutSrcQuenchs": {
    "name": "icmpOutSrcQuenchs",
    "oid": "1.3.6.1.2.1.5.19",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Source Quench Messages Sent."
  },
  "icmpOutRedirects": {
    "name": "icmpOutRedirects",
    "oid": "1.3.6.1.2.1.5.20",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Redirect messages sent. For a host, this object will always be zero, since hosts do not send redirects."
  },
  "icmpOutEchos": {
    "name": "icmpOutEchos",
    "oid": "1.3.6.1.2.1.5.21",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Echo (request) messages sent."
  },
  "icmpOutEchoReps": {
    "name": "icmpOutEchoReps",
    "oid": "1.3.6.1.2.1.5.22",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Echo Reply messages sent."
  },
  "icmpOutTimestamps": {
    "name": "icmpOutTimestamps",
    "oid": "1.3.6.1.2.1.5.23",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Timestamp (request) messages sent."
  },
  "icmpOutTimestampReps": {
    "name": "icmpOutTimestampReps",
    "oid": "1.3.6.1.2.1.5.24",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Timestamp Reply messages sent."
  },
  "icmpOutAddrMasks": {
    "name": "icmpOutAddrMasks",
    "oid": "1.3.6.1.2.1.5.25",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Address Mask Request messages sent."
  },
  "icmpOutAddrMaskReps": {
    "name": "icmpOutAddrMaskReps",
    "oid": "1.3.6.1.2.1.5.26",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of ICMP Address Mask Reply messages sent."
  },
  "tcpRtoAlgorithm": {
    "name": "tcpRtoAlgorithm",
    "oid": "1.3.6.1.2.1.6.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "constant": 2,
          "rsre": 3,
          "vanj": 4
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The algorithm used to determine the timeout value used for retransmitting unacknowledged octets."
  },
  "tcpRtoMin": {
    "name": "tcpRtoMin",
    "oid": "1.3.6.1.2.1.6.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The minimum value permitted by a TCP implementation for the retransmission timeout, measured in milliseconds. More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout. In particular, when the timeout algorithm is rsre(3), an object of this type has the semantics of the LBOUND quantity described in RFC 793."
  },
  "tcpRtoMax": {
    "name": "tcpRtoMax",
    "oid": "1.3.6.1.2.1.6.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The maximum value permitted by a TCP implementation for the retransmission timeout, measured in milliseconds. More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout. In particular, when the timeout algorithm is rsre(3), an object of this type has the semantics of the UBOUND quantity described in RFC 793."
  },
  "tcpMaxConn": {
    "name": "tcpMaxConn",
    "oid": "1.3.6.1.2.1.6.4",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The limit on the total number of TCP connections the entity can support. In entities where the maximum number of connections is dynamic, this object should contain the value -1."
  },
  "tcpActiveOpens": {
    "name": "tcpActiveOpens",
    "oid": "1.3.6.1.2.1.6.5",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of times TCP connections have made a direct transition to the SYN-SENT state from the CLOSED state."
  },
  "tcpPassiveOpens": {
    "name": "tcpPassiveOpens",
    "oid": "1.3.6.1.2.1.6.6",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of times TCP connections have made a direct transition to the SYN-RCVD state from the LISTEN state."
  },
  "tcpAttemptFails": {
    "name": "tcpAttemptFails",
    "oid": "1.3.6.1.2.1.6.7",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of times TCP connections have made a direct transition to the CLOSED state from either the SYN-SENT state or the SYN-RCVD state, plus the number of times TCP connections have made a direct transition to the LISTEN state from the SYN-RCVD state."
  },
  "tcpEstabResets": {
    "name": "tcpEstabResets",
    "oid": "1.3.6.1.2.1.6.8",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of times TCP connections have made a direct transition to the CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state."
  },
  "tcpCurrEstab": {
    "name": "tcpCurrEstab",
    "oid": "1.3.6.1.2.1.6.9",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Gauge",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of TCP connections for which the current state is either ESTABLISHED or CLOSE- WAIT."
  },
  "tcpInSegs": {
    "name": "tcpInSegs",
    "oid": "1.3.6.1.2.1.6.10",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of segments received, including those received in error. This count includes segments received on currently established connections."
  },
  "tcpOutSegs": {
    "name": "tcpOutSegs",
    "oid": "1.3.6.1.2.1.6.11",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of segments sent, including those on current connections but excluding those containing only retransmitted octets."
  },
  "tcpRetransSegs": {
    "name": "tcpRetransSegs",
    "oid": "1.3.6.1.2.1.6.12",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of segments retransmitted - that is, the number of TCP segments transmitted containing one or more previously transmitted octets."
  },
  "tcpConnTable": {
    "name": "tcpConnTable",
    "oid": "1.3.6.1.2.1.6.13",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A table containing TCP connection-specific information."
  },
  "tcpConnEntry": {
    "name": "tcpConnEntry",
    "oid": "1.3.6.1.2.1.6.13.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "tcpConnLocalAddress",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "tcpConnLocalPort",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "tcpConnRemAddress",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "tcpConnRemPort",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "Information about a particular current TCP connection. An object of this type is transient, in that it ceases to exist when (or soon after) the connection makes the transition to the CLOSED state."
  },
  "tcpConnState": {
    "name": "tcpConnState",
    "oid": "1.3.6.1.2.1.6.13.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "closed": 1,
          "listen": 2,
          "synSent": 3,
          "synReceived": 4,
          "established": 5,
          "finWait1": 6,
          "finWait2": 7,
          "closeWait": 8,
          "lastAck": 9,
          "closing": 10,
          "timeWait": 11,
          "deleteTCB": 12
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The state of this TCP connection. The only value which may be set by a management station is deleteTCB(12). Accordingly, it is appropriate for an agent to return a `badValue' response if a management station attempts to set this object to any other value. If a management station sets this object to the value deleteTCB(12), then this has the effect of deleting the TCB (as defined in RFC 793) of the corresponding connection on the managed node, resulting in immediate termination of the connection. As an implementation-specific option, a RST segment may be sent from the managed node to the other TCP endpoint (note however that RST segments are not sent reliably)."
  },
  "tcpConnLocalAddress": {
    "name": "tcpConnLocalAddress",
    "oid": "1.3.6.1.2.1.6.13.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "IpAddress",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The local IP address for this TCP connection. In the case of a connection in the listen state which is willing to accept connections for any IP interface associated with the node, the value 0.0.0.0 is used."
  },
  "tcpConnLocalPort": {
    "name": "tcpConnLocalPort",
    "oid": "1.3.6.1.2.1.6.13.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The local port number for this TCP connection."
  },
  "tcpConnRemAddress": {
    "name": "tcpConnRemAddress",
    "oid": "1.3.6.1.2.1.6.13.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "IpAddress",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The remote IP address for this TCP connection."
  },
  "tcpConnRemPort": {
    "name": "tcpConnRemPort",
    "oid": "1.3.6.1.2.1.6.13.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The remote port number for this TCP connection."
  },
  "tcpInErrs": {
    "name": "tcpInErrs",
    "oid": "1.3.6.1.2.1.6.14",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of segments received in error (e.g., bad TCP checksums)."
  },
  "tcpOutRsts": {
    "name": "tcpOutRsts",
    "oid": "1.3.6.1.2.1.6.15",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of TCP segments sent containing the RST flag."
  },
  "udpInDatagrams": {
    "name": "udpInDatagrams",
    "oid": "1.3.6.1.2.1.7.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of UDP datagrams delivered to UDP users."
  },
  "udpNoPorts": {
    "name": "udpNoPorts",
    "oid": "1.3.6.1.2.1.7.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of received UDP datagrams for which there was no application at the destination port."
  },
  "udpInErrors": {
    "name": "udpInErrors",
    "oid": "1.3.6.1.2.1.7.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of received UDP datagrams that could not be delivered for reasons other than the lack of an application at the destination port."
  },
  "udpOutDatagrams": {
    "name": "udpOutDatagrams",
    "oid": "1.3.6.1.2.1.7.4",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of UDP datagrams sent from this entity."
  },
  "udpTable": {
    "name": "udpTable",
    "oid": "1.3.6.1.2.1.7.5",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A table containing UDP listener information."
  },
  "udpEntry": {
    "name": "udpEntry",
    "oid": "1.3.6.1.2.1.7.5.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "udpLocalAddress",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "udpLocalPort",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "Information about a particular current UDP listener."
  },
  "udpLocalAddress": {
    "name": "udpLocalAddress",
    "oid": "1.3.6.1.2.1.7.5.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "IpAddress",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The local IP address for this UDP listener. In the case of a UDP listener which is willing to accept datagrams for any IP interface associated with the node, the value 0.0.0.0 is used."
  },
  "udpLocalPort": {
    "name": "udpLocalPort",
    "oid": "1.3.6.1.2.1.7.5.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The local port number for this UDP listener."
  },
  "snmpInPkts": {
    "name": "snmpInPkts",
    "oid": "1.3.6.1.2.1.11.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of Messages delivered to the SNMP entity from the transport service."
  },
  "snmpOutPkts": {
    "name": "snmpOutPkts",
    "oid": "1.3.6.1.2.1.11.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP Messages which were passed from the SNMP protocol entity to the transport service."
  },
  "snmpInBadVersions": {
    "name": "snmpInBadVersions",
    "oid": "1.3.6.1.2.1.11.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP Messages which were delivered to the SNMP protocol entity and were for an unsupported SNMP version."
  },
  "snmpInBadCommunityNames": {
    "name": "snmpInBadCommunityNames",
    "oid": "1.3.6.1.2.1.11.4",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP Messages delivered to the SNMP protocol entity which used a SNMP community name not known to said entity."
  },
  "snmpInBadCommunityUses": {
    "name": "snmpInBadCommunityUses",
    "oid": "1.3.6.1.2.1.11.5",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP Messages delivered to the SNMP protocol entity which represented an SNMP operation which was not allowed by the SNMP community named in the Message."
  },
  "snmpInASNParseErrs": {
    "name": "snmpInASNParseErrs",
    "oid": "1.3.6.1.2.1.11.6",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of ASN.1 or BER errors encountered by the SNMP protocol entity when decoding received SNMP Messages."
  },
  "snmpInTooBigs": {
    "name": "snmpInTooBigs",
    "oid": "1.3.6.1.2.1.11.8",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP PDUs which were delivered to the SNMP protocol entity and for which the value of the error-status field is `tooBig'."
  },
  "snmpInNoSuchNames": {
    "name": "snmpInNoSuchNames",
    "oid": "1.3.6.1.2.1.11.9",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP PDUs which were delivered to the SNMP protocol entity and for which the value of the error-status field is `noSuchName'."
  },
  "snmpInBadValues": {
    "name": "snmpInBadValues",
    "oid": "1.3.6.1.2.1.11.10",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP PDUs which were delivered to the SNMP protocol entity and for which the value of the error-status field is `badValue'."
  },
  "snmpInReadOnlys": {
    "name": "snmpInReadOnlys",
    "oid": "1.3.6.1.2.1.11.11",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number valid SNMP PDUs which were delivered to the SNMP protocol entity and for which the value of the error-status field is `readOnly'. It should be noted that it is a protocol error to generate an SNMP PDU which contains the value `readOnly' in the error-status field, as such this object is provided as a means of detecting incorrect implementations of the SNMP."
  },
  "snmpInGenErrs": {
    "name": "snmpInGenErrs",
    "oid": "1.3.6.1.2.1.11.12",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP PDUs which were delivered to the SNMP protocol entity and for which the value of the error-status field is `genErr'."
  },
  "snmpInTotalReqVars": {
    "name": "snmpInTotalReqVars",
    "oid": "1.3.6.1.2.1.11.13",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of MIB objects which have been retrieved successfully by the SNMP protocol entity as the result of receiving valid SNMP Get-Request and Get-Next PDUs."
  },
  "snmpInTotalSetVars": {
    "name": "snmpInTotalSetVars",
    "oid": "1.3.6.1.2.1.11.14",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of MIB objects which have been altered successfully by the SNMP protocol entity as the result of receiving valid SNMP Set-Request PDUs."
  },
  "snmpInGetRequests": {
    "name": "snmpInGetRequests",
    "oid": "1.3.6.1.2.1.11.15",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP Get-Request PDUs which have been accepted and processed by the SNMP protocol entity."
  },
  "snmpInGetNexts": {
    "name": "snmpInGetNexts",
    "oid": "1.3.6.1.2.1.11.16",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP Get-Next PDUs which have been accepted and processed by the SNMP protocol entity."
  },
  "snmpInSetRequests": {
    "name": "snmpInSetRequests",
    "oid": "1.3.6.1.2.1.11.17",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP Set-Request PDUs which have been accepted and processed by the SNMP protocol entity."
  },
  "snmpInGetResponses": {
    "name": "snmpInGetResponses",
    "oid": "1.3.6.1.2.1.11.18",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP Get-Response PDUs which have been accepted and processed by the SNMP protocol entity."
  },
  "snmpInTraps": {
    "name": "snmpInTraps",
    "oid": "1.3.6.1.2.1.11.19",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP Trap PDUs which have been accepted and processed by the SNMP protocol entity."
  },
  "snmpOutTooBigs": {
    "name": "snmpOutTooBigs",
    "oid": "1.3.6.1.2.1.11.20",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP PDUs which were generated by the SNMP protocol entity and for which the value of the error-status field is `tooBig.'"
  },
  "snmpOutNoSuchNames": {
    "name": "snmpOutNoSuchNames",
    "oid": "1.3.6.1.2.1.11.21",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP PDUs which were generated by the SNMP protocol entity and for which the value of the error-status is `noSuchName'."
  },
  "snmpOutBadValues": {
    "name": "snmpOutBadValues",
    "oid": "1.3.6.1.2.1.11.22",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP PDUs which were generated by the SNMP protocol entity and for which the value of the error-status field is `badValue'."
  },
  "snmpOutGenErrs": {
    "name": "snmpOutGenErrs",
    "oid": "1.3.6.1.2.1.11.24",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP PDUs which were generated by the SNMP protocol entity and for which the value of the error-status field is `genErr'."
  },
  "snmpOutGetRequests": {
    "name": "snmpOutGetRequests",
    "oid": "1.3.6.1.2.1.11.25",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP Get-Request PDUs which have been generated by the SNMP protocol entity."
  },
  "snmpOutGetNexts": {
    "name": "snmpOutGetNexts",
    "oid": "1.3.6.1.2.1.11.26",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP Get-Next PDUs which have been generated by the SNMP protocol entity."
  },
  "snmpOutSetRequests": {
    "name": "snmpOutSetRequests",
    "oid": "1.3.6.1.2.1.11.27",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP Set-Request PDUs which have been generated by the SNMP protocol entity."
  },
  "snmpOutGetResponses": {
    "name": "snmpOutGetResponses",
    "oid": "1.3.6.1.2.1.11.28",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP Get-Response PDUs which have been generated by the SNMP protocol entity."
  },
  "snmpOutTraps": {
    "name": "snmpOutTraps",
    "oid": "1.3.6.1.2.1.11.29",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of SNMP Trap PDUs which have been generated by the SNMP protocol entity."
  },
  "snmpEnableAuthenTraps": {
    "name": "snmpEnableAuthenTraps",
    "oid": "1.3.6.1.2.1.11.30",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enabled": 1,
          "disabled": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Indicates whether the SNMP agent process is permitted to generate authentication-failure traps. The value of this object overrides any configuration information; as such, it provides a means whereby all authentication-failure traps may be disabled. Note that it is strongly recommended that this object be stored in non-volatile memory so that it remains constant between re-initializations of the network management system."
  },
  "snmpDot3RptrMgt": {
    "name": "snmpDot3RptrMgt",
    "oid": "1.3.6.1.2.1.22",
    "class": "objectidentity"
  },
  "rptrBasicPackage": {
    "name": "rptrBasicPackage",
    "oid": "1.3.6.1.2.1.22.1",
    "class": "objectidentity"
  },
  "rptrMonitorPackage": {
    "name": "rptrMonitorPackage",
    "oid": "1.3.6.1.2.1.22.2",
    "class": "objectidentity"
  },
  "rptrAddrTrackPackage": {
    "name": "rptrAddrTrackPackage",
    "oid": "1.3.6.1.2.1.22.3",
    "class": "objectidentity"
  },
  "rptrRptrInfo": {
    "name": "rptrRptrInfo",
    "oid": "1.3.6.1.2.1.22.1.1",
    "class": "objectidentity"
  },
  "rptrGroupInfo": {
    "name": "rptrGroupInfo",
    "oid": "1.3.6.1.2.1.22.1.2",
    "class": "objectidentity"
  },
  "rptrPortInfo": {
    "name": "rptrPortInfo",
    "oid": "1.3.6.1.2.1.22.1.3",
    "class": "objectidentity"
  },
  "rptrMonitorRptrInfo": {
    "name": "rptrMonitorRptrInfo",
    "oid": "1.3.6.1.2.1.22.2.1",
    "class": "objectidentity"
  },
  "rptrMonitorGroupInfo": {
    "name": "rptrMonitorGroupInfo",
    "oid": "1.3.6.1.2.1.22.2.2",
    "class": "objectidentity"
  },
  "rptrMonitorPortInfo": {
    "name": "rptrMonitorPortInfo",
    "oid": "1.3.6.1.2.1.22.2.3",
    "class": "objectidentity"
  },
  "rptrAddrTrackRptrInfo": {
    "name": "rptrAddrTrackRptrInfo",
    "oid": "1.3.6.1.2.1.22.3.1",
    "class": "objectidentity"
  },
  "rptrAddrTrackGroupInfo": {
    "name": "rptrAddrTrackGroupInfo",
    "oid": "1.3.6.1.2.1.22.3.2",
    "class": "objectidentity"
  },
  "rptrAddrTrackPortInfo": {
    "name": "rptrAddrTrackPortInfo",
    "oid": "1.3.6.1.2.1.22.3.3",
    "class": "objectidentity"
  },
  "rptrGroupCapacity": {
    "name": "rptrGroupCapacity",
    "oid": "1.3.6.1.2.1.22.1.1.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The rptrGroupCapacity is the number of groups that can be contained within the repeater. Within each managed repeater, the groups are uniquely numbered in the range from 1 to rptrGroupCapacity. Some groups may not be present in a given repeater instance, in which case the actual number of groups present will be less than rptrGroupCapacity. The number of groups present will never be greater than rptrGroupCapacity. Note: In practice, this will generally be the number of field-replaceable units (i.e., modules, cards, or boards) that can fit in the physical repeater enclosure, and the group numbers will correspond to numbers marked on the physical enclosure."
  },
  "rptrOperStatus": {
    "name": "rptrOperStatus",
    "oid": "1.3.6.1.2.1.22.1.1.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "ok": 2,
          "rptrFailure": 3,
          "groupFailure": 4,
          "portFailure": 5,
          "generalFailure": 6
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The rptrOperStatus object indicates the operational state of the repeater. The rptrHealthText object may be consulted for more specific information about the state of the repeater's health. In the case of multiple kinds of failures (e.g., repeater failure and port failure), the value of this attribute shall reflect the highest priority failure in the following order: rptrFailure(3) groupFailure(4) portFailure(5) generalFailure(6)"
  },
  "rptrHealthText": {
    "name": "rptrHealthText",
    "oid": "1.3.6.1.2.1.22.1.1.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The health text object is a text string that provides information relevant to the operational state of the repeater. Agents may use this mechanism to provide detailed failure information or instructions for problem resolution. The contents are agent-specific."
  },
  "rptrReset": {
    "name": "rptrReset",
    "oid": "1.3.6.1.2.1.22.1.1.4",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noReset": 1,
          "reset": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Setting this variable to reset(2) causes a transition to the START state of Fig 9-2 in section 9 [11]. Setting this variable to noReset(1) has no effect. The agent will always return the value noReset(1) when this variable is read. This action does not reset the management counters defined in this document nor does it affect the portAdminState parameters. Included in this action is the execution of a disruptive Self-Test. As a result of this action a rptrReset trap may be sent. Note: This action may result in the loss of packets."
  },
  "rptrNonDisruptTest": {
    "name": "rptrNonDisruptTest",
    "oid": "1.3.6.1.2.1.22.1.1.5",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noSelfTest": 1,
          "selfTest": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Setting this variable to selfTest(2) causes the repeater to perform a agent-specific, non- disruptive self-test that has the following characteristics: (1) The nature of the tests is not specified. (2) The test does not change the state of the repeater or management information about the repeater. (3) The test does not inject packets onto any segment. (4) The test does not prevent the relay of any packets. (5) The test does not interfere with management functions. After performing this test the agent will update the repeater health information. If a change in the repeater health has occurred, the agent will send a rptrHealth trap. Setting this variable to noSelfTest(1) has no effect. The agent will always return the value noSelfTest(1) when this variable is read."
  },
  "rptrTotalPartitionedPorts": {
    "name": "rptrTotalPartitionedPorts",
    "oid": "1.3.6.1.2.1.22.1.1.6",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Gauge",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object returns the total number of ports in the repeater whose current state meets all three of the following criteria: rptrPortOperStatus does not have the value notPresent(3), rptrPortAdminStatus is enabled(1), and rptrPortAutoPartitionState is autoPartitioned(2)."
  },
  "rptrGroupTable": {
    "name": "rptrGroupTable",
    "oid": "1.3.6.1.2.1.22.1.2.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "Table of descriptive and status information about the groups of ports."
  },
  "rptrGroupEntry": {
    "name": "rptrGroupEntry",
    "oid": "1.3.6.1.2.1.22.1.2.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rptrGroupIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "An entry in the table, containing information about a single group of ports."
  },
  "rptrGroupIndex": {
    "name": "rptrGroupIndex",
    "oid": "1.3.6.1.2.1.22.1.2.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This variable identifies the group within the repeater for which this entry contains information. This value is never greater than rptrGroupCapacity."
  },
  "rptrGroupDescr": {
    "name": "rptrGroupDescr",
    "oid": "1.3.6.1.2.1.22.1.2.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "A textual description of the group. This value should include the full name and version identification of the group's hardware type and indicate how the group is differentiated from other groups in the repeater. 'Wilma Flintstone 6-Port FOIRL Plug-in Module, Rev A' or 'Barney Rubble 10BASE-T 4-port SIMM socket V. 2.1' are examples of valid group descriptions. It is mandatory that this only contain printable ASCII characters."
  },
  "rptrGroupObjectID": {
    "name": "rptrGroupObjectID",
    "oid": "1.3.6.1.2.1.22.1.2.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The vendor's authoritative identification of the group. This value is allocated within the SMI enterprises subtree (1.3.6.1.4.1) and provides a straight-forward and unambiguous means for determining what kind of group is being managed. For example, this variable could take the value 1.3.6.1.4.1.4242.1.2.14 if vendor 'Flintstones, Inc.' was assigned the subtree 1.3.6.1.4.1.4242, and had assigned the identifier 1.3.6.1.4.1.4242.1.2.14 to its 'Wilma Flintstone 6-Port FOIRL Plug-in Module.'"
  },
  "rptrGroupOperStatus": {
    "name": "rptrGroupOperStatus",
    "oid": "1.3.6.1.2.1.22.1.2.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "operational": 2,
          "malfunctioning": 3,
          "notPresent": 4,
          "underTest": 5,
          "resetInProgress": 6
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "An object that indicates the operational status of the group. A status of notPresent(4) indicates that the group has been physically removed from the repeater. A status of operational(2) indicates that the group is functioning, and a status of malFunctioning(3) indicates that the group is malfunctioning in some way."
  },
  "rptrGroupLastOperStatusChange": {
    "name": "rptrGroupLastOperStatusChange",
    "oid": "1.3.6.1.2.1.22.1.2.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "An object that contains the value of sysUpTime at the time that the value of the rptrGroupOperStatus object for this group last changed. A value of zero indicates that the group's operational status has not changed since the agent last restarted."
  },
  "rptrGroupPortCapacity": {
    "name": "rptrGroupPortCapacity",
    "oid": "1.3.6.1.2.1.22.1.2.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The rptrGroupPortCapacity is the number of ports that can be contained within the group. Valid range is 1-1024. Within each group, the ports are uniquely numbered in the range from 1 to rptrGroupPortCapacity. Note: In practice, this will generally be the number of ports on a module, card, or board, and the port numbers will correspond to numbers marked on the physical embodiment."
  },
  "rptrPortTable": {
    "name": "rptrPortTable",
    "oid": "1.3.6.1.2.1.22.1.3.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "Table of descriptive and status information about the ports."
  },
  "rptrPortEntry": {
    "name": "rptrPortEntry",
    "oid": "1.3.6.1.2.1.22.1.3.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rptrPortGroupIndex",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rptrPortIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "An entry in the table, containing information about a single port."
  },
  "rptrPortGroupIndex": {
    "name": "rptrPortGroupIndex",
    "oid": "1.3.6.1.2.1.22.1.3.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This variable identifies the group containing the port for which this entry contains information."
  },
  "rptrPortIndex": {
    "name": "rptrPortIndex",
    "oid": "1.3.6.1.2.1.22.1.3.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This variable identifies the port within the group within the repeater for which this entry contains management information. This value can never be greater than rptrGroupPortCapacity for the associated group."
  },
  "rptrPortAdminStatus": {
    "name": "rptrPortAdminStatus",
    "oid": "1.3.6.1.2.1.22.1.3.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enabled": 1,
          "disabled": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Setting this object to disabled(2) disables the port. A disabled port neither transmits nor receives. Once disabled, a port must be explicitly enabled to restore operation. A port which is disabled when power is lost or when a reset is exerted shall remain disabled when normal operation resumes. The admin status takes precedence over auto- partition and functionally operates between the auto-partition mechanism and the AUI/PMA. Setting this object to enabled(1) enables the port and exerts a BEGIN on the port's auto-partition state machine. (In effect, when a port is disabled, the value of rptrPortAutoPartitionState for that port is frozen until the port is next enabled. When the port becomes enabled, the rptrPortAutoPartitionState becomes notAutoPartitioned(1), regardless of its pre-disabling state.)"
  },
  "rptrPortAutoPartitionState": {
    "name": "rptrPortAutoPartitionState",
    "oid": "1.3.6.1.2.1.22.1.3.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "notAutoPartitioned": 1,
          "autoPartitioned": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The autoPartitionState flag indicates whether the port is currently partitioned by the repeater's auto-partition protection. The conditions that cause port partitioning are specified in partition state machine in Sect. 9 [11]. They are not differentiated here."
  },
  "rptrPortOperStatus": {
    "name": "rptrPortOperStatus",
    "oid": "1.3.6.1.2.1.22.1.3.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "operational": 1,
          "notOperational": 2,
          "notPresent": 3
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object indicates the port's operational state. The notPresent(3) state indicates the port is physically removed (note this may or may not be possible depending on the type of port.) The operational(1) state indicates that the port is enabled (see rptrPortAdminStatus) and working, even though it might be auto-partitioned (see rptrPortAutoPartitionState)."
  },
  "rptrMonitorTransmitCollisions": {
    "name": "rptrMonitorTransmitCollisions",
    "oid": "1.3.6.1.2.1.22.2.1.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This counter is incremented every time the repeater state machine enters the TRANSMIT COLLISION state from any state other than ONE PORT LEFT (Ref: Fig 9-2) [11]. Note: The approximate minimum time for counter rollover is 16 hours."
  },
  "rptrMonitorGroupTable": {
    "name": "rptrMonitorGroupTable",
    "oid": "1.3.6.1.2.1.22.2.2.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "Table of performance and error statistics for the groups."
  },
  "rptrMonitorGroupEntry": {
    "name": "rptrMonitorGroupEntry",
    "oid": "1.3.6.1.2.1.22.2.2.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rptrMonitorGroupIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "An entry in the table, containing total performance and error statistics for a single group. Regular retrieval of the information in this table provides a means of tracking the performance and health of the networked devices attached to this group's ports. The counters in this table are redundant in the sense that they are the summations of information already available through other objects. However, these sums provide a considerable optimization of network management traffic over the otherwise necessary retrieval of the individual counters included in each sum."
  },
  "rptrMonitorGroupIndex": {
    "name": "rptrMonitorGroupIndex",
    "oid": "1.3.6.1.2.1.22.2.2.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object identifies the group within the repeater for which this entry contains information."
  },
  "rptrMonitorGroupTotalFrames": {
    "name": "rptrMonitorGroupTotalFrames",
    "oid": "1.3.6.1.2.1.22.2.2.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of frames of valid frame length that have been received on the ports in this group. This counter is the summation of the values of the rptrMonitorPortReadableFrames counters for all of the ports in the group. This statistic provides one of the parameters necessary for obtaining the packet error rate. The approximate minimum time for rollover of this counter is 80 hours."
  },
  "rptrMonitorGroupTotalOctets": {
    "name": "rptrMonitorGroupTotalOctets",
    "oid": "1.3.6.1.2.1.22.2.2.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of octets contained in the valid frames that have been received on the ports in this group. This counter is the summation of the values of the rptrMonitorPortReadableOctets counters for all of the ports in the group. This statistic provides an indicator of the total data transferred. The approximate minimum time for rollover of this counter is 58 minutes."
  },
  "rptrMonitorGroupTotalErrors": {
    "name": "rptrMonitorGroupTotalErrors",
    "oid": "1.3.6.1.2.1.22.2.2.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of errors which have occurred on all of the ports in this group. This counter is the summation of the values of the rptrMonitorPortTotalErrors counters for all of the ports in the group."
  },
  "rptrMonitorPortTable": {
    "name": "rptrMonitorPortTable",
    "oid": "1.3.6.1.2.1.22.2.3.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "Table of performance and error statistics for the ports."
  },
  "rptrMonitorPortEntry": {
    "name": "rptrMonitorPortEntry",
    "oid": "1.3.6.1.2.1.22.2.3.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rptrMonitorPortGroupIndex",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rptrMonitorPortIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "An entry in the table, containing performance and error statistics for a single port."
  },
  "rptrMonitorPortGroupIndex": {
    "name": "rptrMonitorPortGroupIndex",
    "oid": "1.3.6.1.2.1.22.2.3.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object identifies the group containing the port for which this entry contains information."
  },
  "rptrMonitorPortIndex": {
    "name": "rptrMonitorPortIndex",
    "oid": "1.3.6.1.2.1.22.2.3.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object identifies the port within the group for which this entry contains information."
  },
  "rptrMonitorPortReadableFrames": {
    "name": "rptrMonitorPortReadableFrames",
    "oid": "1.3.6.1.2.1.22.2.3.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object is the number of frames of valid frame length that have been received on this port. This counter is incremented by one for each frame received on this port whose OctetCount is greater than or equal to minFrameSize and less than or equal to maxFrameSize (Ref: IEEE 802.3 Std, 4.4.2.1) and for which the FCSError and CollisionEvent signals are not asserted. This statistic provides one of the parameters necessary for obtaining the packet error rate. The approximate minimum time for rollover of this counter is 80 hours."
  },
  "rptrMonitorPortReadableOctets": {
    "name": "rptrMonitorPortReadableOctets",
    "oid": "1.3.6.1.2.1.22.2.3.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object is the number of octets contained in valid frames that have been received on this port. This counter is incremented by OctetCount for each frame received on this port which has been determined to be a readable frame. This statistic provides an indicator of the total data transferred. The approximate minimum time for rollover of this counter is 58 minutes."
  },
  "rptrMonitorPortFCSErrors": {
    "name": "rptrMonitorPortFCSErrors",
    "oid": "1.3.6.1.2.1.22.2.3.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This counter is incremented by one for each frame received on this port with the FCSError signal asserted and the FramingError and CollisionEvent signals deasserted and whose OctetCount is greater than or equal to minFrameSize and less than or equal to maxFrameSize (Ref: 4.4.2.1, IEEE 802.3 Std). The approximate minimum time for rollover of this counter is 80 hours."
  },
  "rptrMonitorPortAlignmentErrors": {
    "name": "rptrMonitorPortAlignmentErrors",
    "oid": "1.3.6.1.2.1.22.2.3.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This counter is incremented by one for each frame received on this port with the FCSError and FramingError signals asserted and CollisionEvent signal deasserted and whose OctetCount is greater than or equal to minFrameSize and less than or equal to maxFrameSize (Ref: IEEE 802.3 Std, 4.4.2.1). If rptrMonitorPortAlignmentErrors is incremented then the rptrMonitorPortFCSErrors Counter shall not be incremented for the same frame. The approximate minimum time for rollover of this counter is 80 hours."
  },
  "rptrMonitorPortFrameTooLongs": {
    "name": "rptrMonitorPortFrameTooLongs",
    "oid": "1.3.6.1.2.1.22.2.3.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This counter is incremented by one for each frame received on this port whose OctetCount is greater than maxFrameSize (Ref: 4.4.2.1, IEEE 802.3 Std). If rptrMonitorPortFrameTooLongs is incremented then neither the rptrMonitorPortAlignmentErrors nor the rptrMonitorPortFCSErrors counter shall be incremented for the frame. The approximate minimum time for rollover of this counter is 61 days."
  },
  "rptrMonitorPortShortEvents": {
    "name": "rptrMonitorPortShortEvents",
    "oid": "1.3.6.1.2.1.22.2.3.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This counter is incremented by one for each CarrierEvent on this port with ActivityDuration less than ShortEventMaxTime. ShortEventMaxTime is greater than 74 bit times and less than 82 bit times. ShortEventMaxTime has tolerances included to provide for circuit losses between a conformance test point at the AUI and the measurement point within the state machine. Note: shortEvents may indicate externally generated noise hits which will cause the repeater to transmit Runts to its other ports, or propagate a collision (which may be late) back to the transmitting DTE and damaged frames to the rest of the network. Implementors may wish to consider selecting the ShortEventMaxTime towards the lower end of the allowed tolerance range to accommodate bit losses suffered through physical channel devices not budgeted for within this standard. The approximate minimum time for rollover of this counter is 16 hours."
  },
  "rptrMonitorPortRunts": {
    "name": "rptrMonitorPortRunts",
    "oid": "1.3.6.1.2.1.22.2.3.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This counter is incremented by one for each CarrierEvent on this port that meets one of the following two conditions. Only one test need be made. a) The ActivityDuration is greater than ShortEventMaxTime and less than ValidPacketMinTime and the CollisionEvent signal is deasserted. b) The OctetCount is less than 64, the ActivityDuration is greater than ShortEventMaxTime and the CollisionEvent signal is deasserted. ValidPacketMinTime is greater than or equal to 552 bit times and less than 565 bit times. An event whose length is greater than 74 bit times but less than 82 bit times shall increment either the shortEvents counter or the runts counter but not both. A CarrierEvent greater than or equal to 552 bit times but less than 565 bit times may or may not be counted as a runt. ValidPacketMinTime has tolerances included to provide for circuit losses between a conformance test point at the AUI and the measurement point within the state machine. Runts usually indicate collision fragments, a normal network event. In certain situations associated with large diameter networks a percentage of runts may exceed ValidPacketMinTime. The approximate minimum time for rollover of this counter is 16 hours."
  },
  "rptrMonitorPortCollisions": {
    "name": "rptrMonitorPortCollisions",
    "oid": "1.3.6.1.2.1.22.2.3.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This counter is incremented by one for any CarrierEvent signal on any port for which the CollisionEvent signal on this port is asserted. The approximate minimum time for rollover of this counter is 16 hours."
  },
  "rptrMonitorPortLateEvents": {
    "name": "rptrMonitorPortLateEvents",
    "oid": "1.3.6.1.2.1.22.2.3.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This counter is incremented by one for each CarrierEvent on this port in which the CollIn(X) variable transitions to the value SQE (Ref: 9.6.6.2, IEEE 802.3 Std) while the ActivityDuration is greater than the LateEventThreshold. Such a CarrierEvent is counted twice, as both a collision and as a lateEvent. The LateEventThreshold is greater than 480 bit times and less than 565 bit times. LateEventThreshold has tolerances included to permit an implementation to build a single threshold to serve as both the LateEventThreshold and ValidPacketMinTime threshold. The approximate minimum time for rollover of this counter is 81 hours."
  },
  "rptrMonitorPortVeryLongEvents": {
    "name": "rptrMonitorPortVeryLongEvents",
    "oid": "1.3.6.1.2.1.22.2.3.1.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This counter is incremented by one for each CarrierEvent on this port whose ActivityDuration is greater than the MAU Jabber Lockup Protection timer TW3 (Ref: 9.6.1 & 9.6.5, IEEE 802.3 Std). Other counters may be incremented as appropriate."
  },
  "rptrMonitorPortDataRateMismatches": {
    "name": "rptrMonitorPortDataRateMismatches",
    "oid": "1.3.6.1.2.1.22.2.3.1.1.13",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This counter is incremented by one for each frame received on this port that meets all of the following conditions: a) The CollisionEvent signal is not asserted. b) The ActivityDuration is greater than ValidPacketMinTime. c) The frequency (data rate) is detectably mismatched from the local transmit frequency. The exact degree of mismatch is vendor specific and is to be defined by the vendor for conformance testing. When this event occurs, other counters whose increment conditions were satisfied may or may not also be incremented, at the implementor's discretion. Whether or not the repeater was able to maintain data integrity is beyond the scope of this standard."
  },
  "rptrMonitorPortAutoPartitions": {
    "name": "rptrMonitorPortAutoPartitions",
    "oid": "1.3.6.1.2.1.22.2.3.1.1.14",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This counter is incremented by one for each time the repeater has automatically partitioned this port. The conditions that cause port partitioning are specified in the partition state machine in Section 9 [IEEE 802.3 Std]. They are not differentiated here."
  },
  "rptrMonitorPortTotalErrors": {
    "name": "rptrMonitorPortTotalErrors",
    "oid": "1.3.6.1.2.1.22.2.3.1.1.15",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of errors which have occurred on this port. This counter is the summation of the values of other error counters (for the same port), namely: rptrMonitorPortFCSErrors, rptrMonitorPortAlignmentErrors, rptrMonitorPortFrameTooLongs, rptrMonitorPortShortEvents, rptrMonitorPortLateEvents, rptrMonitorPortVeryLongEvents, and rptrMonitorPortDataRateMismatches. This counter is redundant in the sense that it is the summation of information already available through other objects. However, it is included specifically because the regular retrieval of this object as a means of tracking the health of a port provides a considerable optimization of network management traffic over the otherwise necessary retrieval of the summed counters."
  },
  "rptrAddrTrackTable": {
    "name": "rptrAddrTrackTable",
    "oid": "1.3.6.1.2.1.22.3.3.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "Table of address mapping information about the ports."
  },
  "rptrAddrTrackEntry": {
    "name": "rptrAddrTrackEntry",
    "oid": "1.3.6.1.2.1.22.3.3.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rptrAddrTrackGroupIndex",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rptrAddrTrackPortIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "An entry in the table, containing address mapping information about a single port."
  },
  "rptrAddrTrackGroupIndex": {
    "name": "rptrAddrTrackGroupIndex",
    "oid": "1.3.6.1.2.1.22.3.3.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object identifies the group containing the port for which this entry contains information."
  },
  "rptrAddrTrackPortIndex": {
    "name": "rptrAddrTrackPortIndex",
    "oid": "1.3.6.1.2.1.22.3.3.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object identifies the port within the group for which this entry contains information."
  },
  "rptrAddrTrackLastSourceAddress": {
    "name": "rptrAddrTrackLastSourceAddress",
    "oid": "1.3.6.1.2.1.22.3.3.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "PhysAddress",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object is the SourceAddress of the last readable frame (i.e., counted by rptrMonitorPortReadableFrames) received by this port."
  },
  "rptrAddrTrackSourceAddrChanges": {
    "name": "rptrAddrTrackSourceAddrChanges",
    "oid": "1.3.6.1.2.1.22.3.3.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This counter is incremented by one for each time that the rptrAddrTrackLastSourceAddress attribute for this port has changed. This may indicate whether a link is connected to a single DTE or another multi-user segment. The approximate minimum time for rollover of this counter is 81 hours."
  },
  "rptrHealth": {
    "name": "rptrHealth",
    "oid": "1.3.6.1.2.1.220.1",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rptrOperStatus"
      }
    ],
    "description": "The rptrHealth trap conveys information related to the operational state of the repeater. This trap is sent only when the operational status of the repeater changes. The rptrHealth trap must contain the rptrOperStatus variable. The agent may optionally include the rptrHealthText variable in the varBind list. See the rptrOperStatus and rptrHealthText objects for descriptions of the information that is sent. The agent must throttle the generation of consecutive rptrHealth traps so that there is at least a five-second gap between them."
  },
  "rptrGroupChange": {
    "name": "rptrGroupChange",
    "oid": "1.3.6.1.2.1.220.2",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rptrGroupIndex"
      }
    ],
    "description": "This trap is sent when a change occurs in the group structure of a repeater. This occurs only when a group is logically removed from or added to a repeater. The varBind list contains the identifier of the group that was removed or added. The agent must throttle the generation of consecutive rptrGroupChange traps for the same group so that there is at least a five-second gap between them."
  },
  "snmpDot3RpMauMgt": {
    "name": "snmpDot3RpMauMgt",
    "oid": "1.3.6.1.4.1.43.14.2",
    "class": "objectidentity"
  },
  "rpMauBasicGroup": {
    "name": "rpMauBasicGroup",
    "oid": "1.3.6.1.4.1.43.14.2.1",
    "class": "objectidentity"
  },
  "rpMauTable": {
    "name": "rpMauTable",
    "oid": "1.3.6.1.4.1.43.14.2.1.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "Table of descriptive and status information about the groups of ports."
  },
  "rpMauEntry": {
    "name": "rpMauEntry",
    "oid": "1.3.6.1.4.1.43.14.2.1.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rpMauGroupIndex",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rpMauPortIndex",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rpMauIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "An entry in the table, containing information about a single group of ports."
  },
  "rpMauGroupIndex": {
    "name": "rpMauGroupIndex",
    "oid": "1.3.6.1.4.1.43.14.2.1.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This variable uniquely identifies the repeater group that contains the port to which is connected the MAU for which this entry contains information."
  },
  "rpMauPortIndex": {
    "name": "rpMauPortIndex",
    "oid": "1.3.6.1.4.1.43.14.2.1.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This variable uniquely identifies the repeater port to which is connected the MAU for which this entry contains information."
  },
  "rpMauIndex": {
    "name": "rpMauIndex",
    "oid": "1.3.6.1.4.1.43.14.2.1.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This variable uniquely identifies the MAU for which this entry contains information."
  },
  "rpMauType": {
    "name": "rpMauType",
    "oid": "1.3.6.1.4.1.43.14.2.1.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "unknown": 2,
          "aui": 7,
          "tenbase5": 8,
          "foirl": 9,
          "tenbase2": 10,
          "tenbaseT": 14,
          "tenbaseFP": 16,
          "tenbaseFB": 17,
          "tenbaseFL": 18
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "A value that identifies the 10 Mb/s baseband MAU type. The enumeration of the type is such that the value matches the section number of the IEEE 802.3 standard that specifies the particular MAU."
  },
  "rpMauAdminState": {
    "name": "rpMauAdminState",
    "oid": "1.3.6.1.4.1.43.14.2.1.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "unknown": 2,
          "operational": 3,
          "standby": 4,
          "shutdown": 5,
          "reset": 6
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The administrative state of the MAU. This object may be implemented as a read-only object by those agents and MAUs that do not implement software control of the administrative state. A MAU in the operational(3) state is fully functional, operates, and passes signals to its attached DTE or repeater port in accordance to its specification. A MAU in standby(4) state forces DI and CI and the media transmitter to idle. Standby(4) mode only applies to link type MAUs. The state of mauMediaAvailable is unaffected. A MAU in shutdown(5) state assumes the same condition on DI, CI, and the media transmitter as if it were powered down. The MAU may return other(1) state for the mauJabber and mauMediaAvailable objects when it is in this state. For an AUI, this state will remove power from the AUI. Setting this variable to the value reset(6) resets the MAU in the same manner as a power-off, power- on cycle would. Setting this variable to the value operational(3), standby(4), or shutdown(5) causes the MAU to assume the respective state except that setting a mixing-type MAU or an AUI to standby(4) will cause the MAU to enter the shutdown state."
  },
  "rpMauMediaAvailable": {
    "name": "rpMauMediaAvailable",
    "oid": "1.3.6.1.4.1.43.14.2.1.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "unknown": 2,
          "available": 3,
          "notAvailable": 4,
          "remoteFault": 5,
          "invalidSignal": 6
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "If the MAU is a link or fiber type (FOIRL, 10BASE-T, 10BASE-F) then this is equivalent to the link integrity/low light state. For an AUI or coax MAU this indicates whether or not loopback is detected on the DI circuit. The value of this attribute persists between packets for MAU types AUI, 10BASE5, 10BASE2, and 10BASE-FP. NOTE: IEEE 802.3 modified the following descriptive text at their meeting the week of 3/9/92. New text will be provided at the San Diego IETF plenary. At power-up or following a reset, the value of this attribute will be unknown for AUI, coax, and 10BASE-FP MAUs. For these MAUs loopback will be tested on each transmission during which no collision is detected. If DI receives input within startUpDelay of the start of output on DO, loopback will be detected. The value of startUpDelay shall be between 15 and 25 BT (bit times). Transition form input to output_idle on DI while output is present on DO may also be detected on loopback. The value of this attribute will only change during non-collided transmissions for AUI, coax, and 10BASE-FP MAUs."
  },
  "rpMauLostMedias": {
    "name": "rpMauLostMedias",
    "oid": "1.3.6.1.4.1.43.14.2.1.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "A count of the number of times that rpMauMediaAvailable for this MAU instance leaves the state available(3). Implementation of this object is mandatory for MAU instances with rpMauType of AUI(7). It is recommended for all MAU types."
  },
  "rpMauJabberState": {
    "name": "rpMauJabberState",
    "oid": "1.3.6.1.4.1.43.14.2.1.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "unknown": 2,
          "noJabber": 3,
          "jabbering": 4
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "If the MAU is in jabber state the attribute is set to the jabbering(4) value. This object returns the value other(1) for MAU type AUI."
  },
  "rpMauJabbers": {
    "name": "rpMauJabbers",
    "oid": "1.3.6.1.4.1.43.14.2.1.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "A count of the number of times that rpMauJabberState for this MAU instance enters the state jabbering(4)."
  },
  "faultModifiedFlag": {
    "name": "faultModifiedFlag",
    "oid": "1.3.6.1.4.1.43.10.19.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "clean-read": 1,
          "modified": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "In order to ensure a clean read of the Fault table this flag should be set to clean_read when commencing to read the table and should be examined after reading the entire table. If still set to clean_read then the table read is okay, if not the table should be re-read as it has been modified during the read process."
  },
  "faultTable": {
    "name": "faultTable",
    "oid": "1.3.6.1.4.1.43.10.19.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "The Fault Table."
  },
  "faultEntry": {
    "name": "faultEntry",
    "oid": "1.3.6.1.4.1.43.10.19.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "faultIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "Information relating to a single fault."
  },
  "faultIndex": {
    "name": "faultIndex",
    "oid": "1.3.6.1.4.1.43.10.19.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The index into the Fault table. The initial read from the table should be read as the next, from an index of 0; subsequent reads should read the next from the index returned by the previous read."
  },
  "faultErrorNumber": {
    "name": "faultErrorNumber",
    "oid": "1.3.6.1.4.1.43.10.19.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This error number for this fault log entry."
  },
  "faultTimeStamp": {
    "name": "faultTimeStamp",
    "oid": "1.3.6.1.4.1.43.10.19.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The time since startup, in milliseconds, when the fault occurred."
  },
  "faultRestartCount": {
    "name": "faultRestartCount",
    "oid": "1.3.6.1.4.1.43.10.19.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of restarts at time of fault."
  },
  "setupGeneral": {
    "name": "setupGeneral",
    "oid": "1.3.6.1.4.1.43.10.2.1",
    "class": "objectidentity"
  },
  "heartbeatInterval": {
    "name": "heartbeatInterval",
    "oid": "1.3.6.1.4.1.43.10.2.1.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The time, in seconds, between successive heartbeat events sent to the management station. An interval of 0 indicates that no heartbeat events are to be generated."
  },
  "heartbeatEvent": {
    "name": "heartbeatEvent",
    "oid": "1.3.6.1.4.1.430.13",
    "class": "notificationtype",
    "description": "Generated at a regular interval to inform the manager this device is still operating and can be reached on the network."
  },
  "setupIp": {
    "name": "setupIp",
    "oid": "1.3.6.1.4.1.43.10.2.2",
    "class": "objectidentity"
  },
  "setIpIfTable": {
    "name": "setIpIfTable",
    "oid": "1.3.6.1.4.1.43.10.2.2.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "This table shows the IP address and network mask to be used to initialise ipAddrTable on each network interface after the next system restart. There is one entry per network interface and the index is equivalent to the index for the ifTable in the MIB-II interfaces group."
  },
  "setIpIfEntry": {
    "name": "setIpIfEntry",
    "oid": "1.3.6.1.4.1.43.10.2.2.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "setIpIfIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "The default information relating to a single IP interface."
  },
  "setIpIfIndex": {
    "name": "setIpIfIndex",
    "oid": "1.3.6.1.4.1.43.10.2.2.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex (for ifTable)."
  },
  "setIpIfAddr": {
    "name": "setIpIfAddr",
    "oid": "1.3.6.1.4.1.43.10.2.2.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "IpAddress",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The IP address to be used for this interface."
  },
  "setIpIfMask": {
    "name": "setIpIfMask",
    "oid": "1.3.6.1.4.1.43.10.2.2.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "IpAddress",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The IP network mask to be used for this interface."
  },
  "setIpIfRouter": {
    "name": "setIpIfRouter",
    "oid": "1.3.6.1.4.1.43.10.2.2.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "IpAddress",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This is the IP address of the default router to be used for sending IP datagrams to remote destinations which have no suitable entry in the routing table. This corresponds to an entry in the MIB-II ipRouteTable with an ipRouteDest field of '0.0.0.0' (the default router) which is set up from this value after a system restart. Changes to this value do not affect the IP routing table until after the next system restart. (To change the default router without a restart, the IP routing table should be changed directly, with an equivalent change to setIpIfRouter only if the change is required to be made permanently.)"
  },
  "setupStart": {
    "name": "setupStart",
    "oid": "1.3.6.1.4.1.43.10.2.3",
    "class": "objectidentity"
  },
  "startPROMSwVerNo": {
    "name": "startPROMSwVerNo",
    "oid": "1.3.6.1.4.1.43.10.2.3.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 1,
            "max": 16
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The PROM software version number."
  },
  "startRestartCount": {
    "name": "startRestartCount",
    "oid": "1.3.6.1.4.1.43.10.2.3.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of restarts the box has undergone, either power on or reset switch or watchdog expiries."
  },
  "startLastRestartType": {
    "name": "startLastRestartType",
    "oid": "1.3.6.1.4.1.43.10.2.3.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "command": 2,
          "watchdog": 3,
          "power-reset": 4,
          "system-error": 5
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The reason for the last system restart. This may be due to management command; watchdog timeout expiry; power interruption; the reset switch was pressed or system error. It is not possible to differentiate between the latter two causes."
  },
  "startResetAction": {
    "name": "startResetAction",
    "oid": "1.3.6.1.4.1.43.10.2.3.4",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "nochange": 1,
          "manDefaultReset": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Reset the device with manufacturers default configuration if the manDefaultReset value is written to this item."
  },
  "startLastSystemError": {
    "name": "startLastSystemError",
    "oid": "1.3.6.1.4.1.43.10.2.3.5",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The last System Error experienced by the system. This is set equal to the last system error code recorded in non-volatile memory on startup. When the system issues a TRAP indicating the last system error number, the value in non-volatile memory is set to zero. Hence after the next restart this attribute will also have the value zero."
  },
  "startRestartAction": {
    "name": "startRestartAction",
    "oid": "1.3.6.1.4.1.43.10.2.3.6",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "nochange": 1,
          "restart": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Restart the device with it's current configuration if the restart value is written to this item."
  },
  "systemConfigChangeTime": {
    "name": "systemConfigChangeTime",
    "oid": "1.3.6.1.4.1.43.10.2.4",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object contains the value of 'sysUpTime' for this agent at which the last configuration state change took place. For the purpose of this object the definition of a system configuration state change includes: 1) ANY change to the agent, or the device which the agent provides a management view affected through management (SNMP, telnet etc); 2) ANY internal change resulting in the attempt to generate a trap; 3) certain other device specific conditions which are significant but that which in themselves do not cause the generation of a trap."
  },
  "loadableDeviceTable": {
    "name": "loadableDeviceTable",
    "oid": "1.3.6.1.4.1.43.10.3.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A table which is used to control the loading of new software images to the devices controlled by the management agent. By convention the first entry in the table (device type = system(1), instance = 1) controls the loading of the device containing the management agent itself. Agents which have no subsidiary devices will have only this one entry in the table. If the Agent does control subsidiary devices, the other entries control the loading of software into subsidiary devices."
  },
  "loadableDeviceEntry": {
    "name": "loadableDeviceEntry",
    "oid": "1.3.6.1.4.1.43.10.3.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "slDeviceType",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "slDeviceInstance",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "An entry containing the objects for controlling the loading of a software image to a device controlled by the agent."
  },
  "slDeviceType": {
    "name": "slDeviceType",
    "oid": "1.3.6.1.4.1.43.10.3.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "system": 1,
          "component": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The type of the device to load. Simple agents only contain one device type, which is always `system'. More complex agents, probably containing multiple processors, may contain subsidiary devices denoted (for the purposes of the system loader) as `component'. In general, a `system' device is one which monitors and/or manages the operation of `component' devices."
  },
  "slDeviceInstance": {
    "name": "slDeviceInstance",
    "oid": "1.3.6.1.4.1.43.10.3.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The instance of the device type specified by slDeviceType. By convention instance 1 of the system devices is the one containing the management agent, and always exists. Many systems will contain only the one instance of the system device type."
  },
  "slLoadStatus": {
    "name": "slLoadStatus",
    "oid": "1.3.6.1.4.1.43.10.3.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "fileNotFound": 1,
          "accessViolation": 2,
          "illegalOperation": 4,
          "unknownTransferID": 5,
          "noSuchUser": 7,
          "noResponse": 8,
          "noResource": 9,
          "recLenMismatch": 10,
          "invalidRecType": 11,
          "checksumError": 12,
          "wrongDevice": 13,
          "wrongHardwareVersion": 14,
          "noFileHeader": 15,
          "byteCountError": 16,
          "invalidProgAddress": 17,
          "eraseFailed": 18,
          "progFailed": 19,
          "loadPending": 20,
          "loadActive": 21,
          "success": 22,
          "paused": 23,
          "modInvalidAdress": 200,
          "modChecksumError": 201,
          "modTimeout": 202,
          "modBusy": 203,
          "modRemoved": 204,
          "modNoResource": 205,
          "modFailure": 255
        }
      }
    },
    "default": {
      "default": {
        "value": "success",
        "format": "enum"
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The status of the last system load operation requested for this device. If the value of this object is in the range 1 to 19 inclusive, or 200 or more, the download failed, and the value is an error code indicating the reason why. Codes 1 to 7 are a direct mapping from the TFTP error codes defined in RFC-783. The possible status values and their meanings are as follows:- fileNotFound(1) the server cannot find the requested file; accessViolation(2) the file system security mechanism does not permit TFTP to access the requested file; illegalOperation(4) TFTP protocol error; unknownTransferID(5) TFTP protocol error; noSuchUser(7) user number not recognised; noResponse(8) load server failed to respond; noResource(9) the download could not be started because of a lack of resources; recLenMismatch(10) the record length differs from that implied by the value of the record length field; invalidRecType(11) the record type is not recognised; checksumError(12) record checksum error; wrongDevice(13) the device type in the file is incorrect; wrongHardwareVersion(14) the software image is not suitable for this version of the hardware; noFileHeader(15) the first record in the file was not a file header; byteCountError(16) the byte count reported in the file trailer record differed from the number of bytes actually received; invalidProgAddress(17) the load file contained a load address which was outside the valid range of memory; eraseFailed(18) unable to erase the program memory; progFailed(19) hardware error programming the memory. The meanings of the remaining values are as follows:- loadPending(20) a load has been requested but has not yet begun; loadActive(21) the device is currently being downloaded; success(22) the device has been downloaded successfully; paused(23) the device could not complete the download at this time, it will request that the load be restarted when it is ready. The following status values may result from downloading a subsidiary module:- modInvalidAdress(200) the load file contained a load address which was outside the valid range of memory; modChecksumError(201) the load data was corrupted as it was transferred from the management agent to the subsidiary module; modTimeout(202) the management agent timed out while waiting for a response from the subsidiary module; modBusy(203) the subsidiary module was unable to accept a command from the management agent; modRemoved(204) the subsidiary module was removed during the download; modNoResource(205) the download could not continue because of a lack of resources; modFailure(255) the subsidiary module failed during the download."
  },
  "slSoftwareVersion": {
    "name": "slSoftwareVersion",
    "oid": "1.3.6.1.4.1.43.10.3.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 32
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The version identifier of the software running in the device."
  },
  "slHardwareVersion": {
    "name": "slHardwareVersion",
    "oid": "1.3.6.1.4.1.43.10.3.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The version number identifying the revision level of the hardware of the device"
  },
  "slFilename": {
    "name": "slFilename",
    "oid": "1.3.6.1.4.1.43.10.3.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 1,
            "max": 128
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The name of the file which contains the software image to load, or which was the last loaded to the device."
  },
  "slServerIpAddress": {
    "name": "slServerIpAddress",
    "oid": "1.3.6.1.4.1.43.10.3.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "IpAddress",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "deprecated",
    "description": "The IP address of the host containing the software image to load, or from which the last image loaded was read. This object has been deprecated in favour of writing the IP address into slServerAddress."
  },
  "slLoad": {
    "name": "slLoad",
    "oid": "1.3.6.1.4.1.43.10.3.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noAction": 1,
          "startDownload": 2
        }
      }
    },
    "maxaccess": "write-only",
    "status": "mandatory",
    "description": "Writing 2 to this object causes the agent to attempt to load a new software image to the corresponding device. The file to load and the address of the server to load it from are specified in the other objects in the same row of the table."
  },
  "slServerAddress": {
    "name": "slServerAddress",
    "oid": "1.3.6.1.4.1.43.10.3.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 50
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The address of the server containing the software image to load, or from which the last image was loaded. This is either an IP address in standard dotted notation, or an IPX address in the format aabbccdd:112233445566. An error is returned if the agent does not support the download protocol implied by the address format."
  },
  "slServerProtocol": {
    "name": "slServerProtocol",
    "oid": "1.3.6.1.4.1.43.10.3.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unknown": 1,
          "tftp-ip": 2,
          "tftp-ipx": 3
        }
      }
    },
    "default": {
      "default": {
        "value": "unknown",
        "format": "enum"
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This is the protocol to use when downloading the software from the server specified in slServerAddress. At present, this value is determined by the value of slServerAddress which is currently un-ambiguous and so this object is read-only."
  },
  "slFailed": {
    "name": "slFailed",
    "oid": "1.3.6.1.4.1.430.18",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "slLoadStatus"
      }
    ],
    "description": "When a system load is requested, a response is returned immediately and the load proceeds in the background. If an error is detected this trap is generated indicating the reason why in the status, as follows:- (1) file not found; (2) access violation; (4) illegal TFTP operation; (5) unknown transfer ID; (7) no such user; (8) no response from the load server; (9) the download could not be started because of a lack of resources; (10) the length of a record differs from that implied by the value of the record length field; (11) the record type is not recognised; (12) record checksum error; (13) the device type in the file is incorrect; (14) the software image is not suitable for this version of the hardware; (15) the first record in the file was not a file header; (16) The byte count reported in the file trailer record differed from the number of bytes actually received; (200) the load file contained a load address which was outside the valid range of memory; (201) the load data was corrupted as it was transferred from the management agent to the subsidiary module; (202) the management agent timed out while waiting for a response from the subsidiary module; (203) the subsidiary module was unable to accept a command from the management agent; (204) the subsidiary module was removed during the download; (205) the download could not continue because of a lack of resources; (255) the subsidiary module failed during the download. When loading a new image into the device containing the agent itself, the agent first reads the beginning of the image file to test if it is accessible and contains a valid image. If there is anything wrong, this trap is generated, no download is performed and the device continues to run uninterrupted. If this check is successful the download proper is begun. Should that fail, it is simply retried continuously until either an attempt succeeds or the device is reset."
  },
  "securityEnableTable": {
    "name": "securityEnableTable",
    "oid": "1.3.6.1.4.1.43.10.4.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A table of permissions for access to the managed device from each of its interfaces, at each security access level. The table is fixed at 5 rows, indexed by the access level."
  },
  "securityEnableTableEntry": {
    "name": "securityEnableTableEntry",
    "oid": "1.3.6.1.4.1.43.10.4.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "securityLevel",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "This table allows individual interfaces to be enabled or disabled separately for each security level."
  },
  "securityLevel": {
    "name": "securityLevel",
    "oid": "1.3.6.1.4.1.43.10.4.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "monitor": 1,
          "secureMonitor": 2,
          "manager": 3,
          "specialist": 4,
          "security": 5
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Index to the security enable table."
  },
  "securityCommunityEnable": {
    "name": "securityCommunityEnable",
    "oid": "1.3.6.1.4.1.43.10.4.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enable": 1,
          "disable": 2,
          "permanentlyEnabled": 3,
          "permanentlyDisabled": 4
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Community SNMP access permission"
  },
  "securitySecureEnable": {
    "name": "securitySecureEnable",
    "oid": "1.3.6.1.4.1.43.10.4.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enable": 1,
          "disable": 2,
          "permanentlyEnabled": 3,
          "permanentlyDisabled": 4
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Secure SNMP access permission"
  },
  "securityTermEnable": {
    "name": "securityTermEnable",
    "oid": "1.3.6.1.4.1.43.10.4.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enable": 1,
          "disable": 2,
          "permanentlyEnabled": 3,
          "permanentlyDisabled": 4
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Local Terminal access permission"
  },
  "securityTelnetEnable": {
    "name": "securityTelnetEnable",
    "oid": "1.3.6.1.4.1.43.10.4.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enable": 1,
          "disable": 2,
          "permanentlyEnabled": 3,
          "permanentlyDisabled": 4
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Telnet access permission"
  },
  "securityFrontPanelEnable": {
    "name": "securityFrontPanelEnable",
    "oid": "1.3.6.1.4.1.43.10.4.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enable": 1,
          "disable": 2,
          "permanentlyEnabled": 3,
          "permanentlyDisabled": 4
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Front Panel access permission"
  },
  "securityUserTable": {
    "name": "securityUserTable",
    "oid": "1.3.6.1.4.1.43.10.4.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A table used to define Users. Users can be created/modified or deleted, with the exception of the default Users which cannot be deleted."
  },
  "securityUserTableEntry": {
    "name": "securityUserTableEntry",
    "oid": "1.3.6.1.4.1.43.10.4.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "securityUserName",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "1. Creating a new user is done by using the username as a qualifier and SETting any of the items in the row - defaults will be used for the remaining values. 2. Deleting a user is by writing 'invalid' to the status column. 3. There must always be users called 'monitor', 'manager' and 'security' - these cannot be deleted."
  },
  "securityUserStatus": {
    "name": "securityUserStatus",
    "oid": "1.3.6.1.4.1.43.10.4.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "valid": 1,
          "invalid": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "User Status. `invalid' is used to indicate this user is no longer allowed to access this device, and the table entry may subsequently be re-used. Note that the Status of default Users cannot be set to invalid."
  },
  "securityUserName": {
    "name": "securityUserName",
    "oid": "1.3.6.1.4.1.43.10.4.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 1,
            "max": 10
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "An ASCII string for the User Name. Empty strings are not allowed. The index column for the User Table."
  },
  "securityUserLevel": {
    "name": "securityUserLevel",
    "oid": "1.3.6.1.4.1.43.10.4.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "monitor": 1,
          "secureMonitor": 2,
          "manager": 3,
          "specialist": 4,
          "security": 5
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "User Access Level defining the scope of management allowed for this user. Note that the access level of default Users cannot be changed."
  },
  "securityUserPassword": {
    "name": "securityUserPassword",
    "oid": "1.3.6.1.4.1.43.10.4.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 10
          }
        ]
      }
    },
    "maxaccess": "write-only",
    "status": "mandatory",
    "description": "The password required for user confirmation, when access is made via the local serial port, the front panel, or via Telnet."
  },
  "securityUserCommunity": {
    "name": "securityUserCommunity",
    "oid": "1.3.6.1.4.1.43.10.4.2.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 32
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The community string identifying this user, when access is made via the original community-based SNMP (RFC1157)."
  },
  "securityUserLocParty": {
    "name": "securityUserLocParty",
    "oid": "1.3.6.1.4.1.43.10.4.2.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The local party identity of this user, when access is made via secure SNMP."
  },
  "securityUserMgrParty": {
    "name": "securityUserMgrParty",
    "oid": "1.3.6.1.4.1.43.10.4.2.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The manager party identity for this user, when access is made via secure SNMP."
  },
  "securityAuditLogTable": {
    "name": "securityAuditLogTable",
    "oid": "1.3.6.1.4.1.43.10.4.3",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "The audit log is a circular table recording all updates to the managed database on the device. The log must be read regularly by a management device, to maintain a more permanent record of the management history."
  },
  "securityAuditLogEntry": {
    "name": "securityAuditLogEntry",
    "oid": "1.3.6.1.4.1.43.10.4.3.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "securityAuditIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "Each entry contains the time an update was made, by whom, the item referenced, the new value and the result of this request."
  },
  "securityAuditIndex": {
    "name": "securityAuditIndex",
    "oid": "1.3.6.1.4.1.43.10.4.3.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Audit Log Index. A monotonically increasing value to uniquely identify an entry in the audit log. This value wraps around (to 1) after reaching the maximum value (65535)."
  },
  "securityAuditTime": {
    "name": "securityAuditTime",
    "oid": "1.3.6.1.4.1.43.10.4.3.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The time, in hundredths of a second since the last system restart, of the update request."
  },
  "securityAuditUser": {
    "name": "securityAuditUser",
    "oid": "1.3.6.1.4.1.43.10.4.3.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 10
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The name of the user making the request."
  },
  "securityAuditObject": {
    "name": "securityAuditObject",
    "oid": "1.3.6.1.4.1.43.10.4.3.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The object identifier of the item being updated. This includes any qualifier for the item."
  },
  "securityAuditValue": {
    "name": "securityAuditValue",
    "oid": "1.3.6.1.4.1.43.10.4.3.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 200
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The new value for the item."
  },
  "securityAuditResult": {
    "name": "securityAuditResult",
    "oid": "1.3.6.1.4.1.43.10.4.3.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "success": 255,
          "pending": 1,
          "too-big": 2,
          "failed": 3,
          "locked": 4,
          "security-violation": 5,
          "no-such-function": 6,
          "no-such-item": 7
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The result of the update request may indicate that it was applied successfully, that it failed (for one of a number of reasons) or that it is still in progress."
  },
  "gaugeTable": {
    "name": "gaugeTable",
    "oid": "1.3.6.1.4.1.43.10.5.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A table used to define Alarms."
  },
  "gaugeTableEntry": {
    "name": "gaugeTableEntry",
    "oid": "1.3.6.1.4.1.43.10.5.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "gaugeIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "This table allows Alarms to be set-up on items in the MIB."
  },
  "gaugeIndex": {
    "name": "gaugeIndex",
    "oid": "1.3.6.1.4.1.43.10.5.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Unique identifier for a row in the Alarm Table. Allocated by the Alarms Subsystem. An integer in the range 1..gaugeTableSize."
  },
  "gaugeItemId": {
    "name": "gaugeItemId",
    "oid": "1.3.6.1.4.1.43.10.5.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The object Id and qualifier of the item to be monitored by this alarm. "
  },
  "gaugeItemType": {
    "name": "gaugeItemType",
    "oid": "1.3.6.1.4.1.43.10.5.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "counter": 1,
          "signedMeter": 2,
          "unsignedMeter": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "A 'counter', by definition will always be a positive number. 'Meters' can be signed or unsigned."
  },
  "gaugeSamplesPerAverage": {
    "name": "gaugeSamplesPerAverage",
    "oid": "1.3.6.1.4.1.43.10.5.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "nonAveraging": 1,
          "twoSamples": 2,
          "threeSamples": 3,
          "maxSamples": 4
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The number of samples used to calculate the Alarm Value. The default number of samples is four. If a SamplesPerAverage value of one is used, no average is calculated and the GaugeValue will be the most recent sample."
  },
  "gaugeSamplePeriod": {
    "name": "gaugeSamplePeriod",
    "oid": "1.3.6.1.4.1.43.10.5.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 4294967295
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Number of seconds between samples. The total averaging period is given by (gaugeSamplesPerAverage * gaugeSamplePeiod) secs."
  },
  "gaugeValue": {
    "name": "gaugeValue",
    "oid": "1.3.6.1.4.1.43.10.5.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 4294967295
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The most recently computed average of the item being monitored. For a `meter' alarm, this is the simple average of the samples. For a 'counter' alarm, this is the average of the differences between successive samples. Counters and unsignedMeters are unsigned 32-bit values and have a maximum value of 4294967295. signedMeters are signed 32-bit values and have a maximum value of +-2147483647 divided by the value of gaugeSamplesPerAverage ."
  },
  "gaugePeakValue": {
    "name": "gaugePeakValue",
    "oid": "1.3.6.1.4.1.43.10.5.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 4294967295
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The highest recorded Alarm Value. This will be either a signed or unsigned 32 bit value depending on the gaugeItemType"
  },
  "gaugeThresholdLevel": {
    "name": "gaugeThresholdLevel",
    "oid": "1.3.6.1.4.1.43.10.5.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 4294967295
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The threshold value of the the Alarm which causes the ThresholdState to move from the 'ready' state to the 'fired' state and also causes the the ThresholdAction to be taken. It will be either a signed or unsigned 32-bit integer depending on the gaugeItemType."
  },
  "gaugeRecoveryLevel": {
    "name": "gaugeRecoveryLevel",
    "oid": "1.3.6.1.4.1.43.10.5.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The threshold value of the the Alarm which causes the ThresholdState to move from the `fired' state to the `ready' state and also causes the the RecoveryAction to be taken. This value will be either a signed or unsigned 32-bit integer depending on the gaugeItemType."
  },
  "gaugeThresholdAction": {
    "name": "gaugeThresholdAction",
    "oid": "1.3.6.1.4.1.43.10.5.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noAction": 1,
          "sendTrap": 2,
          "disable": 3,
          "enable": 4,
          "notifyAndBlipPortOff": 5,
          "notifyAndBlipCardOff": 6,
          "notifyAndDisablePort": 8,
          "notifyAndDisableCard": 9,
          "blipPortOff": 12,
          "blipCardOff": 13,
          "disablePort": 14,
          "disableCard": 15,
          "notifyAndResilientSwitch": 18,
          "notifyBandwidthExceeded": 19,
          "notifyErrorsExceeded": 20,
          "notifyPollFailed": 22,
          "notifyFilterBridgePort": 23
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This object identifies the action to be taken when an Alarm crosses the Threshold Level. The default action will be to send a trigger event (sendTrap). The other actions are device specific and may not be available on all devices. See the RMON Event Table for the actions supported by this device."
  },
  "gaugeRecoveryAction": {
    "name": "gaugeRecoveryAction",
    "oid": "1.3.6.1.4.1.43.10.5.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noAction": 1,
          "sendTrap": 2,
          "disable": 3,
          "enable": 4,
          "notifyAndEnablePort": 10,
          "notifyAndEnableCard": 11,
          "enablePort": 16,
          "enableCard": 17,
          "notifyPollSuccess": 21,
          "notifyUnfilterBridgePort": 24
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This object identifies the action to be taken when a 'fired' Alarm crosses the Recovery Level. The default action will be to send a recovery event (sendTrap). The actions for 'disable' and 'enable' are device specific."
  },
  "gaugeState": {
    "name": "gaugeState",
    "oid": "1.3.6.1.4.1.43.10.5.1.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "onTriggersEnabled": 1,
          "onTriggersDisabled": 2,
          "off": 3,
          "deleted": 4,
          "autoCalibrate": 5
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": " onTriggersEnabled - This is the normal active state of a alarm. The gaugeValue is updated on every sample and if it crosses the Threshold or Recovery Levels, the corresponding Action will be taken. onTriggersDisabled - This is used when a new device, or alarm is set up and the Threshold and Recovery Levels have not been calibrated. The Alarm runs as normal and the gaugeValue and peakValue are updated. However, if the gaugeValue crosses the Threshold or Recovery Levels, no action is taken. off - This de-activates the alarm, allowing it to be configured safely . Before updating any of the Alarm fields the alarm SHOULD be turned off. Turning the alarm 'off' and then 'on' will not lose any of the sampling data, gaugeValue, peakValue, or thresholdStatus. Updates to the index fields will fail since they are read-only. deleted - An alarm is invalidated by setting it to 'deleted'. A 'deleted' alarm will not be returned by a 'GetNext' request. autoCalibrate - Updates the Threshold and Recovery values according to the current peak value. The gaugeState will then be set to 'onTriggersEnabled'. This can be done when the gaugeState is in states (1), (2), or (3). After this operation: thresholdLevel = peakValue * %gaugeThresholdLevelScaler recoveryLevel = peakValue * %gaugeRecoveryLevelScaler gaugeState = onTriggersEnabled When the gaugeState is set to either of the 'on' states, all the fields for the Alarm are validated. If any of the fields are invalid, the operation will fail. The sampling data, gaugeValue, peakValue and thresholdState can be reset by writing 'onTriggersEnabled', 'onTriggers- Disabled' , or 'autoCalibrate' to the gaugeState when it is already in either of the 'on' states."
  },
  "gaugeOwner": {
    "name": "gaugeOwner",
    "oid": "1.3.6.1.4.1.43.10.5.1.1.13",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The entity that configured this entry and is therefore using the resources assigned to it."
  },
  "gaugeTableSize": {
    "name": "gaugeTableSize",
    "oid": "1.3.6.1.4.1.43.10.5.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Number of entries in Alarm Table. The size of the Alarm Table depends on the requirements and available resources of the device. The actual maximum will probably be around 1000."
  },
  "gaugeThresholdLevelScaler": {
    "name": "gaugeThresholdLevelScaler",
    "oid": "1.3.6.1.4.1.43.10.5.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The ThresholdLevel is set to this percentage of the peakValue when the Alarm is auto-calibrated. e.g gaugeThresholdLevelScaler = 120 gaugePeakValue = 360 After writing 'calibrateTriggers' to the gaugeState: ThresholdLevel = 120/100 * 360 = 432"
  },
  "gaugeRecoveryLevelScaler": {
    "name": "gaugeRecoveryLevelScaler",
    "oid": "1.3.6.1.4.1.43.10.5.4",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The RecoveryLevel is set to this percentage of the peakValue when the Alarm is auto-calibrated. e.g gaugeRecoveryLevelScaler = 90 gaugePeakValue = 360 After writing 'calibrateTriggers' to the gaugeState: RecoveryLevel = 90/100 * 360 = 324"
  },
  "gaugeTableUpdate": {
    "name": "gaugeTableUpdate",
    "oid": "1.3.6.1.4.1.43.10.5.5",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "deleteAll": 1
        }
      }
    },
    "maxaccess": "write-only",
    "status": "mandatory",
    "description": "Performs the specified operation on every Alarm in the table."
  },
  "gaugeConfigureObjId": {
    "name": "gaugeConfigureObjId",
    "oid": "1.3.6.1.4.1.43.10.5.6",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "maxaccess": "write-only",
    "status": "mandatory",
    "description": "Object Id and qualifier of alarm(s) to be updated."
  },
  "gaugeConfigureColumn": {
    "name": "gaugeConfigureColumn",
    "oid": "1.3.6.1.4.1.43.10.5.7",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "itemType": 1,
          "samplesPerAverage": 2,
          "samplePeriod": 3,
          "thresholdLevel": 4,
          "recoveryLevel": 5,
          "thresholdAction": 6,
          "recoveryAction": 7,
          "gaugeState": 8
        }
      }
    },
    "maxaccess": "write-only",
    "status": "mandatory",
    "description": "Alarm Table Column to be updated."
  },
  "gaugeConfigureValue": {
    "name": "gaugeConfigureValue",
    "oid": "1.3.6.1.4.1.43.10.5.8",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 4294967295
          }
        ]
      }
    },
    "maxaccess": "write-only",
    "status": "mandatory",
    "description": "Value to be written to the 'gaugeConfigureColumn' of the Alarms which match the 'gaugeConfigureObjId'. Writing to this value initiates the operation."
  },
  "gaugeNextFreeIndex": {
    "name": "gaugeNextFreeIndex",
    "oid": "1.3.6.1.4.1.43.10.5.9",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Indicates the gaugeIndex which must be used to create the next alarm. Index is set to GAUGE_TABLE_FULL (zero) if there are no free rows in the table."
  },
  "gaugesThresholdTrap": {
    "name": "gaugesThresholdTrap",
    "oid": "1.3.6.1.4.1.430.16",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "gaugeItemId"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "gaugeThresholdLevel"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "gaugeSamplePeriod"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "gaugeSamplesPerAverage"
      }
    ],
    "description": " Generated when the Alarm value for this Alarm crosses the Threshold Level."
  },
  "gaugesRecoveryTrap": {
    "name": "gaugesRecoveryTrap",
    "oid": "1.3.6.1.4.1.430.17",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "gaugeItemId"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "gaugeRecoveryLevel"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "gaugeSamplePeriod"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "gaugeSamplesPerAverage"
      }
    ],
    "description": " Generated when the Alarm value for this Alarm crosses the Recovery Level."
  },
  "rmon": {
    "name": "rmon",
    "oid": "1.3.6.1.2.1.16",
    "class": "objectidentity"
  },
  "statistics": {
    "name": "statistics",
    "oid": "1.3.6.1.2.1.16.1",
    "class": "objectidentity"
  },
  "history": {
    "name": "history",
    "oid": "1.3.6.1.2.1.16.2",
    "class": "objectidentity"
  },
  "alarm": {
    "name": "alarm",
    "oid": "1.3.6.1.2.1.16.3",
    "class": "objectidentity"
  },
  "hosts": {
    "name": "hosts",
    "oid": "1.3.6.1.2.1.16.4",
    "class": "objectidentity"
  },
  "hostTopN": {
    "name": "hostTopN",
    "oid": "1.3.6.1.2.1.16.5",
    "class": "objectidentity"
  },
  "matrix": {
    "name": "matrix",
    "oid": "1.3.6.1.2.1.16.6",
    "class": "objectidentity"
  },
  "filter": {
    "name": "filter",
    "oid": "1.3.6.1.2.1.16.7",
    "class": "objectidentity"
  },
  "capture": {
    "name": "capture",
    "oid": "1.3.6.1.2.1.16.8",
    "class": "objectidentity"
  },
  "event": {
    "name": "event",
    "oid": "1.3.6.1.2.1.16.9",
    "class": "objectidentity"
  },
  "alarmTable": {
    "name": "alarmTable",
    "oid": "1.3.6.1.2.1.16.3.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A list of alarm entries."
  },
  "alarmEntry": {
    "name": "alarmEntry",
    "oid": "1.3.6.1.2.1.16.3.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "alarmIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "A list of parameters that set up a periodic checking for alarm conditions."
  },
  "alarmIndex": {
    "name": "alarmIndex",
    "oid": "1.3.6.1.2.1.16.3.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "An index that uniquely identifies an entry in the alarm table. Each such entry defines a diagnostic sample at a particular interval for an object on the device."
  },
  "alarmInterval": {
    "name": "alarmInterval",
    "oid": "1.3.6.1.2.1.16.3.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The interval in seconds over which the data is sampled and compared with the rising and falling thresholds. When setting this variable, care should be given to ensure that the variable being monitored will not exceed 2^31 - 1 and roll over the alarmValue object during the interval. This object may not be modified if the associated alarmStatus object is equal to valid(1)."
  },
  "alarmVariable": {
    "name": "alarmVariable",
    "oid": "1.3.6.1.2.1.16.3.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The object identifier of the particular variable to be sampled. Only variables that resolve to an ASN.1 primitive type of INTEGER (INTEGER, Counter, Gauge, or TimeTicks) may be sampled. Because SNMP access control is articulated entirely in terms of the contents of MIB views, no access control mechanism exists that can restrict the value of this object to identify only those objects that exist in a particular MIB view. Because there is thus no acceptable means of restricting the read access that could be obtained through the alarm mechanism, the probe must only grant write access to this object in those views that have read access to all objects on the probe. During a set operation, if the supplied variable name is not available in the selected MIB view, a badValue error must be returned. If at any time the variable name of an established alarmEntry is no longer available in the selected MIB view, the probe must change the status of this alarmEntry to invalid(4). This object may not be modified if the associated alarmStatus object is equal to valid(1)."
  },
  "alarmSampleType": {
    "name": "alarmSampleType",
    "oid": "1.3.6.1.2.1.16.3.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "absoluteValue": 1,
          "deltaValue": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The method of sampling the selected variable and calculating the value to be compared against the thresholds. If the value of this object is absoluteValue(1), the value of the selected variable will be compared directly with the thresholds at the end of the sampling interval. If the value of this object is deltaValue(2), the value of the selected variable at the last sample will be subtracted from the current value, and the difference compared with the thresholds. This object may not be modified if the associated alarmStatus object is equal to valid(1)."
  },
  "alarmValue": {
    "name": "alarmValue",
    "oid": "1.3.6.1.2.1.16.3.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The value of the statistic during the last sampling period. The value during the current sampling period is not made available until the period is completed."
  },
  "alarmStartupAlarm": {
    "name": "alarmStartupAlarm",
    "oid": "1.3.6.1.2.1.16.3.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "risingAlarm": 1,
          "fallingAlarm": 2,
          "risingOrFallingAlarm": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The alarm that may be sent when this entry is first set to valid. If the first sample after this entry becomes valid is greater than or equal to the risingThreshold and alarmStartupAlarm is equal to risingAlarm(1) or risingOrFallingAlarm(3), then a single rising alarm will be generated. If the first sample after this entry becomes valid is less than or equal to the fallingThreshold and alarmStartupAlarm is equal to fallingAlarm(2) or risingOrFallingAlarm(3), then a single falling alarm will be generated. This object may not be modified if the associated alarmStatus object is equal to valid(1)."
  },
  "alarmRisingThreshold": {
    "name": "alarmRisingThreshold",
    "oid": "1.3.6.1.2.1.16.3.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "A threshold for the sampled statistic. When the current sampled value is greater than or equal to this threshold, and the value at the last sampling interval was less than this threshold, a single event will be generated. A single event will also be generated if the first sample after this entry becomes valid is greater than or equal to this threshold and the associated alarmStartupAlarm is equal to risingAlarm(1) or risingOrFallingAlarm(3). After a rising event is generated, another such event will not be generated until the sampled value falls below this threshold and reaches the alarmFallingThreshold. This object may not be modified if the associated alarmStatus object is equal to valid(1)."
  },
  "alarmFallingThreshold": {
    "name": "alarmFallingThreshold",
    "oid": "1.3.6.1.2.1.16.3.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "A threshold for the sampled statistic. When the current sampled value is less than or equal to this threshold, and the value at the last sampling interval was greater than this threshold, a single event will be generated. A single event will also be generated if the first sample after this entry becomes valid is less than or equal to this threshold and the associated alarmStartupAlarm is equal to fallingAlarm(2) or risingOrFallingAlarm(3). After a falling event is generated, another such event will not be generated until the sampled value rises above this threshold and reaches the alarmRisingThreshold. This object may not be modified if the associated alarmStatus object is equal to valid(1)."
  },
  "alarmRisingEventIndex": {
    "name": "alarmRisingEventIndex",
    "oid": "1.3.6.1.2.1.16.3.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The index of the eventEntry that is used when a rising threshold is crossed. The eventEntry identified by a particular value of this index is the same as identified by the same value of the eventIndex object. If there is no corresponding entry in the eventTable, then no association exists. In particular, if this value is zero, no associated event will be generated, as zero is not a valid event index. This object may not be modified if the associated alarmStatus object is equal to valid(1)."
  },
  "alarmFallingEventIndex": {
    "name": "alarmFallingEventIndex",
    "oid": "1.3.6.1.2.1.16.3.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The index of the eventEntry that is used when a falling threshold is crossed. The eventEntry identified by a particular value of this index is the same as identified by the same value of the eventIndex object. If there is no corresponding entry in the eventTable, then no association exists. In particular, if this value is zero, no associated event will be generated, as zero is not a valid event index. This object may not be modified if the associated alarmStatus object is equal to valid(1)."
  },
  "alarmOwner": {
    "name": "alarmOwner",
    "oid": "1.3.6.1.2.1.16.3.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The entity that configured this entry and is therefore using the resources assigned to it."
  },
  "alarmStatus": {
    "name": "alarmStatus",
    "oid": "1.3.6.1.2.1.16.3.1.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "valid": 1,
          "createRequest": 2,
          "underCreation": 3,
          "invalid": 4
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The status of this alarm entry."
  },
  "eventTable": {
    "name": "eventTable",
    "oid": "1.3.6.1.2.1.16.9.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A list of events to be generated."
  },
  "eventEntry": {
    "name": "eventEntry",
    "oid": "1.3.6.1.2.1.16.9.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "eventIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "A set of parameters that describe an event to be generated when certain conditions are met."
  },
  "eventIndex": {
    "name": "eventIndex",
    "oid": "1.3.6.1.2.1.16.9.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "An index that uniquely identifies an entry in the event table. Each such entry defines one event that is to be generated when the appropriate conditions occur."
  },
  "eventDescription": {
    "name": "eventDescription",
    "oid": "1.3.6.1.2.1.16.9.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 127
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "A comment describing this event entry."
  },
  "eventType": {
    "name": "eventType",
    "oid": "1.3.6.1.2.1.16.9.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "none": 1,
          "log": 2,
          "snmp-trap": 3,
          "log-and-trap": 4
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The type of notification that the probe will make about this event. In the case of log, an entry is made in the log table for each event. In the case of snmp-trap, an SNMP trap is sent to one or more management stations."
  },
  "eventCommunity": {
    "name": "eventCommunity",
    "oid": "1.3.6.1.2.1.16.9.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 127
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "If an SNMP trap is to be sent, it will be sent to the SNMP community specified by this octet string. In the future this table will be extended to include the party security mechanism. This object shall be set to a string of length zero if it is intended that that mechanism be used to specify the destination of the trap."
  },
  "eventLastTimeSent": {
    "name": "eventLastTimeSent",
    "oid": "1.3.6.1.2.1.16.9.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The value of sysUpTime at the time this event entry last generated an event. If this entry has not generated any events, this value will be zero."
  },
  "eventOwner": {
    "name": "eventOwner",
    "oid": "1.3.6.1.2.1.16.9.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The entity that configured this entry and is therefore using the resources assigned to it. If this object contains a string starting with 'monitor' and has associated entries in the log table, all connected management stations should retrieve those log entries, as they may have significance to all management stations connected to this device"
  },
  "eventStatus": {
    "name": "eventStatus",
    "oid": "1.3.6.1.2.1.16.9.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "valid": 1,
          "createRequest": 2,
          "underCreation": 3,
          "invalid": 4
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The status of this event entry. If this object is not equal to valid(1), all associated log entries shall be deleted by the agent."
  },
  "logTable": {
    "name": "logTable",
    "oid": "1.3.6.1.2.1.16.9.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A list of events that have been logged."
  },
  "logEntry": {
    "name": "logEntry",
    "oid": "1.3.6.1.2.1.16.9.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "logEventIndex",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "logIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "A set of data describing an event that has been logged."
  },
  "logEventIndex": {
    "name": "logEventIndex",
    "oid": "1.3.6.1.2.1.16.9.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The event entry that generated this log entry. The log identified by a particular value of this index is associated with the same eventEntry as identified by the same value of eventIndex."
  },
  "logIndex": {
    "name": "logIndex",
    "oid": "1.3.6.1.2.1.16.9.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "An index that uniquely identifies an entry in the log table amongst those generated by the same eventEntries. These indexes are assigned beginning with 1 and increase by one with each new log entry. The association between values of logIndex and logEntries is fixed for the lifetime of each logEntry. The agent may choose to delete the oldest instances of logEntry as required because of lack of memory. It is an implementation-specific matter as to when this deletion may occur."
  },
  "logTime": {
    "name": "logTime",
    "oid": "1.3.6.1.2.1.16.9.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The value of sysUpTime when this log entry was created."
  },
  "logDescription": {
    "name": "logDescription",
    "oid": "1.3.6.1.2.1.16.9.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "An implementation dependent description of the event that activated this log entry."
  },
  "risingAlarm": {
    "name": "risingAlarm",
    "oid": "1.3.6.1.2.1.160.1",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "alarmIndex"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "alarmVariable"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "alarmSampleType"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "alarmValue"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "alarmRisingThreshold"
      }
    ],
    "description": "The SNMP trap that is generated when an alarm entry crosses its rising threshold and generates an event that is configured for sending SNMP traps."
  },
  "fallingAlarm": {
    "name": "fallingAlarm",
    "oid": "1.3.6.1.2.1.160.2",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "alarmIndex"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "alarmVariable"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "alarmSampleType"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "alarmValue"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "alarmFallingThreshold"
      }
    ],
    "description": "The SNMP trap that is generated when an alarm entry crosses its falling threshold and generates an event that is configured for sending SNMP traps."
  },
  "ascTimeAttemptedLogin": {
    "name": "ascTimeAttemptedLogin",
    "oid": "1.3.6.1.4.1.43.10.6.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Time in hundredths of a second when the last Login was attempted. Note, that only the ASCII Agent can write to this parameter. A write operation from any other agent will result in an ERROR"
  },
  "ascUserNameForLastAttemptedLogin": {
    "name": "ascUserNameForLastAttemptedLogin",
    "oid": "1.3.6.1.4.1.43.10.6.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 10
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "An ASCII string used when attempted login. Empty string is NOT valid. Note, that only the ASCII Agent can write to this parameter. A write operation from any other agent will result in an ERROR"
  },
  "ascLoginStatus": {
    "name": "ascLoginStatus",
    "oid": "1.3.6.1.4.1.43.10.6.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "loginOKFromTelnet": 1,
          "loginOKFromSerialPort": 2,
          "deniedAccessFromTelnet": 3,
          "deniedAccessFromSerialPort": 4,
          "unknownUserFromTelnet": 5,
          "unknownUserFromSerialPort": 6,
          "incorrectPasswordFromTelnet": 7,
          "incorrectPasswordFromSerialPort": 8,
          "securityViolationFromTelnet": 9,
          "securityViolationFromSerialPort": 10,
          "nologin": 11
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Status of last attempted login. The value 'loginOKFromTelnet' or 'loginOKFromSerialPort' is used to show that the user was allowed access via Telnet or Serial Port. 'DeniedAccessFromTelnet' indicates that a user was denied access via Telnet. The value 'unknownUserFromTelnet' is used to show that a user attempted to login with an invalid user name from a Telnet session and 'incorrectPasswordFromTelnet' is used to show that an invalid password was entered having supplied a valid user name. The value 'securityViolationFromTelnet' is used to indicate that a user has entered the password incorrectly three time consecutively from a Telnet session. Note that only the ASCII Agent can write to this parameter. A write operation from any other agent will result in an ERROR"
  },
  "ascLocalManagementBanner": {
    "name": "ascLocalManagementBanner",
    "oid": "1.3.6.1.4.1.43.10.6.4",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 490
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "An ASCII string describing the Banner to appear on the FIRST screen of the Local Management Terminal. The string of 490 characters defines a region in the centre of the screen which is 7 Rows by 70 Columns"
  },
  "localManagementUpdate": {
    "name": "localManagementUpdate",
    "oid": "1.3.6.1.4.1.430.14",
    "class": "notificationtype",
    "description": "A local management update trap indicates that the configuration of the device has been modified via the ascii agent. This may be through Telnet or the V24 port."
  },
  "securityViolation": {
    "name": "securityViolation",
    "oid": "1.3.6.1.4.1.430.15",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "ascUserNameForLastAttemptedLogin"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "ascLoginStatus"
      }
    ],
    "description": "A security violation trap indicates that a user has attempted to login and failed to enter the correct password Three times consecutively."
  },
  "siSlipPort": {
    "name": "siSlipPort",
    "oid": "1.3.6.1.4.1.43.10.7.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This object identifies the serial port which SLIP can use to send/receive packets. If this object is set to 0xFFFF, then SLIP cannot send/receive packets."
  },
  "configV24Table": {
    "name": "configV24Table",
    "oid": "1.3.6.1.4.1.43.10.7.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "Configuration parameters for all the V.24 ports in a system."
  },
  "configV24Entry": {
    "name": "configV24Entry",
    "oid": "1.3.6.1.4.1.43.10.7.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "configV24PortID",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "Configuration parameters for a V.24 port in the system."
  },
  "configV24PortID": {
    "name": "configV24PortID",
    "oid": "1.3.6.1.4.1.43.10.7.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 16
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This attribute uniquely identifies this V.24 port, it is the index for the V.24 table."
  },
  "configV24ConnType": {
    "name": "configV24ConnType",
    "oid": "1.3.6.1.4.1.43.10.7.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "local": 1,
          "remote": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This determines if the V.24 port is to be connected locally to a terminal or terminal emulator in which case no interface signals need to be asserted unless requested by other management options below or if the V.24 port is to be connected to a modem when at least DSR is required to be asserted."
  },
  "configV24AutoConfig": {
    "name": "configV24AutoConfig",
    "oid": "1.3.6.1.4.1.43.10.7.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "disabled": 1,
          "enabled": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This determines if the configuration parameters for the V.24 port, speed, parity, stop bits, character size, are to be determined automatically from an initial character sequence entered by the user or they will be defined by the management options below."
  },
  "configV24Speed": {
    "name": "configV24Speed",
    "oid": "1.3.6.1.4.1.43.10.7.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "speed1200": 4,
          "speed2400": 5,
          "speed4800": 6,
          "speed9600": 7,
          "speed19200": 8,
          "speed38400": 9
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This determines the receive and transmit speed of the V.24 port unless the autoconfigure attribute is enabled when the data rates are determined from the line. Split rx and tx speeds are not possible."
  },
  "configV24CharSize": {
    "name": "configV24CharSize",
    "oid": "1.3.6.1.4.1.43.10.7.2.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "size7": 3,
          "size8": 4
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This determines the character size, unless the autoconfigure attribute is enabled when character size is determined automatically from the line, it may be set to either 7 or 8 bits."
  },
  "configV24StopBits": {
    "name": "configV24StopBits",
    "oid": "1.3.6.1.4.1.43.10.7.2.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "stopOne": 1,
          "stopOneDotFive": 2,
          "stopTwo": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This determines the number of stop bits."
  },
  "configV24Parity": {
    "name": "configV24Parity",
    "oid": "1.3.6.1.4.1.43.10.7.2.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noParity": 1,
          "spaceParity": 2,
          "markParity": 3,
          "oddParity": 4,
          "evenParity": 5
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This determines the parity option to be used, unless the autoconfigure attribute is enabled when parity is determined automatically from the line, it may be set to either no parity, space (parity bit always 0), mark (parity bit always 1), odd or even."
  },
  "configV24DSRControl": {
    "name": "configV24DSRControl",
    "oid": "1.3.6.1.4.1.43.10.7.2.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "disabled": 1,
          "enabled": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This attribute is only applicable to local connection types. It determines if DSR need be asserted for a local connection to be made and if the connection need be released if DSR is seen deasserted."
  },
  "configV24DCDControl": {
    "name": "configV24DCDControl",
    "oid": "1.3.6.1.4.1.43.10.7.2.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "disabled": 1,
          "enabled": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This attribute is only applicable to local connection types. It determines if DCD need be asserted for a local connection to be made and if the connection should be release if DCD is seen deasserted."
  },
  "configV24FlowControl": {
    "name": "configV24FlowControl",
    "oid": "1.3.6.1.4.1.43.10.7.2.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noFlowControl": 1,
          "xonXoff": 2,
          "rtsCtsFullDplx": 3,
          "rtsCtsHalfDplx": 4
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This determines the flow control protocol to be used, either no flow control, xon-xoff, rts-cts full duplex or rts-cts. Full duplex rts/cts uses the rts and cts lines as two independent signals. The DTE signals to the DCE that it is prepared to accept more data by asserting RTS, the DCE signals to the DTE that is is prepared to accept more data by asserting CTS. Half duplex rts/cts (the conventional way) uses CTS as a response to RTS, the DCE flow controls the DTE by only returning CTS is response to a RTS from the DTE when the DCE can accept more data. The DTE can flow control the DCE by raising RTS when it does not want to receive any more input and dropping it when it is ready to receive more."
  },
  "configV24Update": {
    "name": "configV24Update",
    "oid": "1.3.6.1.4.1.43.10.7.2.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "nochange": 1,
          "update": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This attribute may be written to to force the operational V.24 port parameters to be updated."
  },
  "mrmSecurityPackage": {
    "name": "mrmSecurityPackage",
    "oid": "1.3.6.1.4.1.43.10.8.6",
    "class": "objectidentity"
  },
  "mrmSecurePortTable": {
    "name": "mrmSecurePortTable",
    "oid": "1.3.6.1.4.1.43.10.8.6.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A table which allows management of the secure Repeater Ports."
  },
  "mrmSecurePortEntry": {
    "name": "mrmSecurePortEntry",
    "oid": "1.3.6.1.4.1.43.10.8.6.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmSecRepIndex",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmSecSlotIndex",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmSecPortIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "This table allows repeater ports to be configured on a per port basis. It is index using the objects mrmSecRepIndex, mrmSecSlotIndex and mrmSecPortIndex."
  },
  "mrmSecRepIndex": {
    "name": "mrmSecRepIndex",
    "oid": "1.3.6.1.4.1.43.10.8.6.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The secure port repeater index. This is the first of three indexes into the mrmSecurePortTable."
  },
  "mrmSecSlotIndex": {
    "name": "mrmSecSlotIndex",
    "oid": "1.3.6.1.4.1.43.10.8.6.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The secure port slot index. This is the second of three indexes into the mrmSecurePortTable."
  },
  "mrmSecPortIndex": {
    "name": "mrmSecPortIndex",
    "oid": "1.3.6.1.4.1.43.10.8.6.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The secure port port index. This is the third of three indexes into the mrmSecurePortTable."
  },
  "mrmSecPortState": {
    "name": "mrmSecPortState",
    "oid": "1.3.6.1.4.1.43.10.8.6.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "unauthorised-station-seen": 2,
          "unauthorised-station-port-disabled": 3,
          "authorised-station-learnt": 4
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Attribute to determine the current security status of a port. This attribute is used by the security trap to identify the reason for the trap. The range of values returned by this object is 1 other 2 unauthorised-station-seen 3 unauthorised-station-port-disabled 4 authorised-station-learnt"
  },
  "mrmSecNTKState": {
    "name": "mrmSecNTKState",
    "oid": "1.3.6.1.4.1.43.10.8.6.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "disabled": 2,
          "enabled": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Attribute to determine whether the Need to Know feature is enabled on the secure Repeater Line Card. The range of values that are valid for this object are 1 other 2 Need to Know is disabled 3 Need to know is enabled It is only valid to write the values 2 and 3."
  },
  "mrmSecBroadcastState": {
    "name": "mrmSecBroadcastState",
    "oid": "1.3.6.1.4.1.43.10.8.6.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "disabled": 2,
          "enabled": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Attribute to determine whether broadcasts are allowed or not allowed to be transmitted. 1 other 2 Broadcasts are not allowed 3 Broadcasts are allowed It is only valid to write the values 2 and 3."
  },
  "mrmSecMulticastState": {
    "name": "mrmSecMulticastState",
    "oid": "1.3.6.1.4.1.43.10.8.6.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "disabled": 2,
          "enabled": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Attribute to determine whether multicasts are allowed or not allowed to be transmitted. 1 other 2 Multicasts are not allowed 3 Multicasts are allowed It is only valid to write the values 2 and 3."
  },
  "mrmSecLearnMode": {
    "name": "mrmSecLearnMode",
    "oid": "1.3.6.1.4.1.43.10.8.6.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "off": 1,
          "single": 2,
          "continual": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Attribute to determine the learning mode of the secure repeater line card. The range of values that are valid for this object are 1 no learning, the address is managed 2 the address of the first incoming packet is learnt 3 the address is continually learning "
  },
  "mrmSecReportMode": {
    "name": "mrmSecReportMode",
    "oid": "1.3.6.1.4.1.43.10.8.6.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "off": 1,
          "reportonly": 2,
          "disconnectandreport": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Attribute to determine the reporting mode of the secure repeater port. The range of values that are valid for this object are 1 Not in applicable learn state 2 Report only 3 Disconnect and Report"
  },
  "mrmSecMACAddress": {
    "name": "mrmSecMACAddress",
    "oid": "1.3.6.1.4.1.43.10.8.6.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 6,
            "max": 6
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The MAC address in use by the secure repeater port."
  },
  "mrmSecRowStatus": {
    "name": "mrmSecRowStatus",
    "oid": "1.3.6.1.4.1.43.10.8.6.1.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "under-modification": 1,
          "stable": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": " This parameter must be set to under-modification before any changes are made to an existing configuration. Changes are not applied until this parameter is set to stable. "
  },
  "mrmSecurityTrap": {
    "name": "mrmSecurityTrap",
    "oid": "1.3.6.1.4.1.430.37",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmSecPortState"
      }
    ],
    "description": " This trap indicates that this port has detected a security violation."
  },
  "mrmStationLearnTrap": {
    "name": "mrmStationLearnTrap",
    "oid": "1.3.6.1.4.1.430.36",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmSecLearnMode"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmSecMACAddress"
      }
    ],
    "description": " This trap indicates that this port has autolearnt an end station address."
  },
  "esDatabaseState": {
    "name": "esDatabaseState",
    "oid": "1.3.6.1.4.1.43.10.9.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noChange": 1,
          "modified": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": " This parameter is normally set to 'NO-CHANGE'. When any change is made to the database the value of this parameter becomes 'MODIFIED'. It will remain in this state until a manager sets it back to NO-CHANGE. "
  },
  "esDatabaseFlush": {
    "name": "esDatabaseFlush",
    "oid": "1.3.6.1.4.1.43.10.9.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "flush": 1
        }
      }
    },
    "maxaccess": "write-only",
    "status": "mandatory",
    "description": " This parameter clears the End Station Database"
  },
  "esTable": {
    "name": "esTable",
    "oid": "1.3.6.1.4.1.43.10.9.3",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "End Station Table"
  },
  "esTableEntry": {
    "name": "esTableEntry",
    "oid": "1.3.6.1.4.1.43.10.9.3.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "esAddrType",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "esAddress",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": " The end station database maintains information concerning end-station address information against device port for 802.3 repeater type devices. This table provides one of three views on that database. The view provided by this particular table is indexed firstly on address type and then on address and so can be used to read the entire contents of the database in end-station address order. Additionally one can read all addresses of a certain type from the database, e.g. all IP addresses known. There are some points to note when reading the contents of the end station table. Firstly the repeater number reported will change if a unit is moved from one repeater within a device to another or if a unit is isolated. Secondly an address will only appear in the table once. If an address which is already present in the database is found on another port then the original record is changed and the 'modified' flag set for that entry."
  },
  "esAddrType": {
    "name": "esAddrType",
    "oid": "1.3.6.1.4.1.43.10.9.3.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "ieee8021": 1,
          "internet": 2,
          "ipx": 3
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " The end station database is capable of storing information for a number of different protocols. Each protocol has it's own addressing format. This parameter allows access to the end station database indexed on address type. For example to read all IEE8021 addresses simply start with a get-next operation on IEEE8021.0 and read until the type changes."
  },
  "esAddress": {
    "name": "esAddress",
    "oid": "1.3.6.1.4.1.43.10.9.3.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 6,
            "max": 6
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " The address information held in this entry of the database. The length and format of the string depends on the address type. For example a MAC address will be a 6 byte OCTET STRING, an IP address a 4 byte OCTET STRING."
  },
  "esSlotNumber": {
    "name": "esSlotNumber",
    "oid": "1.3.6.1.4.1.43.10.9.3.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Number of unit on which this address was learnt."
  },
  "esPortNumber": {
    "name": "esPortNumber",
    "oid": "1.3.6.1.4.1.43.10.9.3.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Port number of unit on which this address was learnt."
  },
  "esModTable": {
    "name": "esModTable",
    "oid": "1.3.6.1.4.1.43.10.9.4",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "End Station Table ( Modified )"
  },
  "esModTableEntry": {
    "name": "esModTableEntry",
    "oid": "1.3.6.1.4.1.43.10.9.4.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "esModAddrType",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "esModAddress",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": " The end station database maintains information concerning end-station address information against device port for 802.3 repeater type devices. This table provides one of three views on that database. The view provided by this particular table is indexed firstly on address type and then on address. The view is restricted to include only those entries in the database which have the MODIFIED flag set, i.e. that have been changed since the database was last viewed by the manager. This table can be used to read all the modified entries in the table. This is the table generally used to update the contents of a station map in a management station. Note that it can take a reasonable time to read the contents of the table and in that time other changes may occur. To detect this an additional MIB parameter is specified 'esDatabaseState'. This parameter is normally set to 'NO-CHANGE'. When any change is made to the database the value of this parameter becomes 'MODIFIED'. It will remain in this state until a manager sets it back to NO-CHANGE. The recommended access for this table is as follows: do { write 'NO-CHANGE' to esDatabaseState read modified table read esDatabaseState } while esDatabaseState is MODIFIED There are some points to note when reading the contents of the end station table. Firstly the repeater number reported will change if a unit is moved from one repeater within a device to another or if a unit is isolated. Secondly an address will only appear in the table once. If an address which is already present in the database is found on another port then the original record is changed and the 'modified' flag set for that entry."
  },
  "esModAddrType": {
    "name": "esModAddrType",
    "oid": "1.3.6.1.4.1.43.10.9.4.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "ieee8021": 1,
          "internet": 2,
          "ipx": 3
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " The end station database is capable of storing information for a number of different protocols. Each protocol has it's own addressing format. This parameter allows access to the end station database indexed on address type. For example to read all IEE8021 addresses simply start with a get-next operation on IEEE8021.0 and read until the type changes."
  },
  "esModAddress": {
    "name": "esModAddress",
    "oid": "1.3.6.1.4.1.43.10.9.4.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 6,
            "max": 6
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " The address information held in this entry of the database. The length and format of the string depends on the address type. For example a MAC address will be a 6 byte OCTET STRING, an IP address a 4 byte OCTET STRING."
  },
  "esModSlotNumber": {
    "name": "esModSlotNumber",
    "oid": "1.3.6.1.4.1.43.10.9.4.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Unit number on which this address was learnt."
  },
  "esModPortNumber": {
    "name": "esModPortNumber",
    "oid": "1.3.6.1.4.1.43.10.9.4.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Port number of unit on which this address was learnt."
  },
  "esPortAccessTable": {
    "name": "esPortAccessTable",
    "oid": "1.3.6.1.4.1.43.10.9.5",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "End Station Table ( Port Access )"
  },
  "esPortAccessEntry": {
    "name": "esPortAccessEntry",
    "oid": "1.3.6.1.4.1.43.10.9.5.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "ecPortCardNo",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "ecPortPortNo",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "ecPortIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": " The end station database maintains information concerning end-station address information against device port for 802.3 repeater type devices. This table provides one of three views on that database. The view provided by this particular table allows one to determine the addresses learnt against a particular port."
  },
  "ecPortCardNo": {
    "name": "ecPortCardNo",
    "oid": "1.3.6.1.4.1.43.10.9.5.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Unit part of the identifier for this port."
  },
  "ecPortPortNo": {
    "name": "ecPortPortNo",
    "oid": "1.3.6.1.4.1.43.10.9.5.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Port number on unit of port for which end station information is required."
  },
  "ecPortIndex": {
    "name": "ecPortIndex",
    "oid": "1.3.6.1.4.1.43.10.9.5.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Each port may have a number of addresses against it. This index allows these various addresses to be distinguished. The only stipulation on this number is that it will be unique for the any combination of unit and port. The numbers will be returned in numerically ascending order for a particular unit.port combination but will not be contiguous. For example the following sequence could be seen: Unit Port Index 1 1 211 1 1 231 1 1 438 1 1 672 1 2 120 etc"
  },
  "ecPortAddrType": {
    "name": "ecPortAddrType",
    "oid": "1.3.6.1.4.1.43.10.9.5.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "ieee8021": 1,
          "internet": 2,
          "ipx": 3
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " The end station database is capable of storing information for a number of different protocols. Each protocol has it's own addressing format. This parameter identifies the type of address in this entry of the table."
  },
  "ecPortAddress": {
    "name": "ecPortAddress",
    "oid": "1.3.6.1.4.1.43.10.9.5.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 6,
            "max": 6
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " The address information held in this entry of the database. The length and format of the string depends on the address type. For example a MAC address will be a 6 byte OCTET STRING, an IP address a 4 byte OCTET STRING."
  },
  "estStateChange": {
    "name": "estStateChange",
    "oid": "1.3.6.1.4.1.430.19",
    "class": "notificationtype",
    "description": " When the end-station table moves from the noChange to modified state this trap is generated. The trap is sent once on this transition and not subsequently until the 'Database State' is changed back to 'noChange' by a manager."
  },
  "estTableFull": {
    "name": "estTableFull",
    "oid": "1.3.6.1.4.1.430.20",
    "class": "notificationtype",
    "description": " When the end-station table becomes full this trap is generated."
  },
  "pollTable": {
    "name": "pollTable",
    "oid": "1.3.6.1.4.1.43.10.20.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "This table is used to provide remote device monitoring facilities. This table allows a list of network devices to be set up and polled regularly (or only once) by a variety of protocols. The table can be configured to inform the management station(s) of devices that are not responding to polls or that have started to respond after a period of silence. The minimum effort required to do a single poll is 1. In one packet, Write the address, rate=once-only(1) and RowStatus=CreateAndGo. 2. In the next packet, read the roundTripTime. The minimum effort required to monitor a device is 1. In one packet, Write the address, rate=every-30-seconds(1) and RowStatus=CreateAndGo. 2. Wait for traps to come in."
  },
  "pollTableEntry": {
    "name": "pollTableEntry",
    "oid": "1.3.6.1.4.1.43.10.20.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "pollIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "A table used to define device monitoring."
  },
  "pollIndex": {
    "name": "pollIndex",
    "oid": "1.3.6.1.4.1.43.10.20.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Unique identifier of a row in the Poll Table. The actual number of rows that can be created on any particular device depends on the memory and processing resources available at the time."
  },
  "pollAddress": {
    "name": "pollAddress",
    "oid": "1.3.6.1.4.1.43.10.20.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 50
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This DisplayString is the network address of the device to monitor. Typically this is an IP, MAC or IPX address. The following formats can be used. IP nnn.nnn.nnn.nnn - dotted format IPX AABBCCDD:AABBCCDDEEFF - network : node"
  },
  "pollProtocol": {
    "name": "pollProtocol",
    "oid": "1.3.6.1.4.1.43.10.20.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unknown": 1,
          "ip": 2,
          "ipx": 3,
          "learn": 4,
          "llc": 5
        }
      }
    },
    "default": {
      "default": {
        "value": "unknown",
        "format": "enum"
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This defines the protocol to use with which to monitor the device. Writing an address to the pollAddress field causes a default pollProtocol value to be setup. The default value is derived from the format of the address - four bytes means ip(2), and 10 bytes means ipx(3) addresses. If the requested protocol is not supported or is not compatible with the pollAddress, then an error is returned when an attempt is made to set the RowStatus to active or notInService."
  },
  "pollRate": {
    "name": "pollRate",
    "oid": "1.3.6.1.4.1.43.10.20.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "once-only": 1,
          "every-30-seconds": 2,
          "every-minute": 3,
          "every-5-minutes": 4,
          "every-30-minutes": 5,
          "every-hour": 6
        }
      }
    },
    "default": {
      "default": {
        "value": "once-only",
        "format": "enum"
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This defines how often a poll packet is sent to the device. If once-only(1) is chosen, then when the RowStatus is set to active, a single poll packet is to be sent. There are no re-transmissions and no traps are generated. The results of the operation can be read in the pollLastPollSent and pollRoundTripTime fields. When a reply to the poll is received, then the RowStatus is changed to notInService. For the other values, setting the RowStatus to active causes the device to be regularly polled. The operation of the poll can be monitored by reading the pollLastPollSent and pollRoundTripTime fields. After four un-successful polls a pollLostContact trap is generated. The next successful poll to the device causes a pollEstablishedContact trap to be generated. Changing RowStatus from the active state causes polling to stop - in particular changing RowStatus from active to notInService (and vice-versa) is a convenient way of stopping and starting the polls. A poll is said to have been un-successful, if no reply has been received by the time the device is due to be polled again - i.e. if the pollRoundTripTime is still zero. By convention, row 1 of the PollTable is only ever used for once-only(1) polls. The facilities of the RMON Alarm and RMON Event groups are used when regular polling is taking place. These groups perform the timing, threshold checking and trap generation."
  },
  "pollTargetType": {
    "name": "pollTargetType",
    "oid": "1.3.6.1.4.1.43.10.20.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "file-server": 2
        }
      }
    },
    "default": {
      "default": {
        "value": "other",
        "format": "enum"
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This field is provided solely for the purpose of the Network Management station to allow extra information to be stored about this poll table entry. This value is not used by the device."
  },
  "pollLastPollSent": {
    "name": "pollLastPollSent",
    "oid": "1.3.6.1.4.1.43.10.20.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Reading this variable returns the sysUpTime at which the last poll was sent to the device. A value of 0 means that no polls have been sent or that the poll could not be sent e.g. protocol error."
  },
  "pollRoundTripTime": {
    "name": "pollRoundTripTime",
    "oid": "1.3.6.1.4.1.43.10.20.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This is the round trip time in milli-seconds of the most recent poll to the pollAddress device. A value of 0 means that no reply has been received from the last poll. Round trip times of less than one hundred of a second are reported with the value of 10 milli-seconds."
  },
  "pollInformation": {
    "name": "pollInformation",
    "oid": "1.3.6.1.4.1.43.10.20.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 500
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "After each successful poll, this field is updated with some protocol specific information that was gleaned from the packet exchange. For the IPX protocol, this string contains the number of router hops made by the poll response packet. For the IP protocol, this string contains the value of Time-To-Live from the IP packet header."
  },
  "pollAlarmIndex": {
    "name": "pollAlarmIndex",
    "oid": "1.3.6.1.4.1.43.10.20.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This is a value of alarmIndex from the RMON Alarm Table. The alarm indicated is being used by the PollTable to provide the timing and trap generation facilities. If this value is 0, then no alarm is associated with this PollTable entry."
  },
  "pollOwner": {
    "name": "pollOwner",
    "oid": "1.3.6.1.4.1.43.10.20.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The RMON OwnerString conventions are used here to help control the multi-manager situations. This data type is used to model an administratively assigned name of the owner of a resource. This information is taken from the NVT ASCII character set. It is suggested that this name contain one or more of the following: IP address, management station name, network manager's name, location, or phone number. In some cases the agent itself will be the owner of an entry. In these cases, this string shall be set to a string starting with 'monitor'. SNMP access control is articulated entirely in terms of the contents of MIB views; access to a particular SNMP object instance depends only upon its presence or absence in a particular MIB view and never upon its value or the value of related object instances. Thus, objects of this type afford resolution of resource contention only among cooperating managers; they realize no access control function with respect to uncooperative parties."
  },
  "pollRowStatus": {
    "name": "pollRowStatus",
    "oid": "1.3.6.1.4.1.43.10.20.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "active": 1,
          "notInService": 2,
          "notReady": 3,
          "createAndGo": 4,
          "createAndWait": 5,
          "destroy": 6
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The SNMPv2 RowStatus convention. Notes: 1) Writing any data to a destroyed row, changes its state to notReady. 2) If the status is active or notInService and any of the configuration parameters are changed, then the polling stops and the status is set to notReady."
  },
  "pollNextFreeIndex": {
    "name": "pollNextFreeIndex",
    "oid": "1.3.6.1.4.1.43.10.20.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Indicates the the next value of pollIndex which can be used to create the next poll entry. This value is set to zero if there are no free rows in the table."
  },
  "pollTableSuccessTrap": {
    "name": "pollTableSuccessTrap",
    "oid": "1.3.6.1.4.1.430.61",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "pollAddress"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "pollProtocol"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "pollTargetType"
      }
    ],
    "description": "This trap is generated when the PollTable in the managed agent receives a reply to a poll after a sequence of four or more un-successful polls."
  },
  "pollTableFailedTrap": {
    "name": "pollTableFailedTrap",
    "oid": "1.3.6.1.4.1.430.62",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "pollAddress"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "pollProtocol"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "pollTargetType"
      }
    ],
    "description": "This trap is generated when the PollTable in the managed agent fails to receive a reply to four successive polls."
  },
  "trapTable": {
    "name": "trapTable",
    "oid": "1.3.6.1.4.1.43.10.10.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "deprecated",
    "description": "The snmp Trap database "
  },
  "trapEntry": {
    "name": "trapEntry",
    "oid": "1.3.6.1.4.1.43.10.10.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "trapDestination",
        "implied": 0
      }
    ],
    "status": "deprecated",
    "description": "A single snmp Trap entry"
  },
  "trapStatus": {
    "name": "trapStatus",
    "oid": "1.3.6.1.4.1.43.10.10.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "valid": 1,
          "invalid": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "deprecated",
    "description": "The Status of the Entry valid(1) or invalid(2), writing invalid(2) will delete the entry from the table"
  },
  "trapDestination": {
    "name": "trapDestination",
    "oid": "1.3.6.1.4.1.43.10.10.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "IpAddress",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "deprecated",
    "description": "The Destination IP Address"
  },
  "trapCommunity": {
    "name": "trapCommunity",
    "oid": "1.3.6.1.4.1.43.10.10.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 32
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "deprecated",
    "description": "SNMP Community to be used to send traps to destination trapDestination"
  },
  "trapSubject": {
    "name": "trapSubject",
    "oid": "1.3.6.1.4.1.43.10.10.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "deprecated",
    "description": "SNMP Subject Party used to generate traps to destination trapDestination"
  },
  "trapCategory": {
    "name": "trapCategory",
    "oid": "1.3.6.1.4.1.43.10.10.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "deprecated",
    "description": "32 Bit Mask indicating which Trap categories that the snmpTrapDestination is interested in. '00000001'h - High Priority Configuration Traps '00000002'h - Low Priority Configuration Traps '00000004'h - High Priority Security Traps '00000008'h - Low Priority Security Traps '00000010'h - Alarms & Polling Traps '00000020'h - Regular Heartbeat Traps '00000040'h - End Station Table Traps '00000080'h - reserved '00000100'h - Physical Entity Traps '00000200'h - Facility Traps '00000400'h - Service Related Traps A value of 0xFFFFFFFF enables all traps."
  },
  "trapThrottle": {
    "name": "trapThrottle",
    "oid": "1.3.6.1.4.1.43.10.10.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "deprecated",
    "description": "The Maximum rate at which that trapDestination is willing to receive traps, specified as the minimum interval in milliseconds between traps. A value of zero indicates that no trap throttling is required."
  },
  "snmpTrapTable": {
    "name": "snmpTrapTable",
    "oid": "1.3.6.1.4.1.43.10.10.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "This table can store the destination addresses of SNMP managers that wish to receive traps from this device."
  },
  "snmpTrapEntry": {
    "name": "snmpTrapEntry",
    "oid": "1.3.6.1.4.1.43.10.10.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "snmpTrapIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "This table can store the destination addresses of SNMP managers that wish to receive traps from this device."
  },
  "snmpTrapIndex": {
    "name": "snmpTrapIndex",
    "oid": "1.3.6.1.4.1.43.10.10.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This is the unique identifier for this row in the snmpTrapTable. When creating a new row, a manager can read the value of the snmpTrapNextFreeIndex object and (if non-zero) can use this value as the index of the new row to be created. The actual number of rows that can be created on any particular device depends on the memory and processing resources available at the time."
  },
  "snmpTrapDestination": {
    "name": "snmpTrapDestination",
    "oid": "1.3.6.1.4.1.43.10.10.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 50
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This DisplayString is the network address of the device to which SNMP traps will be sent. This is an IP or IPX address. The following formats can be used. IP nnn.nnn.nnn.nnn - dotted format IPX AABBCCDD:AABBCCDDEEFF - network : node Destination addresses must be unique within this table. An error is returned if an attempt is made to add a duplicate address."
  },
  "snmpTrapProtocol": {
    "name": "snmpTrapProtocol",
    "oid": "1.3.6.1.4.1.43.10.10.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unknown": 1,
          "ip": 2,
          "ipx": 3
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This defines the transport protocol to use when sending an SNMP trap. At present, this value is determined by the format/value of snmpTrapDestionation which is currently un-ambiguous and so this object is read-only."
  },
  "snmpTrapCommunity": {
    "name": "snmpTrapCommunity",
    "oid": "1.3.6.1.4.1.43.10.10.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 32
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "SNMP Community String to be used when sending Traps to this destination."
  },
  "snmpTrapCategory": {
    "name": "snmpTrapCategory",
    "oid": "1.3.6.1.4.1.43.10.10.2.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 4,
            "max": 4
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "32 Bit Mask indicating which Trap categories that the snmpTrapDestination is interested in. '00000001'h - High Priority Configuration Traps '00000002'h - Low Priority Configuration Traps '00000004'h - High Priority Security Traps '00000008'h - Low Priority Security Traps '00000010'h - Alarms & Polling Traps '00000020'h - Regular Heartbeat Traps '00000040'h - End Station Table Traps '00000080'h - reserved '00000100'h - Physical Entity Traps '00000200'h - Facility Traps '00000400'h - Service Related Traps A value of 0xFFFFFFFF enables all traps."
  },
  "snmpTrapThrottle": {
    "name": "snmpTrapThrottle",
    "oid": "1.3.6.1.4.1.43.10.10.2.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 99999
          }
        ]
      }
    },
    "default": {
      "default": {
        "value": 10,
        "format": "decimal"
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The maximum rate at which that snmpTrapDestination is willing to receive traps, specified as the minimum interval in milliseconds between traps. For example, a value of 2000 will limit traps sent to this destination to one trap every 2 seconds. A value of zero indicates that no trap throttling is required."
  },
  "snmpTrapRowStatus": {
    "name": "snmpTrapRowStatus",
    "oid": "1.3.6.1.4.1.43.10.10.2.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "active": 1,
          "notInService": 2,
          "notReady": 3,
          "createAndGo": 4,
          "createAndWait": 5,
          "destroy": 6
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The SNMPv2 RowStatus convention. Notes: Because this is such a simple table:- 1) Writing any data to a destroyed row, changes its state to active. 2) There is no notReady or notInService state. Each row is either active or destroyed."
  },
  "snmpTrapNextFreeIndex": {
    "name": "snmpTrapNextFreeIndex",
    "oid": "1.3.6.1.4.1.43.10.10.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Indicates the the next value of snmpTrapIndex which can be used to create a new trap destination entry. This value is zero if there are no free rows in the table."
  },
  "enclosure": {
    "name": "enclosure",
    "oid": "1.3.6.1.4.1.43.10.14.1",
    "class": "objectidentity"
  },
  "physicalConfig": {
    "name": "physicalConfig",
    "oid": "1.3.6.1.4.1.43.10.14.2",
    "class": "objectidentity"
  },
  "logicalConfig": {
    "name": "logicalConfig",
    "oid": "1.3.6.1.4.1.43.10.14.3",
    "class": "objectidentity"
  },
  "enclosureName": {
    "name": "enclosureName",
    "oid": "1.3.6.1.4.1.43.10.14.1.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 32
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " A text string describing the chassis that this MIB describes."
  },
  "enclosureObjId": {
    "name": "enclosureObjId",
    "oid": "1.3.6.1.4.1.43.10.14.1.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " An OBJECT IDENTIFIER specific to this type of this chassis."
  },
  "enclosureHardwareVers": {
    "name": "enclosureHardwareVers",
    "oid": "1.3.6.1.4.1.43.10.14.1.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 32
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " The hardware version number of the chassis. This is a string which includes the major and minor revision levels of the hardware."
  },
  "phyConfigTable": {
    "name": "phyConfigTable",
    "oid": "1.3.6.1.4.1.43.10.14.2.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": " This table specifies the current physical configuration of the chassis. This table defines a chassis to contain a number of physical entities. Each such entity has some position that distinguishes it from other potentially similar entities. Examples of entities are cards, power supplies etc. Note that this table only contains information on a location that is currently occupied by some entity."
  },
  "phyConfigEntry": {
    "name": "phyConfigEntry",
    "oid": "1.3.6.1.4.1.43.10.14.2.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "phyLocationType",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "phyLocation",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": " This is one entry in the Physical Configuration Table. It is indexed by physical location."
  },
  "phyLocationType": {
    "name": "phyLocationType",
    "oid": "1.3.6.1.4.1.43.10.14.2.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "module": 1,
          "power-supply": 2,
          "fan": 3,
          "backplane": 4
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " A chassis contains a number of physical entities such as power supplies and cards. Each physical entity resides at some location. A chassis can contain a number of types of location. Each type of location is specialised to a different purpose. Currently there are four types of location defined. This list can be extended for a particular application: modular-slot: A location of this type can take a number of different entities. They are general purpose and are often the purpose of the device. power-supply-bay: Locations of this type can only contain an instance of a power supply. fan-position: This location can only hold a fan. backplane-position: A position of this type can only contain a backplane."
  },
  "phyLocation": {
    "name": "phyLocation",
    "oid": "1.3.6.1.4.1.43.10.14.2.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " A chassis contains a number of physical entities such as power supplies and cards. Each physical entity resides at some location. Some locations are known and have special purposes, others are general and can contain one of a number of different physical entities. The location type defines a 'kind' of location. Within each category there may be one or more instances of that kind of location. For example in a 10 slot modular hub there are potentially 10 instances of card locations occupied at any time."
  },
  "phySysObjId": {
    "name": "phySysObjId",
    "oid": "1.3.6.1.4.1.43.10.14.2.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OBJECT IDENTIFIER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the OBJECT ID of the entity at this location."
  },
  "phyServiceType": {
    "name": "phyServiceType",
    "oid": "1.3.6.1.4.1.43.10.14.2.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "dumb8023Repeater": 1,
          "ieee8023Repeater": 2,
          "ieee8025MauModule": 3,
          "ieee8025Ringbuilder": 4,
          "fddiConcentrator": 5,
          "managementModule": 6,
          "standardBackplane": 12,
          "extendedBackplane": 13,
          "displayPanel": 14,
          "fan": 17,
          "powerSupply": 18,
          "standardBridge": 19,
          "bridgePerPort": 20,
          "terminalServer": 21,
          "remoteBridge": 22,
          "fddiMIC": 23,
          "notAllocated": 24,
          "fddiLinkSwitch": 25
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object identifies what kind of entity is present at this location. The value represents a category of entity, for example '802.3 Repeater' or 'power supply'. It does not identify the specific kind of entity within that category, for this refer to the entity type."
  },
  "phyEntityType": {
    "name": "phyEntityType",
    "oid": "1.3.6.1.4.1.43.10.14.2.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is read in conjunction with service type to uniquely identify the specific physical entity. For example the service type may indicate '802.3 Repeater' while the entity type then says within this category this card is a 12 port UTP card. Below are the values currently allocated: smart8023Repeater 1: 4 Port RLC Coax (ECS Variant) 2: 8 Port UTP (ECS Variant) 3: 4 Port Fibre (ECS Variant) 4: 8 Port STP (ECS Variant) 6: 4 Port Fanout (ECS Variant) 7: 12 Port UTP (ECS Variant) 8: 12 Port STP (ECS Variant) 9: 12 Port Secure UTP (ECS Variant) 10: 12 Port Secure STP (ECS Variant) 11: 6 Port Fibre (ECS Variant) 12: 4 Port Coax (ECS Variant) 32: 6 Port Resilient Fibre (ECS Variant) 65: 12 Port UTP, RJ45 Connector 66: 12 Port UTP, RJ45 Connector (Expandable) 67: 13 Port UTP, Telco + Module 68: 24 Port UTP, 2xTelco 69: 6 Port fibre, ST Connector (Expandable) 70: 6 Port fibre, SMA Connector (Expandable) 71: 6 Port Coax (Expandable) 72: 4 Port Fanout ieee8025MauModule 1: 12 Port UTP, RJ45 Connector 2: 12 Port STP, RJ45 Connector 3: 12 Port UTP/STP Advanced MAU ieee8025Ringbuilder 1: Ring Builder. STP Rin/Rout. RJ45 Connectors 2: Ring Builder. Fiber (ST) and STP Rin/Rout. fddiConcentrator 1: FDDI RingBuilder managementModule 1: Standard Management Module 2: Enhanced Management Module standardBackplane 1: Standard Backplane extendedBackplane 1: High Speed Backplane displayPanel 1: First release front panel fan 1: Standard Fan Tray powerSupply 2: Standard Power Supply standardBridge 1: 2 Port Local Token Ring Bridge 2: 4 Port Local Ethernet Bridge fddiMIC 1: FDDI 4 Port MIC 2: FDDI 6 Port UTP/STP fddiLinkSwitch 1: LinkSwitch "
  },
  "phyHwVersion": {
    "name": "phyHwVersion",
    "oid": "1.3.6.1.4.1.43.10.14.2.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This string identifies the major and minor revision level of the entity at this location."
  },
  "phySwVersion": {
    "name": "phySwVersion",
    "oid": "1.3.6.1.4.1.43.10.14.2.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " If the entity at this location contains a processor there will be some programme code present. This parameter specifies the version number of that code. The version number is a string. If an entity has no software then the value of this parameter will be 'None'."
  },
  "phyServiceId": {
    "name": "phyServiceId",
    "oid": "1.3.6.1.4.1.43.10.14.2.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Every chassis is considered as a collection of services. Each service is implemented using the resources of one or more physical entities within the rack. For example a repeater may be implemented using 2x12 port UTP cards. A power supply by 3 modular power supply entities. The service table contains an entry for each service present in the MSH at any point in time. This object provides a valid index into the service table. By reading the service table and specifying the value of this object one can determine to which service this card belongs."
  },
  "phyEntityName": {
    "name": "phyEntityName",
    "oid": "1.3.6.1.4.1.43.10.14.2.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 32
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This item is a text string describing the entity at this location."
  },
  "phyPowerReq": {
    "name": "phyPowerReq",
    "oid": "1.3.6.1.4.1.43.10.14.2.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This item takes the +5V and +12V current requirements of the entity and uses the values to obtain a power consumption requirement for the entity. A power supply will specify a negative value indicating a source of power. The value is in Watts. Note that the value returned from this object is the simple arithmetic addition of the all power rail requirements. Note that a power supply may be overloaded even if this value is within the spec of the power supplies. Such a situation can occur if the power supplies can source, say X5 Watts at 5V and X12 Watts at 12V. The total power by this definition is X5 + X12. Now a card could draw Y5 and Y12 from the two supplies. If Y12 is X12+1 and Y5 is X5-2, total supply exceeds total consumption but the 12V rail is overloaded!"
  },
  "phyNumberOfPorts": {
    "name": "phyNumberOfPorts",
    "oid": "1.3.6.1.4.1.43.10.14.2.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object contains the number of physical, external ports this entity is known to have. Note this value only applies to entities that communicate with the management card. For other cards a value of -1 indicates 'unknown'. A value of zero indicates that this entity has no external ports."
  },
  "phyLampTest": {
    "name": "phyLampTest",
    "oid": "1.3.6.1.4.1.43.10.14.2.1.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "test-off": 1,
          "test-on": 2
        }
      }
    },
    "maxaccess": "write-only",
    "status": "mandatory",
    "description": " This object allows a visual test to be performed on entities contained in the rack. The state will be recorded against the card even if that entity does not actually do anything different in this state."
  },
  "phyEntityState": {
    "name": "phyEntityState",
    "oid": "1.3.6.1.4.1.43.10.14.2.1.1.13",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unknown": 1,
          "initialising": 2,
          "operational": 3,
          "failure": 4
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Each entity in the chassis has a basic state independent of what function that entity performs within the chassis. If the agent cannot determine the state of a particular entity then the value of this object is 'unknown'."
  },
  "phyAction": {
    "name": "phyAction",
    "oid": "1.3.6.1.4.1.43.10.14.2.1.1.14",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "reset": 1
        }
      }
    },
    "maxaccess": "write-only",
    "status": "mandatory",
    "description": " This parameter allows a number of actions to be defined for cards in a chassis. Currently only one action is defined: reset. Invoking this operation will reset the specified card."
  },
  "phyLimits": {
    "name": "phyLimits",
    "oid": "1.3.6.1.4.1.43.10.14.2.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": " The physical config table describes the chassis as a number of physical entities, each of which has some physical location. This table defines the number of physical locations of each type that actually exists within an instance of the chassis."
  },
  "phyLimitEntry": {
    "name": "phyLimitEntry",
    "oid": "1.3.6.1.4.1.43.10.14.2.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "phyLimLocationType",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": " This entry provides information on the number of physical locations present in this chassis for the specified type of location. Practically this is interpreted as the 'number of power supplies' or 'number of slots' etc."
  },
  "phyLimLocationType": {
    "name": "phyLimLocationType",
    "oid": "1.3.6.1.4.1.43.10.14.2.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "module": 1,
          "power-supply": 2,
          "fan": 3,
          "backplane": 4
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " A chassis contains a number of physical entities such as power supplies and cards. Each physical entity resides at some location. A chassis can contain a number of types of location. For each particular type of location there is a limit to the number that may be present in the chassis."
  },
  "phyLimLimit": {
    "name": "phyLimLimit",
    "oid": "1.3.6.1.4.1.43.10.14.2.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " A chassis contains a number of physical entities such as power supplies and cards. Each physical entity resides at some location. A chassis can contain a number of types of location. For each particular type of location there is a limit to the number that may be present in the chassis. This object identifies the actual number of locations in this chassis that exist for the specified type. Practically this is interpreted as the 'number of power supplies' or 'number of slots' etc."
  },
  "frontPanelDisplayMessage": {
    "name": "frontPanelDisplayMessage",
    "oid": "1.3.6.1.4.1.43.10.14.2.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": " This is a string which may be user-defined for display on the lower line of the front panel display."
  },
  "serviceTable": {
    "name": "serviceTable",
    "oid": "1.3.6.1.4.1.43.10.14.3.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": " An MSH chassis is logically comprised of a number of services, e.g. a repeater, bridge etc. Each service is implemented by one or more physical entities. This table contains an entry for each service, providing a name for that service type. Note that every entry in the physical configuration table MUST belong to a service. For example there may NOT be an entry in the phyConfigTable for which the value of phyServiceId does not provide an index into this table of an existent row."
  },
  "serviceEntry": {
    "name": "serviceEntry",
    "oid": "1.3.6.1.4.1.43.10.14.3.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "serviceId",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": " This is an entry in the Service Table which is indexed by the Service Index for that service."
  },
  "serviceId": {
    "name": "serviceId",
    "oid": "1.3.6.1.4.1.43.10.14.3.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is a number representing the service in the rack. This id can be used to reference the service elsewhere in the MIB. There are several conventions used to allocate a service Id. Firstly if a card forms a service by itself, for example a bridge card, which uses none of the backplane 802.3 or token ring lines, then the service id is the same as the slot position of that card within the rack. If a service is constructed using one of the backplane 802.3 facilities then the service id is 101, 102 or 103 for the three backplane 802.3 paths. If a service is a token ring fragment then the service id for that service is 200 plus the ring fragment id. For example if Ring Builder builder builds a ring from MAU cards with ring fragment id 7, the corresponding service will be 207."
  },
  "serviceName": {
    "name": "serviceName",
    "oid": "1.3.6.1.4.1.43.10.14.3.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 32
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is a text string describing the service at a particular Service Index."
  },
  "serviceReset": {
    "name": "serviceReset",
    "oid": "1.3.6.1.4.1.43.10.14.3.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "reset": 1
        }
      }
    },
    "maxaccess": "write-only",
    "status": "mandatory",
    "description": " This action will reset all the cards that belong to this service."
  },
  "addressTable": {
    "name": "addressTable",
    "oid": "1.3.6.1.4.1.43.10.14.3.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": " An MSH chassis contains a number of services. Each service is implemented by one or more cards. A number of services are 'intelligent' in that they communicate with the management station through their own communications stack. This table allows a manager to determine the addresses relevant to a particular service. The table will only have entries present for cards which have management addresses. The table is accessed by specifying a service Id and a sub-index value to distinguish between potentially multiple addresses for a service. NOTE: This table includes entries for the management card itself. The management card entries contain the physical address of the currently active MAC and the IP address of the SNMP stack."
  },
  "addressTableEntry": {
    "name": "addressTableEntry",
    "oid": "1.3.6.1.4.1.43.10.14.3.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mgmtServiceId",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mgmtSubIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "text"
  },
  "mgmtServiceId": {
    "name": "mgmtServiceId",
    "oid": "1.3.6.1.4.1.43.10.14.3.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Identifies the service for which this row provides address information."
  },
  "mgmtSubIndex": {
    "name": "mgmtSubIndex",
    "oid": "1.3.6.1.4.1.43.10.14.3.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Used to distinguish between multiple addresses for a service in the chassis."
  },
  "mgmtAddressType": {
    "name": "mgmtAddressType",
    "oid": "1.3.6.1.4.1.43.10.14.3.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "ieee8023address": 1,
          "ieee8025address": 2,
          "ipaddress": 3,
          "slipaddress": 4
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " A card in the chassis can have several addresses, either because of multiple stacks and/or for each relevant level in the stack(s). Each relevant address is represented in this table as a display string and a type. Note that ieee8023Address and ieee8025Address types differ from each other in the bit ordering of the physical address."
  },
  "mgmtAddress": {
    "name": "mgmtAddress",
    "oid": "1.3.6.1.4.1.43.10.14.3.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " The address as block of bytes. An IP address would occupy 4 bytes and a MAC address 6 bytes."
  },
  "facilityTable": {
    "name": "facilityTable",
    "oid": "1.3.6.1.4.1.43.10.14.3.3",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": " The MSH chassis can simultaneously maintain a number of different sub-networks. Examples of these are the independent repeaters and a number of Token Rings. These fundamental services are referred to as facilities. Each card in the chassis can either provide or be connected to one or more of these facilities. This table provides a means of determining and changing the facilities used by a particular card. The number of entries per card depends on the type of card. For example an 802.3 repeater card can be expected to have a single entry while an 'n' port bridge would have 'n'. The number of entries for a particular card is fixed (can't insert into or delete from this table)."
  },
  "facilityEntry": {
    "name": "facilityEntry",
    "oid": "1.3.6.1.4.1.43.10.14.3.3.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "fcSlotNumber",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "fcFacilityIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": " This is an entry in the Facility Table for a particular slot. There may be more than one entry per slot, each entry being distinguished by FacilityIndex."
  },
  "fcSlotNumber": {
    "name": "fcSlotNumber",
    "oid": "1.3.6.1.4.1.43.10.14.3.3.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Allows access to the table for a particular card. One can use this in conjunction with get-next to read all the facility associations for a particular card."
  },
  "fcFacilityIndex": {
    "name": "fcFacilityIndex",
    "oid": "1.3.6.1.4.1.43.10.14.3.3.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Each card may have multiple entries in the Facility Table. This object provides the means of uniquely identifying each of these entries. Note: It is a convention that the value of this index maps as closely as possible to the physical configuration of the entity represented. For example if a bridge has ports numbered 1, 2, 3 and 4 and all are switchable then this table will have four entries for that entity indexed 1, 2, 3 and 4. Entry with index 1 represents port 1 etc. Similarly if a bridge had two ports numbered, for some reason, 234 and 456 then these values would be used as the index to this table."
  },
  "fcType": {
    "name": "fcType",
    "oid": "1.3.6.1.4.1.43.10.14.3.3.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "ieee8023": 1,
          "ieee8025": 2,
          "fddi": 3,
          "ieee8025rb": 4,
          "ieee8023v3": 5,
          "atm": 6,
          "smds": 7
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Each entry in the facility table represents an association between a physical module and one of the facilities provided by the particular configuration of this chassis. There are a number of different types of facilities the chassis can provide. This object identifies the particular type of the facility represented by this table entry. Note that the list of types in this object may be extended in future."
  },
  "fcConnection": {
    "name": "fcConnection",
    "oid": "1.3.6.1.4.1.43.10.14.3.3.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": " This object identifies the current assignment of this attachment point in this card. The legal values of this object depends on the type card. Writing an illegal value to this object will cause an error. Generally the table following identifies the possible values, depending on type. Each card type will support a subset of these values. Type Possible Values IEEE8023 0 Isolated (i.e. this interface is not connected to anything). 1,2,3 One of the backplane 802.3 networks. IEEE8025 0 Isolated 1..0x7f A ring number. This must match the value of one of he ring builder cards or the request will be rejected. FDDI Unknown at the moment. Probably similar to IEEE8025 Note: Values greater than 0x7f are reserved to be private values for a particular card. The meaning of these values depend on the card type. A possible use of this is in a multiport 802.3 bridge. Consider such a bridge being capable of bridging between three sources and having two external 802.3 connections. Such a bridge would have three entries in the facility table, one for each bridge source. Each entry could be assigned to one of the backplane 802.3 paths or to one of the two external connections. In this case the possible values for each table entry would be: 0x00 : Not used (isolated) 0x01, 0x02, 0x03 : One of the backplanes 0x81, 0x82 : One of the external connections. The MSH agent will not allow two different entries in this table for the same card to be assigned to the same facility!"
  },
  "phyEntityInserted": {
    "name": "phyEntityInserted",
    "oid": "1.3.6.1.4.1.430.27",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "phyServiceType"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "phyEntityType"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "phyServiceId"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "phyNumberOfPorts"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "phyEntityName"
      }
    ],
    "description": " This trap is sent when a new entity is detected in the chassis. The entity is identified both by its location in the chassis and it's type information. The display string is included to make event descriptions more understandable. The phyServiceId indicates to which service the new entity belongs or implements. If the entity belongs to more than one service then this parameter indicates one of the services."
  },
  "phyEntityRemoved": {
    "name": "phyEntityRemoved",
    "oid": "1.3.6.1.4.1.430.28",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "phyServiceId"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "phyEntityName"
      }
    ],
    "description": " This trap is sent when an entity is removed. The qualifier information on the variables identify the location of the entity that has been removed while the entity name is the textual description of the card that was removed."
  },
  "phyFacilityChanged": {
    "name": "phyFacilityChanged",
    "oid": "1.3.6.1.4.1.430.29",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "phyServiceId"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "fcType"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "fcConnection"
      }
    ],
    "description": " This trap is sent when the facility table is changed. This trap is only send when the change is made as the result of a local management request. The trap includes information about the type of the connection changed and the new connection value."
  },
  "serviceEntityAdded": {
    "name": "serviceEntityAdded",
    "oid": "1.3.6.1.4.1.430.30",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "phyServiceId"
      }
    ],
    "description": " This trap is sent when a card is added to a service. This trap is always sent, regardless of how the card addition occurred. There are two situations in which a card is added to a service. The first is where a new card is inserted and is attached to a service. The second is where an existing card is removed from one service and added to another. Note that the transmission of this trap may imply the creation of a new service."
  },
  "serviceEntityRemoved": {
    "name": "serviceEntityRemoved",
    "oid": "1.3.6.1.4.1.430.31",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "phyServiceId"
      }
    ],
    "description": " This trap is sent when an entity is removed from a service. This trap is always sent, regardless of how the card removal occurred. There are two situations in which a card is removed from a service. The first is where a card is removed from the chassis. The second is where an existing card is removed from one service and added to another. The service id in the variables list indicates the service to which to card did belong. Note that the transmission of this trap may imply that the service to which it belongs no longer exists. This is the case where the card was the only current member of the service."
  },
  "physicalStateChange": {
    "name": "physicalStateChange",
    "oid": "1.3.6.1.4.1.430.32",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "phyServiceId"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "phyEntityState"
      }
    ],
    "description": " A physical entity in the rack has changed state. This can be the result of a failure or recovery. The variables accompanying this trap identify the entity which has changed state."
  },
  "psuCapacityExceeded": {
    "name": "psuCapacityExceeded",
    "oid": "1.3.6.1.4.1.430.33",
    "class": "notificationtype",
    "description": " The combination of the power requirements of all the entities in the chassis has been calculated to exceed the power capacity of the power supplies present in the chassis."
  },
  "misc": {
    "name": "misc",
    "oid": "1.3.6.1.4.1.43.1.8.4.1",
    "class": "objectidentity"
  },
  "mshFault": {
    "name": "mshFault",
    "oid": "1.3.6.1.4.1.43.1.8.4.2",
    "class": "objectidentity"
  },
  "tempSensorOutput": {
    "name": "tempSensorOutput",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "ok": 1,
          "warm": 2,
          "danger": 3
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Mounted on the Management card is a temperature sensing device. This device provides three output levels : OK, WARM and DANGER."
  },
  "statusInputTable": {
    "name": "statusInputTable",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": " This table provides information about and allows configuration of the 4 general purpose inputs provided by the MSH management card. "
  },
  "statusInputTableEntry": {
    "name": "statusInputTableEntry",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "statusInputIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": " This entry describes one of the status inputs provided by the MSH management card."
  },
  "statusInputIndex": {
    "name": "statusInputIndex",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Identify one of the status inputs provided by the MSH card."
  },
  "statusInputState": {
    "name": "statusInputState",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "open": 1,
          "closed": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Each of the MSH management general purpose input lines is actually a pair of wires. In order to use one of the lines the two wires of a particular pair must be connected to some kind of external switch. The switch could for example be a relay or micro-switch. If the two wires of a pair are shorted together by closing the switch the value of this object will be 'closed'. If the switch is open then the value of this object is 'open'. The MSH can be configured to generate an SNMP trap if the state of this object changes."
  },
  "statusTrapEnable": {
    "name": "statusTrapEnable",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enable": 1,
          "disable": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": " By setting the value of this object to enable, the MSH will monitor the value of statusInputState for changes. If a change from open to close or from close to open occurs then an SNMP trap is generated. Note that the value of the object is de-bounced by the agent to prevent multiple closures of a 'bouncing' relay causing multiple SNMP traps!"
  },
  "statusName": {
    "name": "statusName",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": " This is a writable string associated with one of the status inputs. By default the string will initialise to 'Status Input #x' where x is 1, 2, 3 or 4. The user can choose to write a more descriptive string to this object that better describes the use of a particular input. For example if input line 2 is connected to a switch which changes state when a cabinet is opened or closed then the statusName may be set to 'Door Status ' The value of this object is sent to attached management stations in the state change trap."
  },
  "chassisMgmtMACTable": {
    "name": "chassisMgmtMACTable",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.3",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": " The chassis management card contains an 802.3 MAC and physical layer that can be used for management traffic. In some situations this interface may be inappropriate. For example in a Token Ring only environment it is appropriate to transmit management traffic directly onto the token ring network. The MSH chassis provides the ability for the management card to use either its own MAC or to share the MAC provided by another card in the chassis. There may be a number of MACs available at any particular time from which the management card can choose. This table provides a summary of the available MACs and allows the manager to select one of those for current use. Note: The table also includes the MAC actually present on the management card!"
  },
  "chassisMgmtMACEntry": {
    "name": "chassisMgmtMACEntry",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.3.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "macSlotNumber",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "macIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": " This entry describes the abilities and the state of one of the MACs available for management use in the chassis."
  },
  "macSlotNumber": {
    "name": "macSlotNumber",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.3.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Index into the table. This is identifies the card on which the MAC that this conceptual row describes."
  },
  "macIndex": {
    "name": "macIndex",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.3.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Index into the table. This object distinguishes the MAC described by this row in the conceptual table from the potentially many MACs supported by this card."
  },
  "macBroadcastAvailable": {
    "name": "macBroadcastAvailable",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.3.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "true": 1,
          "false": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is an informational field. It describes the capability of the MAC represented by this conceptual row to receive and transmit a 'broadcast' packet. Note that the shared MAC is currently used to transmit and receive SNMP frames. If an attempt is made to use a MAC with insufficient capability that request will be rejected."
  },
  "macLSAPFiltering": {
    "name": "macLSAPFiltering",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.3.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "true": 1,
          "false": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is an informational field. It describes the capability of the MAC represented by this conceptual row to directly filter packets based on the contents of the LSAP field locally to that card. This can improve performance but is not required for protocol operation. The management card will automatically make best use of this feature if present."
  },
  "macTypeFiltering": {
    "name": "macTypeFiltering",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.3.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is an informational field. It describes the capability of the MAC represented by this conceptual row to directly filter packets based on type field locally to that card. The type field is held in a SNAP header in IEEE networks or in the Ethernet type field. This can improve performance but is not required for protocol operation. The management card will automatically make best use of this feature if present."
  },
  "macMaxPDUsize": {
    "name": "macMaxPDUsize",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.3.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is an informational field. It indicates the maximum number of data octets that can be transmitted or received using the shared MAC. When used for SNMP it is likely that a larger PDU size will increase the performance of some management operations. Note that a minimum size of 474 octets is required for SNMPv1"
  },
  "macPhyAddress": {
    "name": "macPhyAddress",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.3.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The physical MAC address of this specific MAC."
  },
  "macStatus": {
    "name": "macStatus",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.3.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "available": 1,
          "unavailable": 2,
          "snmpMac": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": " This object is used to enable or disable a shared MAC for SNMP protocol usage. Note that if a shared MAC has insufficient capabilities to run the SNMP stack then an attempt to set the status to active will fail. This object has three values: available, unavailable and snmpMac. The meaning of each of these is: available: This MAC is currently available to run SNMP on behalf of the management card. unavailable: MAC cannot be selected to carry SNMP on behalf of the management card. The MAC may be in this state for a number of reasons. Examples are insufficient resource on the card, shared MAC already in use for something other than SNMP. snmpMac: This MAC is currently being used as the physical interface for management card SNMP traffic. To select a MAC write snmpMac to this object. If the MAC is suitable and available then the current snmpMac will become unavailable and the selected MAC will become available."
  },
  "chassisLedTable": {
    "name": "chassisLedTable",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.4",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "This table contains configuration information for each of the card specific LEDs on the front panel module. There is one LED for each card location."
  },
  "chassisLedEntry": {
    "name": "chassisLedEntry",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.4.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "chassisSlotNumber",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": " This entry describes the abilities and the state of one of the MACs available for management use in the chassis."
  },
  "chassisSlotNumber": {
    "name": "chassisSlotNumber",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.4.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Identifies which LED this row describes. "
  },
  "chassisLedColour": {
    "name": "chassisLedColour",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.4.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "off": 1,
          "green": 2,
          "red": 3
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Read the current colour of the LED. This is intended for use by FullView type applications."
  },
  "chassisAttentionState": {
    "name": "chassisAttentionState",
    "oid": "1.3.6.1.4.1.43.1.8.4.1.4.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "ok": 1,
          "attention": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Writing 'attention' to this object will cause the LED above that card to become RED. This is intended to be used to aid maintenance of a large system."
  },
  "mshFaultModifiedFlag": {
    "name": "mshFaultModifiedFlag",
    "oid": "1.3.6.1.4.1.43.1.8.4.2.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "clean-read": 1,
          "modified": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "deprecated",
    "description": "In order to ensure a clean read of the Fault table this flag should be set to clean_read when commencing to read the table and should be examined after reading the entire table. If still set to clean_read then the table read is okay, if not the table should be re-read as it has been modified during the read process."
  },
  "mshFaultTable": {
    "name": "mshFaultTable",
    "oid": "1.3.6.1.4.1.43.1.8.4.2.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "deprecated",
    "description": "The Fault Table."
  },
  "mshFaultEntry": {
    "name": "mshFaultEntry",
    "oid": "1.3.6.1.4.1.43.1.8.4.2.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mshFaultIndex",
        "implied": 0
      }
    ],
    "status": "deprecated",
    "description": "Information relating to a single fault."
  },
  "mshFaultIndex": {
    "name": "mshFaultIndex",
    "oid": "1.3.6.1.4.1.43.1.8.4.2.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "deprecated",
    "description": "The index into the Fault table. The initial read from the table should be read as the next, from an index of 0; subsequent reads should read the next from the index returned by the previous read."
  },
  "mshFaultErrorNumber": {
    "name": "mshFaultErrorNumber",
    "oid": "1.3.6.1.4.1.43.1.8.4.2.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "deprecated",
    "description": "This error number for this fault log entry."
  },
  "mshFaultTimeStamp": {
    "name": "mshFaultTimeStamp",
    "oid": "1.3.6.1.4.1.43.1.8.4.2.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "deprecated",
    "description": "The time since startup, in milliseconds, when the fault occurred."
  },
  "mshFaultRestartCount": {
    "name": "mshFaultRestartCount",
    "oid": "1.3.6.1.4.1.43.1.8.4.2.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "deprecated",
    "description": "The number of restarts at time of fault."
  },
  "tempStateChange": {
    "name": "tempStateChange",
    "oid": "1.3.6.1.4.1.430.34",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "tempSensorOutput"
      }
    ],
    "description": " Mounted on the Management card is a temperature sensing device. This device provides three output levels : OK, WARM and DANGER. DANGER causes a trap to be generated."
  },
  "statusInputStateChange": {
    "name": "statusInputStateChange",
    "oid": "1.3.6.1.4.1.430.35",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "statusInputState"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "statusName"
      }
    ],
    "description": " Sent when the state of one of the management card status inputs changes from open to close or vice-versa and the value of statusTrapEnable is 'enable'"
  },
  "novell": {
    "name": "novell",
    "oid": "1.3.6.1.4.1.23",
    "class": "objectidentity"
  },
  "mibDoc": {
    "name": "mibDoc",
    "oid": "1.3.6.1.4.1.23.2",
    "class": "objectidentity"
  },
  "ipx": {
    "name": "ipx",
    "oid": "1.3.6.1.4.1.23.2.5",
    "class": "objectidentity"
  },
  "ipxSystem": {
    "name": "ipxSystem",
    "oid": "1.3.6.1.4.1.23.2.5.1",
    "class": "objectidentity"
  },
  "ipxCircuit": {
    "name": "ipxCircuit",
    "oid": "1.3.6.1.4.1.23.2.5.2",
    "class": "objectidentity"
  },
  "ipxForwarding": {
    "name": "ipxForwarding",
    "oid": "1.3.6.1.4.1.23.2.5.3",
    "class": "objectidentity"
  },
  "ipxServices": {
    "name": "ipxServices",
    "oid": "1.3.6.1.4.1.23.2.5.4",
    "class": "objectidentity"
  },
  "ipxTraps": {
    "name": "ipxTraps",
    "oid": "1.3.6.1.4.1.23.2.5.5",
    "class": "objectidentity"
  },
  "ipxBasicSysTable": {
    "name": "ipxBasicSysTable",
    "oid": "1.3.6.1.4.1.23.2.5.1.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "The IPX System Table - basic information."
  },
  "ipxBasicSysEntry": {
    "name": "ipxBasicSysEntry",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "ipxBasicSysInstance",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "Each entry corresponds to one instance of IPX running on the system."
  },
  "ipxBasicSysInstance": {
    "name": "ipxBasicSysInstance",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The unique identifier of the instance of IPX to which this row corresponds. This value may be written only when creating a new entry in the table."
  },
  "ipxBasicSysExistState": {
    "name": "ipxBasicSysExistState",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "off": 1,
          "on": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The validity of this entry in the IPX system table. Setting this field to off indicates that this entry may be deleted from the system table at the IPX implementation's discretion."
  },
  "ipxBasicSysNetNumber": {
    "name": "ipxBasicSysNetNumber",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 4,
            "max": 4
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The network number portion of the IPX address of this system."
  },
  "ipxBasicSysNode": {
    "name": "ipxBasicSysNode",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 6,
            "max": 6
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The node number portion of the IPX address of this system."
  },
  "ipxBasicSysName": {
    "name": "ipxBasicSysName",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 48
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The readable name for this system."
  },
  "ipxBasicSysInReceives": {
    "name": "ipxBasicSysInReceives",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of IPX packets received, including those received in error."
  },
  "ipxBasicSysInHdrErrors": {
    "name": "ipxBasicSysInHdrErrors",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of IPX packets discarded due to errors in their headers, including any IPX packets with a size less than the minimum of 30 bytes."
  },
  "ipxBasicSysInUnknownSockets": {
    "name": "ipxBasicSysInUnknownSockets",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of IPX packets discarded because the destination socket was not open."
  },
  "ipxBasicSysInDiscards": {
    "name": "ipxBasicSysInDiscards",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of IPX packets received but discarded due to reasons other than those accounted for by ipxBasicSysInHdrErrors, ipxBasicSysInUnknownSockets, ipxAdvSysInDiscards, and ipxAdvSysInCompressDiscards."
  },
  "ipxBasicSysInBadChecksums": {
    "name": "ipxBasicSysInBadChecksums",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of IPX packets received with incorrect checksums."
  },
  "ipxBasicSysInDelivers": {
    "name": "ipxBasicSysInDelivers",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of IPX packets delivered locally, including packets from local applications."
  },
  "ipxBasicSysNoRoutes": {
    "name": "ipxBasicSysNoRoutes",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of times no route to a destination was found."
  },
  "ipxBasicSysOutRequests": {
    "name": "ipxBasicSysOutRequests",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.13",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of IPX packets supplied locally for transmission, not including any packets counted in ipxAdvForwPackets."
  },
  "ipxBasicSysOutMalformedRequests": {
    "name": "ipxBasicSysOutMalformedRequests",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.14",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of IPX packets supplied locally that contained errors in their structure."
  },
  "ipxBasicSysOutDiscards": {
    "name": "ipxBasicSysOutDiscards",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.15",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of outgoing IPX packets discarded due to reasons other than those accounted for in ipxBasicSysOutMalformedDiscards, ipxAdvSysOutFiltered, and ipxAdvSysOutCompressDiscards."
  },
  "ipxBasicSysOutPackets": {
    "name": "ipxBasicSysOutPackets",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.16",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The total number of IPX packets transmitted."
  },
  "ipxBasicSysConfigSockets": {
    "name": "ipxBasicSysConfigSockets",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.17",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The configured maximum number of IPX sockets that may be open at one time."
  },
  "ipxBasicSysOpenSocketFails": {
    "name": "ipxBasicSysOpenSocketFails",
    "oid": "1.3.6.1.4.1.23.2.5.1.1.1.18",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of IPX socket open calls which failed."
  },
  "ipxAdvSysTable": {
    "name": "ipxAdvSysTable",
    "oid": "1.3.6.1.4.1.23.2.5.1.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "The IPX System Table - advanced information."
  },
  "ipxAdvSysEntry": {
    "name": "ipxAdvSysEntry",
    "oid": "1.3.6.1.4.1.23.2.5.1.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "ipxAdvSysInstance",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "Each entry corresponds to one instance of IPX running on the system."
  },
  "ipxAdvSysInstance": {
    "name": "ipxAdvSysInstance",
    "oid": "1.3.6.1.4.1.23.2.5.1.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The unique identifer of the instance of IPX to which this row corresponds. This value may be written only when creating a new entry in the table."
  },
  "ipxAdvSysMaxPathSplits": {
    "name": "ipxAdvSysMaxPathSplits",
    "oid": "1.3.6.1.4.1.23.2.5.1.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 32
          }
        ]
      }
    },
    "default": {
      "default": {
        "value": 1,
        "format": "decimal"
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The maximum number of paths with equal routing metric value which this instance of the IPX my split between when forwarding packets."
  },
  "ipxAdvSysMaxHops": {
    "name": "ipxAdvSysMaxHops",
    "oid": "1.3.6.1.4.1.23.2.5.1.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "default": {
      "default": {
        "value": 64,
        "format": "decimal"
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The maximum number of hops a packet may take."
  },
  "ipxAdvSysTooManyHops": {
    "name": "ipxAdvSysTooManyHops",
    "oid": "1.3.6.1.4.1.23.2.5.1.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of IPX packets discarded due to exceeding the maximum hop count."
  },
  "ipxAdvSysInFiltered": {
    "name": "ipxAdvSysInFiltered",
    "oid": "1.3.6.1.4.1.23.2.5.1.2.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of incoming IPX packets discarded due to filtering."
  },
  "ipxAdvSysCompressDiscards": {
    "name": "ipxAdvSysCompressDiscards",
    "oid": "1.3.6.1.4.1.23.2.5.1.2.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of incoming IPX packets discarded due to decompression errors."
  },
  "ipxAdvSysNETBIOSPackets": {
    "name": "ipxAdvSysNETBIOSPackets",
    "oid": "1.3.6.1.4.1.23.2.5.1.2.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of NETBIOS packets received."
  },
  "ipxAdvSysForwPackets": {
    "name": "ipxAdvSysForwPackets",
    "oid": "1.3.6.1.4.1.23.2.5.1.2.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of IPX packets forwarded."
  },
  "ipxAdvSysOutFiltered": {
    "name": "ipxAdvSysOutFiltered",
    "oid": "1.3.6.1.4.1.23.2.5.1.2.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of outgoing IPX packets discarded due to filtering."
  },
  "ipxAdvSysOutCompressDiscards": {
    "name": "ipxAdvSysOutCompressDiscards",
    "oid": "1.3.6.1.4.1.23.2.5.1.2.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of outgoing IPX packets discarded due to compression errors."
  },
  "ipxAdvSysCircCount": {
    "name": "ipxAdvSysCircCount",
    "oid": "1.3.6.1.4.1.23.2.5.1.2.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of circuits known to this instance of IPX."
  },
  "ipxAdvSysDestCount": {
    "name": "ipxAdvSysDestCount",
    "oid": "1.3.6.1.4.1.23.2.5.1.2.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of currently reachable destinations known to this instance of IPX."
  },
  "ipxAdvSysServCount": {
    "name": "ipxAdvSysServCount",
    "oid": "1.3.6.1.4.1.23.2.5.1.2.1.13",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of services known to this instance of IPX."
  },
  "resTable": {
    "name": "resTable",
    "oid": "1.3.6.1.4.1.43.10.15.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory"
  },
  "resTableEntry": {
    "name": "resTableEntry",
    "oid": "1.3.6.1.4.1.43.10.15.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "resRepeater",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "resMainSlot",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "resMainPort",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": " An MSH may be configured to contain a number of 'resilient pairs'. These are 802.3 point to point connections, e.g. UTP, that allow two repeaters to be connected together in a resilient configuration. In such a configuration one of the two ports is nominated the 'main' port while the other is the 'standby' port. One of these two ports is enabled and is the current active port. The other is present in case of failure of the active port. Such a failure is detected by the MSH and a switch performed. There are a couple of rules that must apply to a resilient pair definition before that definition becomes a valid resilient pair. Firstly both ports must be on the same repeater. Secondly the standby port must be configured to be 'disabled on boot'. That is it must recover from a power failure in a disabled state. This prevents loops in the network. Several tables control the resilient repeater configuration for the MSH. This is the first. This is the main table and allows the creation and deletion of pairs and provides status control and information. The information in this table is indexed on the repeater number and the slot/port location of the main port. To create a new resilient pair simply write any writeable object indexed on the main port. This will create a new entry in the table which has the state 'invalid' (read resPairState). Having created the row, write to the other parameters specifying valid information. When all the parameters are valid the resPairState will become 'operational'. In this state the pair will correctly operate as a resilient pair. If any of the attributes in the table change so that the pair in no linger valid this will be reflected in the resPortState parameter. To delete a resilient pair, write 'delete' to resPairAction."
  },
  "resRepeater": {
    "name": "resRepeater",
    "oid": "1.3.6.1.4.1.43.10.15.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " A resilient pair must be attached to one of the repeaters in the chassis. This is part of the index value required to access this table."
  },
  "resMainSlot": {
    "name": "resMainSlot",
    "oid": "1.3.6.1.4.1.43.10.15.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is the second key in the index to this table. This is the slot number of the main port in this pair."
  },
  "resMainPort": {
    "name": "resMainPort",
    "oid": "1.3.6.1.4.1.43.10.15.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is the final, key used to index entries in this table. It is the port number of the main port in the pair."
  },
  "resMainState": {
    "name": "resMainState",
    "oid": "1.3.6.1.4.1.43.10.15.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "failed": 1,
          "ok": 2,
          "ok-and-active": 3
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Each port in a pair is constantly monitored for signs of failure. Failure information is used to automatically change the active port from main to standby or vice-versa. Each port may be in one of three states. Failed indicates there is a loss of signal on this port. A port in this state cannot be active. Secondly OK. This state indicates that the port is capable of carrying traffic but is at the moment acting in the role of backup link. The other port in this pair will be in the OK and Active state. OK and Active means what it says, this port is capable of carrying traffic and is so doing at the time this parameter has been read."
  },
  "resStandbySlot": {
    "name": "resStandbySlot",
    "oid": "1.3.6.1.4.1.43.10.15.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": " This is the slot number of the standby port for this pair. The port must be present on the same repeater as the main port and so this information is not duplicated."
  },
  "resStandbyPort": {
    "name": "resStandbyPort",
    "oid": "1.3.6.1.4.1.43.10.15.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This is the port number of the standby port."
  },
  "resStandbyState": {
    "name": "resStandbyState",
    "oid": "1.3.6.1.4.1.43.10.15.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "failed": 1,
          "ok": 2,
          "ok-and-active": 3
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Each port in a pair is constantly monitored for signs of failure. Failure information is used to automatically change the active port from main to standby or vice-versa. Each port may be in one of three states. Failed indicates there is a loss of signal on this port. A port in this state cannot be active. Secondly OK. This state indicates that the port is capable of carrying traffic but is at the moment acting in the role of backup link. The other port in this pair will be in the OK and Active state. OK and Active means what it says, this port is capable of carrying traffic and is so doing at the time this parameter has been read."
  },
  "resPairState": {
    "name": "resPairState",
    "oid": "1.3.6.1.4.1.43.10.15.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "invalid": 1,
          "operational": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " Each row in the table is in one of two states, 'invalid' or 'operational'. If the state is 'invalid', the resilient pair represented by this row is not active. There are several reasons why this may be the case. Firstly during the row creation process, not all information necessary may have been provided. Secondly an operational pair may become invalid because the resilient pair rules are no longer met because of a change in the MSH configuration. The rules are that both main and standby ports be on the same repeater and that the standby port be 'disable on boot'. Changing the standby card, moving one of the cards to a different repeater are two possible changes that can invalidate a pair configration. If the parameters in the row are all valid then the pair becomes 'operational'."
  },
  "resPairModificationStatus": {
    "name": "resPairModificationStatus",
    "oid": "1.3.6.1.4.1.43.10.15.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "under-modification": 1,
          "stable": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": " This parameter must be set to under-modification before any changes are made to an existing configuration. Changes are not applied until this parameter is set to stable. "
  },
  "resPairAction": {
    "name": "resPairAction",
    "oid": "1.3.6.1.4.1.43.10.15.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "create": 1,
          "delete": 2,
          "togglePort": 3
        }
      }
    },
    "maxaccess": "write-only",
    "status": "mandatory",
    "description": " This is object allows the state of a resilient pair to be modified. The create operation configures the resilient port from this table entry. The delete operation removes the resilient definitions from this table and terminates operation of resilience on this pair of ports. The togglePort operation allows the current active port to be changed to the other port. This second operation will only take affect if the state of the currently non-active port is 'OK'."
  },
  "resPairEnable": {
    "name": "resPairEnable",
    "oid": "1.3.6.1.4.1.43.10.15.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enable": 1,
          "disable": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": " This parameter controls whether the resilient pair is enabled or not. In the disabled state , both ports of the resilient pair are disabled. The default value of this parameter is enable "
  },
  "resStandbyMapTable": {
    "name": "resStandbyMapTable",
    "oid": "1.3.6.1.4.1.43.10.15.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory"
  },
  "resStandbyMapTableEntry": {
    "name": "resStandbyMapTableEntry",
    "oid": "1.3.6.1.4.1.43.10.15.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "resSbRepeater",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "resSbSlot",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "resSbPort",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": " This table is read-only. If provides shortcut information to allow for the translation of a port number to a corresponding main port number. This value can then be used to access the main resilience table. Each resilient pair has two entries in this table, one for the main port and one for the standby port. The entry for the main port returns the same port, the entry for the standby port returns the corresponding main port."
  },
  "resSbRepeater": {
    "name": "resSbRepeater",
    "oid": "1.3.6.1.4.1.43.10.15.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " The repeater index of the port being accessed. This is the first of three indices on this table."
  },
  "resSbSlot": {
    "name": "resSbSlot",
    "oid": "1.3.6.1.4.1.43.10.15.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Second index on this table."
  },
  "resSbPort": {
    "name": "resSbPort",
    "oid": "1.3.6.1.4.1.43.10.15.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Third index on this table."
  },
  "resSbType": {
    "name": "resSbType",
    "oid": "1.3.6.1.4.1.43.10.15.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "main": 1,
          "standby": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This attribute specifies whether the port indexed is a main or standby port in the resilient pair table. If the port is neither then there will not be a row in this table indexed for that port."
  },
  "resSbMainSlot": {
    "name": "resSbMainSlot",
    "oid": "1.3.6.1.4.1.43.10.15.2.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is the slot number of the main port for the pair in which the indexed port participates. NOTE if the index port is the main port of a pair (resSbType is 'main') this value will be the same as the index."
  },
  "resSbMainPort": {
    "name": "resSbMainPort",
    "oid": "1.3.6.1.4.1.43.10.15.2.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is the port number of the main port for the pair in which the indexed port participates. NOTE if the index port is the main port of a pair (resSbType is 'main') this value will be the same as the index."
  },
  "resFlushTable": {
    "name": "resFlushTable",
    "oid": "1.3.6.1.4.1.43.10.15.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "write-only",
    "status": "mandatory",
    "description": " This parameter causes all entries in the resilience table to be flushed. Flushing the resilience table does not affect the state of any of the resilient links or ports. Once the table has been flushed , NO resilient links are configured. This parameter is used to ensure that the resilient link table is empty , before new resilient links are configured."
  },
  "resResilienceSwitch": {
    "name": "resResilienceSwitch",
    "oid": "1.3.6.1.4.1.430.43",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "resMainState"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "resStandbyState"
      }
    ],
    "description": " This trap is generated when a change of state of one of the ports in a resilient pair does not result in a switch of active port. If such a switch were to occur the resResilienceSwitch would be generated. Generation of this trap is summarised in the following table: ------------------------------------------------------------------------------ State | Event Main Backup |Main Fail |Main OK |StandBy Fail |Standby OK ------------------------------------------------------------------------------ Active OK | switch | ----- | state | ----- Active Fail | state | ----- | ----- | state OK Active | state | ----- | switch | ----- Fail Active | ----- | state | state | ----- Fail Fail | ----- | switch | ----- | state ----------------------------------------------------------------------------- In this table '-----' indicates no trap is sent. 'switch' indicates the resResilienceSwitch trap is sent and 'state' indicates resStateChange is sent. NOTE: The agent in the MSH does not suppress any traps that caused the state change. For example if the active link is lost then both a 'loss-of-link' trap AND a resilienceSwitch trap are generated."
  },
  "resStateChange": {
    "name": "resStateChange",
    "oid": "1.3.6.1.4.1.430.44",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "resMainState"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "resStandbyState"
      }
    ],
    "description": " This trap is generated when a change of state of one of the ports in a resilient pair does not result in a switch of active port. If such a switch were to occur the resResilienceSwitch would be generated. Generation of this trap is summarised in the following table: ------------------------------------------------------------------------------ State | Event Main Backup |Main Fail |Main OK |StandBy Fail |Standby OK ------------------------------------------------------------------------------ Active OK | switch | ----- | state | ----- Active Fail | state | ----- | ----- | state OK Active | state | ----- | switch | ----- Fail Active | ----- | state | state | ----- Fail Fail | ----- | switch | ----- | state ----------------------------------------------------------------------------- In this table '-----' indicates no trap is sent. 'switch' indicates the resResilienceSwitch trap is sent and 'state' indicates resStateChange is sent. NOTE: The agent in the MSH does not suppress any traps that caused the state change. For example if the active link is lost then both a 'loss-of-link' trap AND a resilienceSwitch trap are generated."
  },
  "a3ComRingParams": {
    "name": "a3ComRingParams",
    "oid": "1.3.6.1.4.1.43.10.16.1",
    "class": "objectidentity"
  },
  "a3ComRingStationParams": {
    "name": "a3ComRingStationParams",
    "oid": "1.3.6.1.4.1.43.10.16.2",
    "class": "objectidentity"
  },
  "a3ComRingConfig": {
    "name": "a3ComRingConfig",
    "oid": "1.3.6.1.4.1.43.10.16.1.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "This table contains information about the ring configuration, such as ring speed and wrap state."
  },
  "a3ComRingConfigEntry": {
    "name": "a3ComRingConfigEntry",
    "oid": "1.3.6.1.4.1.43.10.16.1.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "a3ComRingConfigServiceId",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "This row contains information about a specific ring"
  },
  "a3ComRingConfigServiceId": {
    "name": "a3ComRingConfigServiceId",
    "oid": "1.3.6.1.4.1.43.10.16.1.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This parameter is used to select information about the ring from one of a number of logical devices within the same chassis. For devices that only contain a single device this index will be one (1)."
  },
  "a3ComRingNumber": {
    "name": "a3ComRingNumber",
    "oid": "1.3.6.1.4.1.43.10.16.1.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 4095
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Each ring has a ring number. This is only relevant in the case of a bridged network. When there are multiple bridged token ring segments the ring number is used to determine routing information through the network. If the device knows this information then it appears in this object. If the device is an active ring parameter server then this can be used to assign ring numbers to the ring. If the device is not a ring parameter server then a write request is ignored."
  },
  "a3ComRingSpeed": {
    "name": "a3ComRingSpeed",
    "oid": "1.3.6.1.4.1.43.10.16.1.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unknown": 1,
          "s1MegaBPS": 2,
          "s4MegaBPS": 3,
          "s16MegaBPS": 4
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Token ring standards currently exist for 4 Mbps and 16 Mbps operation. This parameter reports the actual speed of the ring to the parent. If a device cannot determine the speed of the ring the value of this parameter will be 'unknown'."
  },
  "a3ComRingState": {
    "name": "a3ComRingState",
    "oid": "1.3.6.1.4.1.43.10.16.1.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "notAvailable": 1,
          "normal": 2,
          "beacon": 3,
          "soft-error": 4,
          "fault": 5
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object reflects the operational mode of the main ring. The ring is either in 'normal' or some error state. In this list the highest numbered error 'wins'. The meaning of the various states is as follows: beacon: This is determined by listening for beacon frames on the network. soft-error: This indicates a high rate of soft errors with respect to the amount of traffic on the ring. For this state to appear requires that the device be able to monitor this error rate. fault: This device has detected a serious ring fault. The fault may have been patched by this device looping a main ring onto a backup ring. This state is used to indicate that the ring is in error and that the topology of the ring, as reported by any station on the ring, is NOT a reliable reflection of the normal topology. If a logical device is incapable of determining the state of the ring, this parameter will have value 'notAvailable'."
  },
  "a3ComRingBackupState": {
    "name": "a3ComRingBackupState",
    "oid": "1.3.6.1.4.1.43.10.16.1.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "notAvailable": 1,
          "normal": 2,
          "beacon": 3,
          "soft-error": 4,
          "fault": 5
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object reflects the operational mode of the backup ring. The ring is either in 'normal' or some error state. In this list the highest numbered error 'wins'. The meaning of the various states is as follows: beacon: This can be determined by listening for beacon frames on the network. soft-error: This indicates a high rate of soft errors with respect to the amount of traffic on the ring. For this state to appear requires that the device be able to monitor this error rate. fault: This device has detected a serious ring fault. The fault may have been patched by this device looping a main ring onto a backup ring. This state is used to indicate that the ring is in error and that the topology of the ring, as reported by any station on the ring, is NOT a reliable reflection of the normal topology. If a logical device is incapable of determining the state of the ring, this parameter will have value 'notAvailable'."
  },
  "a3ComRingWrapState": {
    "name": "a3ComRingWrapState",
    "oid": "1.3.6.1.4.1.43.10.16.1.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "ringNotWrapped": 1,
          "ringWrapped": 2,
          "notAvailable": 3
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object indicates whether or not the main and backup rings are wrapped together. If the ring is wrapped it does not necessarily mean that it is wrapped at this ring builder, but may be at some other ring builder, an IBM CAU, or some other device with dual ring capabilities. If a logical device is incapable of determining whether the main and backup rings are wrapped, this parameter will have value 'notAvailable'."
  },
  "a3ComRingMapChanged": {
    "name": "a3ComRingMapChanged",
    "oid": "1.3.6.1.4.1.43.10.16.1.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "true": 1,
          "false": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "If the ring topology changes, because end stations join or leave the ring, a trap is generated and this variable is set to `true'. If the topology changes again and this variable is already true, no further trap is generated. By examining a3ComRingMapChangeTime a management station can determine when the ring has become stable for a reasonable time and then set this variable back to `false' again, after which another topology change will generate a trap."
  },
  "a3ComRingMapChangeTime": {
    "name": "a3ComRingMapChangeTime",
    "oid": "1.3.6.1.4.1.43.10.16.1.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This is the value of sysUpTime when the ring topology changed last, irrespective of whether or not a trap was generated."
  },
  "a3ComRingAction": {
    "name": "a3ComRingAction",
    "oid": "1.3.6.1.4.1.43.10.16.1.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noAction": 1,
          "clearRingCounters": 2,
          "clearAllCounters": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Setting this object to clearRingCounters(2) causes all the counters in this table to be reset to zero. Alternatively, clearAllcounters(3) causes all the ring station statistics (table a3ComRingStat) to be cleared as well. Setting this variable to noAction(1) has no effect. The agent will always return the value noAction(1) when this variable is read."
  },
  "a3ComRingStdStats": {
    "name": "a3ComRingStdStats",
    "oid": "1.3.6.1.4.1.43.10.16.1.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "This table contains an entry per ring device within the physical device supporting this MIB. Two entries may refer to the same physical ring if two logical devices are on the same ring."
  },
  "a3ComRingStdStatsEntry": {
    "name": "a3ComRingStdStatsEntry",
    "oid": "1.3.6.1.4.1.43.10.16.1.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "a3ComRingStdStatsServiceId",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "This row contains statistics about a ring"
  },
  "a3ComRingStdStatsServiceId": {
    "name": "a3ComRingStdStatsServiceId",
    "oid": "1.3.6.1.4.1.43.10.16.1.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This parameter is used to select information about the ring from one of a number of logical devices within the same chassis. For devices that only contain a single device this index will be one (1)."
  },
  "a3ComRingBeaconCount": {
    "name": "a3ComRingBeaconCount",
    "oid": "1.3.6.1.4.1.43.10.16.1.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object counts the number of ring state transitions from normal operation to beacon mode. The higher the rate of transitions the worse the reliability of the network. A gauge can be applied to this variable to measure the reliability of the ring."
  },
  "a3ComRingSoftErrors": {
    "name": "a3ComRingSoftErrors",
    "oid": "1.3.6.1.4.1.43.10.16.1.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This is the total number of isolating soft errors reported by stations on the ring. If the rate of soft errors becomes high this is a good indicator of a faulty ring."
  },
  "a3ComRingActiveMonitorChanges": {
    "name": "a3ComRingActiveMonitorChanges",
    "oid": "1.3.6.1.4.1.43.10.16.1.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Every operational ring has exactly one active monitor. Due to errors it is possible that one of the standby monitors may fail to hear from the active monitor and attempt to become the active monitor itself. If this happens frequently it indicates a problem with the network. It is recommended that a local gauge be attached to this parameter to allow local monitoring of error conditions."
  },
  "a3ComRingTop": {
    "name": "a3ComRingTop",
    "oid": "1.3.6.1.4.1.43.10.16.1.4",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "This table contains an ordered list of addresses currently present on the token ring. The table should start from some known MAC on the managed device."
  },
  "a3ComRingTopEntry": {
    "name": "a3ComRingTopEntry",
    "oid": "1.3.6.1.4.1.43.10.16.1.4.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "a3ComRingTopServiceId",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "a3ComRingTopIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "This row contains information about a specific station currently present on the token ring."
  },
  "a3ComRingTopServiceId": {
    "name": "a3ComRingTopServiceId",
    "oid": "1.3.6.1.4.1.43.10.16.1.4.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This parameter is used to select topology information from one of a number of logical devices within the same chassis. For devices that only contain a single device this index will be one (1)."
  },
  "a3ComRingTopIndex": {
    "name": "a3ComRingTopIndex",
    "oid": "1.3.6.1.4.1.43.10.16.1.4.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "All token ring managed devices must learn the ring topology. Each logical token device has a concept of the ring topology from it's position within the ring. For example an MSH ring builder learns the ordering of all stations on the ring in which it's local ring section resides. This object provides a unique index within the ring topology."
  },
  "a3ComRingTopStationAddress": {
    "name": "a3ComRingTopStationAddress",
    "oid": "1.3.6.1.4.1.43.10.16.1.4.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This is the physical (MAC) address for the station at this position in the ring."
  },
  "a3ComRingTopMonitor": {
    "name": "a3ComRingTopMonitor",
    "oid": "1.3.6.1.4.1.43.10.16.1.4.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "active-monitor": 1,
          "standby-monitor": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Each token ring segment contains an active monitor. Any station can become the active monitor, this is determined by a special active monitor protocol. The active monitor is responsible for checking the validity of tokens and general ring house keeping. All stations that are NOT the active monitor are standby monitors. Each standby monitor checks that an active monitor is present and is ready to become the active monitor if necessary."
  },
  "a3ComRingStatConfig": {
    "name": "a3ComRingStatConfig",
    "oid": "1.3.6.1.4.1.43.10.16.2.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "This table contains information about the configuration of stations on the ring. Stations are identified by their MAC address and the ring service identifier. NOTE: This table includes information about stations that have at some time been on the ring. The station need not be currently present on the ring. The only time entries should be automatically discarded from this table is to cope with insufficient resource for a new station. If a new station is detected that is not currently in this table and the table has reached it's capacity then some algorithm (e.g. least recently inserted) should be employed to remove a table row."
  },
  "a3ComRingStatConfigEntry": {
    "name": "a3ComRingStatConfigEntry",
    "oid": "1.3.6.1.4.1.43.10.16.2.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "a3ComRingStatConfigServiceId",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "a3ComRingStatConfigAddress",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "This entry contains information about a specific ring station."
  },
  "a3ComRingStatConfigServiceId": {
    "name": "a3ComRingStatConfigServiceId",
    "oid": "1.3.6.1.4.1.43.10.16.2.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This parameter is used to select topology information from one of a number of logical devices within the same chassis. For devices that only contain a single device this index will be one (1)."
  },
  "a3ComRingStatConfigAddress": {
    "name": "a3ComRingStatConfigAddress",
    "oid": "1.3.6.1.4.1.43.10.16.2.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "PhysAddress",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This is the physical (MAC) address of this station. Information in this table is keyed on the address."
  },
  "a3ComRingStatState": {
    "name": "a3ComRingStatState",
    "oid": "1.3.6.1.4.1.43.10.16.2.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "present": 1,
          "absent": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This table includes information about stations that have at some time been present on the ring. A new entry is created in this table when a new station appears on the ring. If that station is subsequently removed then the entry in this table remains. This object indicates whether or not the station represented by this table entry is currently present on the ring."
  },
  "a3ComRingStatLocation": {
    "name": "a3ComRingStatLocation",
    "oid": "1.3.6.1.4.1.43.10.16.2.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This is the token ring physical location parameter for the station."
  },
  "a3ComRingStatAction": {
    "name": "a3ComRingStatAction",
    "oid": "1.3.6.1.4.1.43.10.16.2.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noAction": 1,
          "removeStation": 2,
          "clearCounters": 3,
          "deleteEntry": 4,
          "forwardTest": 5
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This object allows actions to be performed either on the station or the entry in this table representing that station. Not every managed device will be capable of supporting all commands. Setting this variable to noAction(1) has no effect. The agent will always return the value noAction(1) when this variable is read. removeStation: Send a remove station request to the management station. clearCounters: All counters in this table entry are reset to zero. deleteEntry: Remove this entry from the table. This operation is only successful if the station represented by this entry is NOT currently active. forwardTest: This request causes the managed device to test the transmit and receive paths of this station. This is accomplished using the Transmit Forward MAC frame request. When the station test completes the managed device sends a test-response trap. This action only has an effect if the a3ComRingStatState is present."
  },
  "a3ComRingStatStandardStats": {
    "name": "a3ComRingStatStandardStats",
    "oid": "1.3.6.1.4.1.43.10.16.2.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "This table contains station statistics. Stations are identified by their MAC address and the ring service identifier. NOTE: This table includes information about stations that have at some time been on the ring. The station need not be currently present on the ring. The only time entries should be automatically discarded from this table is to cope with insufficient resource for a new station. If a new station is detected that is not currently in this table and the table has reached it's capacity then some algorithm (e.g. least recently inserted) should be employed to remove a table row."
  },
  "a3ComRingStatStdStatsEntry": {
    "name": "a3ComRingStatStdStatsEntry",
    "oid": "1.3.6.1.4.1.43.10.16.2.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "a3ComRingStatStdStatsServiceId",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "a3ComRingStatStdStatsAddress",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "This entry contains information about a specific ring station."
  },
  "a3ComRingStatStdStatsServiceId": {
    "name": "a3ComRingStatStdStatsServiceId",
    "oid": "1.3.6.1.4.1.43.10.16.2.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This parameter is used to select topology information from one of a number of logical devices within the same chassis. For devices that only contain a single device this index will be one (1)."
  },
  "a3ComRingStatStdStatsAddress": {
    "name": "a3ComRingStatStdStatsAddress",
    "oid": "1.3.6.1.4.1.43.10.16.2.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "PhysAddress",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This is the physical (MAC) address of this station. Information in this table is keyed on the address."
  },
  "a3ComRingStatLineErrors": {
    "name": "a3ComRingStatLineErrors",
    "oid": "1.3.6.1.4.1.43.10.16.2.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object is the sum of Line Errors reported by the station. This is an Isolating error. This counter is incremented by a station when a frame or token is repeated by the station and an error bit in the frame is clear, but one of the following tests fails: A code violation occurs between the start and end of the packet; The Frame Check Sequence for a frame is incorrect. A station noticing this error sets the error bit in the packet and forwards to the next station. GENERAL: Soft Errors The token ring architecture includes an inherent error monitoring protocol. Each station records local errors. These errors are generically referred to as 'soft errors'. Soft errors represent intermittent faults that temporarily disrupt normal operation of the ring. Stations periodically transmit their soft error counters onto the ring where they can be received by any stations which have the ring error monitor functional address active. There are two categories of soft error. Isolating errors and Non-isolating errors. An isolating error will be reported by exactly one station on the ring and the error is known to have occurred between that station and it's upstream neighbour. The second category are non-isolating. That is, errors of this nature may be seen and reported by more than one ring station. With these errors it is not possible to resolve the source of the error."
  },
  "a3ComRingStatInternalErrors": {
    "name": "a3ComRingStatInternalErrors",
    "oid": "1.3.6.1.4.1.43.10.16.2.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object is incremented when a station detects a recoverable internal error. This can be used to detect a ring station that may be error prone. GENERAL: Soft Errors The token ring architecture includes an inherent error monitoring protocol. Each station records local errors. These errors are generically referred to as 'soft errors'. Soft errors represent intermittent faults that temporarily disrupt normal operation of the ring. Stations periodically transmit their soft error counters onto the ring where they can be received by any stations which have the ring error monitor functional address active. There are two categories of soft error. Isolating errors and Non-isolating errors. An isolating error will be reported by exactly one station on the ring and the error is known to have occurred between that station and it's upstream neighbour. The second category are non-isolating. That is, errors of this nature may be seen and reported by more than one ring station. With these errors it is not possible to resolve the source of the error."
  },
  "a3ComRingStatBurstErrors": {
    "name": "a3ComRingStatBurstErrors",
    "oid": "1.3.6.1.4.1.43.10.16.2.2.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The token ring receiver portion of the station expects to see continuous signal transitions on the input. This counter is incremented if the station fails to see a transition for 5 half bit times. To prevent this error being recorded on subsequent stations the detecting station transmits idle after failing to detect a transition after 4 half bit times. GENERAL: Soft Errors The token ring architecture includes an inherent error monitoring protocol. Each station records local errors. These errors are generically referred to as 'soft errors'. Soft errors represent intermittent faults that temporarily disrupt normal operation of the ring. Stations periodically transmit their soft error counters onto the ring where they can be received by any stations which have the ring error monitor functional address active. There are two categories of soft error. Isolating errors and Non-isolating errors. An isolating error will be reported by exactly one station on the ring and the error is known to have occurred between that station and it's upstream neighbour. The second category are non-isolating. That is, errors of this nature may be seen and reported by more than one ring station. With these errors it is not possible to resolve the source of the error."
  },
  "a3ComRingStatMonitorErrors": {
    "name": "a3ComRingStatMonitorErrors",
    "oid": "1.3.6.1.4.1.43.10.16.2.2.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "A token ring always includes an active monitor station. Periodically this station initiates an active monitor poll by sending an Active Monitor Present MAC frame. Every frame on a token ring contains an Address Recognised bit and a Frame Copied bit. These are collectively known as the AC bits. When a station processes a frame it must set either or both of these bits. A station that simply forwards a frame to the next station sets neither bit. Valid combinations of the bits are: AC Meaning 00 Frame repeated to next station. 10 The station recognised the address. That station did not however copy the frame. Generally this indicates a lack of resource in the station that recognised the address. 11 The station recognised and managed to copy the frame. These bits are used in an active monitor poll sequence. Each station obeys two rules. 1) When a standby monitor station receives an active or standby monitor present frame with the AC field set to 00 it sets the bits to 11 and starts a timer. When the timer expires it sends a standby monitor present frame. 2) When the active monitor receives any monitor present frame the active poll is considered complete. The Monitor Error counter is increased by a station if it receives either and active or standby monitor present frame with AC=00, then receives a standby monitor present frame also with AC=00. If such a situation occurs there is some error on the ring. This may only be a reconfiguration because the active monitor station has been removed from the ring. GENERAL: Soft Errors The token ring architecture includes an inherent error monitoring protocol. Each station records local errors. These errors are generically referred to as 'soft errors'. Soft errors represent intermittent faults that temporarily disrupt normal operation of the ring. Stations periodically transmit their soft error counters onto the ring where they can be received by any stations which have the ring error monitor functional address active. There are two categories of soft error. Isolating errors and Non-isolating errors. An isolating error will be reported by exactly one station on the ring and the error is known to have occurred between that station and it's upstream neighbour. The second category are non-isolating. That is, errors of this nature may be seen and reported by more than one ring station. With these errors it is not possible to resolve the source of the error."
  },
  "a3ComRingStatLostFrames": {
    "name": "a3ComRingStatLostFrames",
    "oid": "1.3.6.1.4.1.43.10.16.2.2.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "In the token ring architecture a station that transmits a frame will eventually receive that frame after it has gone all the way around the ring. The station that sent the frame then removes that frame from the ring. Whenever a station places a frame onto the ring it starts a timer. It is expected that the frame will return to the station before that timer expires. If this does not happen then this error counter is incremented. Note that this is a non-isolating error and so it is not possible to determine where on the network the fault occurred. GENERAL: Soft Errors The token ring architecture includes an inherent error monitoring protocol. Each station records local errors. These errors are generically referred to as 'soft errors'. Soft errors represent intermittent faults that temporarily disrupt normal operation of the ring. Stations periodically transmit their soft error counters onto the ring where they can be received by any stations which have the ring error monitor functional address active. There are two categories of soft error. Isolating errors and Non-isolating errors. An isolating error will be reported by exactly one station on the ring and the error is known to have occurred between that station and it's upstream neighbour. The second category are non-isolating. That is, errors of this nature may be seen and reported by more than one ring station. With these errors it is not possible to resolve the source of the error."
  },
  "a3ComRingStatFrameCopyErrors": {
    "name": "a3ComRingStatFrameCopyErrors",
    "oid": "1.3.6.1.4.1.43.10.16.2.2.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Every frame on a token ring contains an Address Recognised bit and a Frame Copied bit. These are collectively known as the AC bits. When a station processes a frame it must set either or both of these bits. A station that simply forwards a frame to the next station sets neither bit. Valid combinations of the bits are: AC Meaning 00 Frame repeated to next station. 10 The station recognised the address. That station did not however copy the frame. Generally this indicates a lack of resource in the station that recognised the address. 11 The station recognised and managed to copy the frame. If a station receives a packet in which the AC bits are set to '11' and which has that station as the destination of the frame then there are probably two stations on the ring with same address. When a station detects this condition it increases the Frame Copy error counter. GENERAL: Soft Errors The token ring architecture includes an inherent error monitoring protocol. Each station records local errors. These errors are generically referred to as 'soft errors'. Soft errors represent intermittent faults that temporarily disrupt normal operation of the ring. Stations periodically transmit their soft error counters onto the ring where they can be received by any stations which have the ring error monitor functional address active. There are two categories of soft error. Isolating errors and Non-isolating errors. An isolating error will be reported by exactly one station on the ring and the error is known to have occurred between that station and it's upstream neighbour. The second category are non-isolating. That is, errors of this nature may be seen and reported by more than one ring station. With these errors it is not possible to resolve the source of the error."
  },
  "a3ComRingStatRxCongestion": {
    "name": "a3ComRingStatRxCongestion",
    "oid": "1.3.6.1.4.1.43.10.16.2.2.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "A station increases this counter when it detects a packet addressed to itself but cannot copy that frame due to lack of resource. GENERAL: Soft Errors The token ring architecture includes an inherent error monitoring protocol. Each station records local errors. These errors are generically referred to as 'soft errors'. Soft errors represent intermittent faults that temporarily disrupt normal operation of the ring. Stations periodically transmit their soft error counters onto the ring where they can be received by any stations which have the ring error monitor functional address active. There are two categories of soft error. Isolating errors and Non-isolating errors. An isolating error will be reported by exactly one station on the ring and the error is known to have occurred between that station and its upstream neighbour. The second category are non-isolating. That is, errors of this nature may be seen and reported by more than one ring station. With these errors it is not possible to resolve the source of the error."
  },
  "a3ComRingStatTokenErrors": {
    "name": "a3ComRingStatTokenErrors",
    "oid": "1.3.6.1.4.1.43.10.16.2.2.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This counter is incremented whenever a station recognises an error condition resulting in the need to generate a token. This counter will only be incremented by an active monitor station. GENERAL: Soft Errors The token ring architecture includes an inherent error monitoring protocol. Each station records local errors. These errors are generically referred to as 'soft errors'. Soft errors represent intermittent faults that temporarily disrupt normal operation of the ring. Stations periodically transmit their soft error counters onto the ring where they can be received by any stations which have the ring error monitor functional address active. There are two categories of soft error. Isolating errors and Non-isolating errors. An isolating error will be reported by exactly one station on the ring and the error is known to have occurred between that station and its upstream neighbour. The second category are non-isolating. That is, errors of this nature may be seen and reported by more than one ring station. With these errors it is not possible to resolve the source of the error."
  },
  "a3ComRingStatFreqErrors": {
    "name": "a3ComRingStatFreqErrors",
    "oid": "1.3.6.1.4.1.43.10.16.2.2.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This counter is incremented whenever a station detects an error in the frequency of the received signal. GENERAL: Soft Errors The token ring architecture includes an inherent error monitoring protocol. Each station records local errors. These errors are generically referred to as 'soft errors'. Soft errors represent intermittent faults that temporarily disrupt normal operation of the ring. Stations periodically transmit their soft error counters onto the ring where they can be received by any stations which have the ring error monitor functional address active. There are two categories of soft error. Isolating errors and Non-isolating errors. An isolating error will be reported by exactly one station on the ring and the error is known to have occurred between that station and its upstream neighbour. The second category are non-isolating. That is, errors of this nature may be seen and reported by more than one ring station. With these errors it is not possible to resolve the source of the error."
  },
  "a3ComRingStatSoftErrors": {
    "name": "a3ComRingStatSoftErrors",
    "oid": "1.3.6.1.4.1.43.10.16.2.2.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This counter is the total of the isolating soft error counters in the station. The total does NOT include non- isolating errors because these do not localise an error condition on the ring. GENERAL: Soft Errors The token ring architecture includes an inherent error monitoring protocol. Each station records local errors. These errors are generically referred to as 'soft errors'. Soft errors represent intermittent faults that temporarily disrupt normal operation of the ring. Stations periodically transmit their soft error counters onto the ring where they can be received by any stations which have the ring error monitor functional address active. There are two categories of soft error. Isolating errors and Non-isolating errors. An isolating error will be reported by exactly one station on the ring and the error is known to have occurred between that station and its upstream neighbour. The second category are non-isolating. That is, errors of this nature may be seen and reported by more than one ring station. With these errors it is not possible to resolve the source of the error."
  },
  "a3ComRingTopologyChange": {
    "name": "a3ComRingTopologyChange",
    "oid": "1.3.6.1.4.1.430.45",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "a3ComRingMapChangeTime"
      }
    ],
    "description": "This trap is sent when a logical device detects a change in the topology of the ring. The var-bind list identifies which of the logical devices detected the change. Note that this trap is not generated if the value of a3ComRingMapChanged is non-zero."
  },
  "a3ComRingStateChange": {
    "name": "a3ComRingStateChange",
    "oid": "1.3.6.1.4.1.430.46",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "a3ComRingState"
      }
    ],
    "description": "This trap is sent when the state of the main ring is seen to change. The var-bind specifies the new state of the ring."
  },
  "a3ComRingBackupStateChange": {
    "name": "a3ComRingBackupStateChange",
    "oid": "1.3.6.1.4.1.430.47",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "a3ComRingBackupState"
      }
    ],
    "description": "This trap is sent when the state of the backup ring is seen to change. The var-bind specifies the new state of the ring."
  },
  "a3ComRingWrapChange": {
    "name": "a3ComRingWrapChange",
    "oid": "1.3.6.1.4.1.430.48",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "a3ComRingWrapState"
      }
    ],
    "description": "This trap indicates either that the main and backup rings have wrapped, or that the wrap condition has been removed. The var-bind indicates the new state."
  },
  "mrmBasicPackage": {
    "name": "mrmBasicPackage",
    "oid": "1.3.6.1.4.1.43.10.17.1",
    "class": "objectidentity"
  },
  "mrmMonitorPackage": {
    "name": "mrmMonitorPackage",
    "oid": "1.3.6.1.4.1.43.10.17.2",
    "class": "objectidentity"
  },
  "mrmBasCardPackage": {
    "name": "mrmBasCardPackage",
    "oid": "1.3.6.1.4.1.43.10.17.1.1",
    "class": "objectidentity"
  },
  "mrmBasPortPackage": {
    "name": "mrmBasPortPackage",
    "oid": "1.3.6.1.4.1.43.10.17.1.2",
    "class": "objectidentity"
  },
  "mrmMonRepeaterPackage": {
    "name": "mrmMonRepeaterPackage",
    "oid": "1.3.6.1.4.1.43.10.17.2.1",
    "class": "objectidentity"
  },
  "mrmMonCardPackage": {
    "name": "mrmMonCardPackage",
    "oid": "1.3.6.1.4.1.43.10.17.2.2",
    "class": "objectidentity"
  },
  "mrmMonPortPackage": {
    "name": "mrmMonPortPackage",
    "oid": "1.3.6.1.4.1.43.10.17.2.3",
    "class": "objectidentity"
  },
  "mrmMonDummyPackage": {
    "name": "mrmMonDummyPackage",
    "oid": "1.3.6.1.4.1.43.10.17.2.4",
    "class": "objectidentity"
  },
  "mrmCardTable": {
    "name": "mrmCardTable",
    "oid": "1.3.6.1.4.1.43.10.17.1.1.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": " Table of descriptive and status information about the groups of ports."
  },
  "mrmCardEntry": {
    "name": "mrmCardEntry",
    "oid": "1.3.6.1.4.1.43.10.17.1.1.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmCardServiceId",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmCardIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": " An entry in the table, containing information about a single group of ports."
  },
  "mrmCardServiceId": {
    "name": "mrmCardServiceId",
    "oid": "1.3.6.1.4.1.43.10.17.1.1.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This identifies one of the repeaters within the chassis as the target of a request."
  },
  "mrmCardIndex": {
    "name": "mrmCardIndex",
    "oid": "1.3.6.1.4.1.43.10.17.1.1.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object identifies the card within the repeater for which this entry contains information."
  },
  "mrmCardPortCapacity": {
    "name": "mrmCardPortCapacity",
    "oid": "1.3.6.1.4.1.43.10.17.1.1.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " The mrmCardPortCapacity is the number of ports that can be contained within the group. Valid range is 1-1024. Within each group, the ports are uniquely numbered in the range from 1 to mrmCardPortCapacity. Note: In practice, this will generally be the number of ports on a module, card, or board, and the port numbers will correspond to numbers marked on the physical embodiment."
  },
  "mrmCardTest": {
    "name": "mrmCardTest",
    "oid": "1.3.6.1.4.1.43.10.17.1.1.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noTest": 1,
          "test": 2,
          "testing": 3,
          "passed": 4,
          "failed": 5
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": " An object that allows the user to test the operation of a card. Writing test(2) to this object forces the card to perform a disruptive test to determine if the card is functioning properly. Reading this object while the card is under test return the value testing(3). When the test is completed, reading this value will return either passed(4) or failed(5)."
  },
  "mrmCardDOBPorts": {
    "name": "mrmCardDOBPorts",
    "oid": "1.3.6.1.4.1.43.10.17.1.1.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " MSH Repeater Cards have the ability to disable ports at power up or reset. Ports configured in this way are useful for configuring resilient links because they prevent loops in the network from occurring at startup. The disable on boot feature is determined according to a hardware strap which cannot be changed via software. This parameter is a mask containing a single bit for each port on the card. Port 1 is represented by bit 0 and so-on. If a bit representing a particular port is 0 this port boots up disabled. If the bit is a 1 the port boots up enabled. This parameter allows the state of these parameters to be rapidly determined by a network management application."
  },
  "mrmCardMDIenable": {
    "name": "mrmCardMDIenable",
    "oid": "1.3.6.1.4.1.43.10.17.1.1.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unknown": 1,
          "mdiDisabled": 2,
          "mdiEnabled": 3,
          "notApplicable": 4
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " 10Base-T line cards are normally configured (mdi_disabled(2)) to link to an external network device ( internal crossover ). Port 1 may be configured ( mdi_enabled(3) ) to link to another 10Base-T line card ( with no internal crossover ). This parameter allows the configuration to be determined. Note ECS line cards show unknown(1) since the configuration cannot be accessed via the management interface."
  },
  "mrmPortTable": {
    "name": "mrmPortTable",
    "oid": "1.3.6.1.4.1.43.10.17.1.2.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": " Table of descriptive and status information about the ports."
  },
  "mrmPortEntry": {
    "name": "mrmPortEntry",
    "oid": "1.3.6.1.4.1.43.10.17.1.2.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmPortServiceId",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmPortCardIndex",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmPortIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": " An entry in the table, containing information about a single port."
  },
  "mrmPortServiceId": {
    "name": "mrmPortServiceId",
    "oid": "1.3.6.1.4.1.43.10.17.1.2.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object identifies the repeater which this entry contains information."
  },
  "mrmPortCardIndex": {
    "name": "mrmPortCardIndex",
    "oid": "1.3.6.1.4.1.43.10.17.1.2.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object identifies the group containing the port for which this entry contains information."
  },
  "mrmPortIndex": {
    "name": "mrmPortIndex",
    "oid": "1.3.6.1.4.1.43.10.17.1.2.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "reference": "Reference IEEE 802.3 Rptr Mgt, 19.2.6.2,aPortID.",
    "status": "mandatory",
    "description": " This object identifies the port within the group for which this entry contains information. This value can never be greater than mrmCardPortCapacity for the associated group."
  },
  "mrmPortInterfaceType": {
    "name": "mrmPortInterfaceType",
    "oid": "1.3.6.1.4.1.43.10.17.1.2.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unknown": 1,
          "maleAUI": 2,
          "femaleAUI": 3,
          "thinCoax": 4,
          "twistedPair": 5,
          "unshieldedTP": 6,
          "fiber": 7
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object specifies the type of electrical interface made available at the interface to the card for this port. The interface does not necessarily specify what the actual media to end station is."
  },
  "mrmPortConnectorType": {
    "name": "mrmPortConnectorType",
    "oid": "1.3.6.1.4.1.43.10.17.1.2.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unknown": 1,
          "rj45": 2,
          "telco": 3,
          "st": 4,
          "sma": 5,
          "dtype-15": 6,
          "bnc": 7
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This specifies the type of the physical connector through which one would attach to this card. This is distinct from the media type. For example UTP may be connected to the port via either an RJ45 or a Telco connector."
  },
  "mrmPortAdminStatus": {
    "name": "mrmPortAdminStatus",
    "oid": "1.3.6.1.4.1.43.10.17.1.2.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enabled": 1,
          "disabled": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": " Setting this object to disabled(2) disables the port. A disabled port neither transmits nor receives. Once disabled, a port must be explicitly enabled to restore operation. A port which is disabled when power is lost or when a reset is exerted shall remain disabled when normal operation resumes. The admin status takes precedence over auto- partition and functionally operates between the auto-partition mechanism and the AUI/PMA. Setting this object to enabled(1) enables the port and exerts a BEGIN on the port's auto-partition state machine. In effect, when a port is disabled, the value of mrmPortAutoPartitionState for that port is frozen until the port is next enabled. When the port becomes enabled, the mrmPortAutoPartitionState becomes notAutoPartitioned(2), regardless of its pre-disabling state.)"
  },
  "mrmPortAutoPartitionState": {
    "name": "mrmPortAutoPartitionState",
    "oid": "1.3.6.1.4.1.43.10.17.1.2.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "partitioned": 1,
          "unpartitioned": 2
        }
      }
    },
    "maxaccess": "read-only",
    "reference": "Reference IEEE 802.3 Rptr Mgt, 19.2.6.2, aAutoPartitionState.",
    "status": "mandatory",
    "description": " The autoPartitionState flag indicates whether the port is currently partitioned by the repeater's auto-partition protection. The conditions that cause port partitioning are specified in partition state machine in Section 9 IEEE 802.3 Std]. They are not differentiated here."
  },
  "mrmPortLinkState": {
    "name": "mrmPortLinkState",
    "oid": "1.3.6.1.4.1.43.10.17.1.2.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "present": 1,
          "absent": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object reflects the presence or absence of signal on this port. The signal may be either light in the case of fiber, or general link present in the case of copper. The value of this parameter is correct regardless of the state the admin state or the partition state."
  },
  "mrmPortBootState": {
    "name": "mrmPortBootState",
    "oid": "1.3.6.1.4.1.43.10.17.1.2.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "disable": 1,
          "enable": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " A repeater port may be enabled or disabled after a reset. This parameter indicates the default for this port."
  },
  "mrmPortESTFilter": {
    "name": "mrmPortESTFilter",
    "oid": "1.3.6.1.4.1.43.10.17.1.2.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "forwardMAC": 1,
          "forwardIP": 2,
          "forwardAll": 127,
          "forwardNone": 128
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": " This attribute determines whether and which address information is extracted from packets received on a port and forwarded to the end station database. It is recommended that this attribute be disabled for inter-repeater links to prevent the database being filled with remote information. To disable this feature for all address types write the value forwardNone (128) to this variable."
  },
  "mrmPortPartitionEvent": {
    "name": "mrmPortPartitionEvent",
    "oid": "1.3.6.1.4.1.43.10.17.1.2.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enabled": 1,
          "disabled": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Specifies whether a trap should be sent if the port partition state changes."
  },
  "mrmPortLinkStateEvent": {
    "name": "mrmPortLinkStateEvent",
    "oid": "1.3.6.1.4.1.43.10.17.1.2.1.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enabled": 1,
          "disabled": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Specifies whether a trap should be sent if the link state changes."
  },
  "mrmPortSecurityAvailable": {
    "name": "mrmPortSecurityAvailable",
    "oid": "1.3.6.1.4.1.43.10.17.1.2.1.1.13",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "available": 1,
          "notAvailable": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Specifies whether security is an available feature on this port. Only ports that have this feature available can have an entry in the repeater security table."
  },
  "mrmPortLinkPulse": {
    "name": "mrmPortLinkPulse",
    "oid": "1.3.6.1.4.1.43.10.17.1.2.1.1.14",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enabled": 1,
          "disabled": 2,
          "notApplicable": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": " This attribute determines if link pulse generating and monitoring is enabled or disabled for a 10BaseT port. The attribute may take the values of enabled (standard) or disabled (non standard)."
  },
  "mrmMonitorRepTable": {
    "name": "mrmMonitorRepTable",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "Table of performance and error statistics for the ports."
  },
  "mrmMonitorRepEntry": {
    "name": "mrmMonitorRepEntry",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmMonRepServiceId",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": " This table provides statistical and control information concerning the entire repeater."
  },
  "mrmMonRepServiceId": {
    "name": "mrmMonRepServiceId",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This parameter is used as the index in this table. A modular chassis contains potentially many repeater services. Each repeater service contains a number of cards (or groups). This parameter allows one of those repeaters to be selected."
  },
  "mrmMonRepReadableFrames": {
    "name": "mrmMonRepReadableFrames",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each frame whose OctetCount is greater than or equal to minFrameSize and less than or equal to maxFrameSize and for which FCSError is not asserted that is received by the repeater. NOTE: This counter does not really exist. It is calculated by adding together all the port counters within this repeater."
  },
  "mrmMonRepUnicastFrames": {
    "name": "mrmMonRepUnicastFrames",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each readable frame seen by the Repeater that is addressed to a unicast (non Card) address."
  },
  "mrmMonRepMulticastFrames": {
    "name": "mrmMonRepMulticastFrames",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each readable frame seen by the Repeater that is addressed to a multicast (non broadcast) address."
  },
  "mrmMonRepBroadcastFrames": {
    "name": "mrmMonRepBroadcastFrames",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each readable frame seen by the Repeater that is addressed to the broadcast address ffffffffffff."
  },
  "mrmMonRepReadableOctets": {
    "name": "mrmMonRepReadableOctets",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by the octet count for each readable frame received by the repeater. NOTE: This counter does not really exist. It is calculated by adding together all the port counters within this repeater."
  },
  "mrmMonRepUnicastOctets": {
    "name": "mrmMonRepUnicastOctets",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of octets contained in valid frames that have been received on this port in which the destination field was a unicast address. The approximate minimum time for rollover of this counter is 58 minutes."
  },
  "mrmMonRepMulticastOctets": {
    "name": "mrmMonRepMulticastOctets",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of octets contained in valid frames that have been received on this port in which the destination was a multicast address. The approximate minimum time for rollover of this counter is 58 minutes."
  },
  "mrmMonRepBroadcastOctets": {
    "name": "mrmMonRepBroadcastOctets",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of octets contained in valid frames that have been received on this port in which the destination was the broadcast address ffffffffffff. By attaching a gauge to this counter one can monitor the port for broadcast storms. Action can then be taken to automatically recover network normal operation. The approximate minimum time for rollover of this counter is 58 minutes."
  },
  "mrmMonRepFCSErrors": {
    "name": "mrmMonRepFCSErrors",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each frame with an FCS error that does not have a framing error and which is of legal frame size received by the repeater. NOTE: This counter does not really exist. It is calculated by adding together all the port counters within this repeater."
  },
  "mrmMonRepAlignmentErrors": {
    "name": "mrmMonRepAlignmentErrors",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each frame with an FCS error that does have a framing error and which is of legal frame size received by the repeater. NOTE: This counter does not really exist. It is calculated by adding together all the port counters within this repeater."
  },
  "mrmMonRepFrameTooLongs": {
    "name": "mrmMonRepFrameTooLongs",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each frame whose octet count is greater than the max frame size that is received by the repeater. NOTE: This counter does not really exist. It is calculated by adding together all the port counters within this repeater."
  },
  "mrmMonRepShortEvents": {
    "name": "mrmMonRepShortEvents",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.13",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each carrier event whose duration is less than short event max time that is detected by the repeater. NOTE: This counter does not really exist. It is calculated by adding together all the port counters within this repeater."
  },
  "mrmMonRepRunts": {
    "name": "mrmMonRepRunts",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.14",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each carrier event whose duration is greater than short event max time and less than valid packet min time and which does not suffer a collision detected by the repeater. NOTE: This counter does not really exist. It is calculated by adding together all the port counters within this repeater."
  },
  "mrmMonRepTxCollisions": {
    "name": "mrmMonRepTxCollisions",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.15",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for any CarrierEvent signal on any port of this repeater for which the CollisionEvent signal on this port is asserted. The approximate minimum time for rollover of this counter is 16 hours."
  },
  "mrmMonRepLateEvents": {
    "name": "mrmMonRepLateEvents",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.16",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one each time a collisions occurs after valid packet min time, a late event is counted as both a collision and as a late event. NOTE: This counter does not really exist. It is calculated by adding together all the port counters within this repeater."
  },
  "mrmMonRepVeryLongEvents": {
    "name": "mrmMonRepVeryLongEvents",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.17",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one each time a carrier event occurs whose duration is greater than the MAU Jabber Lockup Protection time. NOTE: This counter does not really exist. It is calculated by adding together all the port counters within this repeater."
  },
  "mrmMonRepDataRateMismatches": {
    "name": "mrmMonRepDataRateMismatches",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.18",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one each time a packet has been received by this repeater with the data rate detectably mismatched from the local frequency. NOTE: This counter does not really exist. It is calculated by adding together all the port counters within this repeater."
  },
  "mrmMonRepAutoPartitions": {
    "name": "mrmMonRepAutoPartitions",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.19",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one each time the repeater has automatically partitioned any port. NOTE: This counter does not really exist. It is calculated by adding together all the port counters within this repeater."
  },
  "mrmMonRepTotalErrors": {
    "name": "mrmMonRepTotalErrors",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.20",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " The total number of errors which have occurred on all ports on all groups of this repeater. This counter is the summation of the values of the mrmMonCardTotalErrors counters for all of the cards in the repeater. It is the sum of the following: FCS, Alignment, Frames Too Long, Short Events, Late Events, Very Long Events and Data Rate Mismatches. As a general indicator the individual error counters are too detailed. This parameter gives a very good monitor type parameter."
  },
  "mrmMonRepBound0": {
    "name": "mrmMonRepBound0",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.21",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is a summation of the number of frames (including error frames) with a length of 64 octets which were received by each port on every card of this repeater."
  },
  "mrmMonRepBound1": {
    "name": "mrmMonRepBound1",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.22",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is a summation of the number of frames (including error frames) with a length of between 65 and 127 octets inclusive which were received by each port on every card of this repeater."
  },
  "mrmMonRepBound2": {
    "name": "mrmMonRepBound2",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.23",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is a summation of the number of frames (including error frames) with a length of between 128 and 255 octets inclusive which were received by each port on every card of this repeater."
  },
  "mrmMonRepBound3": {
    "name": "mrmMonRepBound3",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.24",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is a summation of the number of frames (including error frames) with a length of between 256 and 511 octets inclusive which were received by each port on every card of this repeater."
  },
  "mrmMonRepBound4": {
    "name": "mrmMonRepBound4",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.25",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is a summation of the number of frames (including error frames) with a length of between 512 and 1023 octets inclusive which were received by each port on every card of this repeater."
  },
  "mrmMonRepBound5": {
    "name": "mrmMonRepBound5",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.26",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is a summation of the number of frames (including error frames) with a length of between 1024 and 1518 octets inclusive which were received by each port on every card of this repeater."
  },
  "mrmMonRepAction": {
    "name": "mrmMonRepAction",
    "oid": "1.3.6.1.4.1.43.10.17.2.1.1.1.27",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "clearCounters": 1
        }
      }
    },
    "maxaccess": "write-only",
    "status": "mandatory",
    "description": " This object allows repeater stats specific actions to be implemented. There is only one action currently defined, 'clearCounters'. Writing this value to a repeater entry will clear ALL counters in this repeater. That include port stats, card and repeater totals."
  },
  "mrmMonitorCardTable": {
    "name": "mrmMonitorCardTable",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": " This table contains parameters about the various repeater cards within the chassis. The table is indexed using the 'serviceIndex' for the repeater and the slot number within that repeater."
  },
  "mrmMonitorCardEntry": {
    "name": "mrmMonitorCardEntry",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmMonCardServiceId",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmMonCardIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "Status information and control variables for the ports on a single card."
  },
  "mrmMonCardServiceId": {
    "name": "mrmMonCardServiceId",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This parameter is used as the first of two indices in this table. A modular chassis contains potentially many repeater services. Each repeater service contains a number of cards (or groups). In order to uniquely identify a port it is necessary to specify both the repeater service and the card within that repeater."
  },
  "mrmMonCardIndex": {
    "name": "mrmMonCardIndex",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is the second part of the key on this table. Having selected one of the repeaters within the chassis it is necessary to identify the card within that repeater."
  },
  "mrmMonCardReadableFrames": {
    "name": "mrmMonCardReadableFrames",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each frame whose OctetCount is greater than or equal to minFrameSize and less than or equal to maxFrameSize and for which FCSError is not asserted that is received for any port on this card."
  },
  "mrmMonCardUnicastFrames": {
    "name": "mrmMonCardUnicastFrames",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each readable frame seen by the Card that is addressed to a unicast (non Card) address."
  },
  "mrmMonCardMulticastFrames": {
    "name": "mrmMonCardMulticastFrames",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each readable frame seen by the Card that is addressed to a multicast (non broadcast) address."
  },
  "mrmMonCardBroadcastFrames": {
    "name": "mrmMonCardBroadcastFrames",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each readable frame seen by the Card that is addressed to the broadcast address ffffffffffff."
  },
  "mrmMonCardReadableOctets": {
    "name": "mrmMonCardReadableOctets",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by the octet count for each readable frame received by any port on this card."
  },
  "mrmMonCardUnicastOctets": {
    "name": "mrmMonCardUnicastOctets",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of octets contained in valid frames that have been received on this port in which the destination field was a unicast address. The approximate minimum time for rollover of this counter is 58 minutes."
  },
  "mrmMonCardMulticastOctets": {
    "name": "mrmMonCardMulticastOctets",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of octets contained in valid frames that have been received on this port in which the destination was a multicast address. The approximate minimum time for rollover of this counter is 58 minutes."
  },
  "mrmMonCardBroadcastOctets": {
    "name": "mrmMonCardBroadcastOctets",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of octets contained in valid frames that have been received on this port in which the destination was the broadcast address ffffffffffff. By attaching a gauge to this counter one can monitor the port for broadcast storms. Action can then be taken to automatically recover network normal operation. The approximate minimum time for rollover of this counter is 58 minutes."
  },
  "mrmMonCardFCSErrors": {
    "name": "mrmMonCardFCSErrors",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each frame with an FCS error that does not have a framing error and which is of legal frame size."
  },
  "mrmMonCardAlignmentErrors": {
    "name": "mrmMonCardAlignmentErrors",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each frame with an FCS error that does have a framing error and which is of legal frame size ."
  },
  "mrmMonCardFrameTooLongs": {
    "name": "mrmMonCardFrameTooLongs",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.13",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each frame whose octet count is greater than the max frame size that is received by the repeater."
  },
  "mrmMonCardShortEvents": {
    "name": "mrmMonCardShortEvents",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.14",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each carrier event whose duration is less than short event max time that is detected."
  },
  "mrmMonCardRunts": {
    "name": "mrmMonCardRunts",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.15",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each carrier event whose duration is greater than short event max time and less than valid packet min time and which does not suffer a collision."
  },
  "mrmMonCardLateEvents": {
    "name": "mrmMonCardLateEvents",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.16",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one each time a collisions occurs after valid packet min time, a late event is counted as both a collision and as a late event."
  },
  "mrmMonCardVeryLongEvents": {
    "name": "mrmMonCardVeryLongEvents",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.17",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one each time a carrier event occurs whose duration is greater than the MAU Jabber Lockup Protection time."
  },
  "mrmMonCardDataRateMismatches": {
    "name": "mrmMonCardDataRateMismatches",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.18",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one each time a packet has been received with the data rate detectably mismatched from the local frequency."
  },
  "mrmMonCardAutoPartitions": {
    "name": "mrmMonCardAutoPartitions",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.19",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one each time the repeater has automatically partitioned any port."
  },
  "mrmMonCardTotalErrors": {
    "name": "mrmMonCardTotalErrors",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.20",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " The total number of errors which have occurred on all ports of this card. This counter is the summation of the values of other error counters (for each port), namely: FCS Errors, Alignment Errors, Frames Too Long, Short Events, Late Events, Very Long Events, Data Rate Mismatches. This counter is redundant in the sense that it is the summation of information already available through other objects. However, it is included specifically because the regular retrieval of this object as a means of tracking the health of a port provides a considerable optimization of network management traffic over the otherwise necessary retrieval of the summed counters."
  },
  "mrmMonCardBound0": {
    "name": "mrmMonCardBound0",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.21",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is a summation of the number of frames (including error frames) with a length of 64 octets which were received by each port on this card."
  },
  "mrmMonCardBound1": {
    "name": "mrmMonCardBound1",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.22",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is a summation of the number of frames (including error frames) with a length of between 65 and 127 octets inclusive which were received by each port on this card."
  },
  "mrmMonCardBound2": {
    "name": "mrmMonCardBound2",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.23",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is a summation of the number of frames (including error frames) with a length of between 128 and 255 octets inclusive which were received by each port on this card."
  },
  "mrmMonCardBound3": {
    "name": "mrmMonCardBound3",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.24",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is a summation of the number of frames (including error frames) with a length of between 256 and 511 octets inclusive which were received by each port on this card."
  },
  "mrmMonCardBound4": {
    "name": "mrmMonCardBound4",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.25",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is a summation of the number of frames (including error frames) with a length of between 512 and 1023 octets inclusive which were received by each port on this card."
  },
  "mrmMonCardBound5": {
    "name": "mrmMonCardBound5",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.26",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is a summation of the number of frames (including error frames) with a length of between 1024 and 1518 octets inclusive which were received by each port on this card."
  },
  "mrmMonCardClearCounters": {
    "name": "mrmMonCardClearCounters",
    "oid": "1.3.6.1.4.1.43.10.17.2.2.1.1.27",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noChangeCounters": 1,
          "clearCounters": 2
        }
      }
    },
    "maxaccess": "write-only",
    "status": "mandatory",
    "description": " This attribute allows all counters on this Card to be cleared."
  },
  "mrmMonitorPortTable": {
    "name": "mrmMonitorPortTable",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "Table of performance and error statistics for the ports."
  },
  "mrmMonitorPortEntry": {
    "name": "mrmMonitorPortEntry",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmMonPortServiceId",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmMonPortCardIndex",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmMonPortIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": " Performance and error statistics for a single port."
  },
  "mrmMonPortServiceId": {
    "name": "mrmMonPortServiceId",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 1024
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This parameter selects one of the repeaters within the chassis. This forms the first, most significant index column. Having selected a repeater one must select a card then port within that repeater."
  },
  "mrmMonPortCardIndex": {
    "name": "mrmMonPortCardIndex",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This attribute uniquely identifies this Card within the repeater, it is part of the index for the port table."
  },
  "mrmMonPortIndex": {
    "name": "mrmMonPortIndex",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This attribute uniquely identifies this port within the Card, it is part of the index for the port table."
  },
  "mrmMonPortReadableFrames": {
    "name": "mrmMonPortReadableFrames",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of frames of valid frame length that have been received on this port. This counter is incremented by one for each frame received on this port whose OctetCount is greater than or equal to minFrameSize and less than or equal to maxFrameSize (Ref: IEEE 802.3 Std, 4.4.2.1) and for which the FCSError and CollisionEvent signals are not asserted. This statistic provides one of the parameters necessary for obtaining the packet error rate. The approximate minimum time for rollover of this counter is 80 hours."
  },
  "mrmMonPortUnicastFrames": {
    "name": "mrmMonPortUnicastFrames",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each readable frame seen by the Card that is addressed to a unicast (non Card) address."
  },
  "mrmMonPortMulticastFrames": {
    "name": "mrmMonPortMulticastFrames",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each readable frame seen by the Card that is addressed to a multicast (non broadcast) address."
  },
  "mrmMonPortBroadcastFrames": {
    "name": "mrmMonPortBroadcastFrames",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each readable frame seen by the Card that is addressed to the broadcast address."
  },
  "mrmMonPortReadableOctets": {
    "name": "mrmMonPortReadableOctets",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of octets contained in valid frames that have been received on this port. This counter is incremented by OctetCount for each frame received on this port which has been determined to be a readable frame. This statistic provides an indicator of the total data transferred. The approximate minimum time for rollover of this counter is 58 minutes."
  },
  "mrmMonPortUnicastOctets": {
    "name": "mrmMonPortUnicastOctets",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of octets contained in valid frames that have been received on this port in which the destination field was a unicast address. The approximate minimum time for rollover of this counter is 58 minutes."
  },
  "mrmMonPortMulticastOctets": {
    "name": "mrmMonPortMulticastOctets",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of octets contained in valid frames that have been received on this port in which the destination was a multicast address. The approximate minimum time for rollover of this counter is 58 minutes."
  },
  "mrmMonPortBroadcastOctets": {
    "name": "mrmMonPortBroadcastOctets",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of octets contained in valid frames that have been received on this port in which the destination was the broadcast address ffffffffffff. By attaching a gauge to this counter one can monitor the port for broadcast storms. Action can then be taken to automatically recover network normal operation. The approximate minimum time for rollover of this counter is 58 minutes."
  },
  "mrmMonPortFCSErrors": {
    "name": "mrmMonPortFCSErrors",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each frame received on this port with the FCSError signal asserted and the FramingError and CollisionEvent signals deasserted and whose OctetCount is greater than or equal to minFrameSize and less than or equal to maxFrameSize (Ref: 4.4.2.1, IEEE 802.3 Std). The approximate minimum time for rollover of this counter is 80 hours."
  },
  "mrmMonPortAlignmentErrors": {
    "name": "mrmMonPortAlignmentErrors",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.13",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each frame received on this port with the FCSError and FramingError signals asserted and CollisionEvent signal deasserted and whose OctetCount is greater than or equal to minFrameSize and less than or equal to maxFrameSize (Ref: IEEE 802.3 Std, 4.4.2.1). If rptrMonitorPortAlignmentErrors is incremented then the rptrMonitorPortFCSErrors Counter shall not be incremented for the same frame. The approximate minimum time for rollover of this counter is 80 hours."
  },
  "mrmMonPortFrameTooLongs": {
    "name": "mrmMonPortFrameTooLongs",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.14",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each frame received on this port whose OctetCount is greater than maxFrameSize (Ref: 4.4.2.1, IEEE 802.3 Std). If this parameter is incremented then neither the alignment error nor the FCS error counters shall be incremented for the frame. The approximate minimum time for rollover of this counter is 61 days."
  },
  "mrmMonPortShortEvents": {
    "name": "mrmMonPortShortEvents",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.15",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each CarrierEvent on this port with ActivityDuration less than ShortEventMaxTime. ShortEventMaxTime is greater than 74 bit times and less than 82 bit times. ShortEventMaxTime has tolerances included to provide for circuit losses between a conformance test point at the AUI and the measurement point within the state machine. Note: shortEvents may indicate externally generated noise hits which will cause the repeater to transmit Runts to its other ports, or propagate a collision (which may be late) back to the transmitting DTE and damaged frames to the rest of the network. The approximate minimum time for rollover of this counter is 16 hours."
  },
  "mrmMonPortRunts": {
    "name": "mrmMonPortRunts",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.16",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each CarrierEvent on this port that meets one of the following two conditions. Only one test need be made. a) The ActivityDuration is greater than ShortEventMaxTime and less than ValidPacketMinTime and the CollisionEvent signal is deasserted. b) The OctetCount is less than 64, the ActivityDuration is greater than ShortEventMaxTime and the CollisionEvent signal is deasserted. ValidPacketMinTime is greater than or equal to 552 bit times and less than 565 bit times. An event whose length is greater than 74 bit times but less than 82 bit times shall increment either the shortEvents counter or the runts counter but not both. A CarrierEvent greater than or equal to 552 bit times but less than 565 bit times may or may not be counted as a runt. ValidPacketMinTime has tolerances included to provide for circuit losses between a conformance test point at the AUI and the measurement point within the state machine. Runts usually indicate collision fragments, a normal network event. In certain situations associated with large diameter networks a percentage of runts may exceed ValidPacketMinTime. The approximate minimum time for rollover of this counter is 16 hours."
  },
  "mrmMonPortCollisions": {
    "name": "mrmMonPortCollisions",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.17",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one each time a collision is detected on this port or when the CollisionEvent signal is asserted on this port. The approximate minimum time for rollover of this counter is 16 hours."
  },
  "mrmMonPortLateEvents": {
    "name": "mrmMonPortLateEvents",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.18",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each CarrierEvent on this port in which the CollIn(X) variable transitions to the value SQE (Ref: 9.6.6.2, IEEE 802.3 Std) while the ActivityDuration is greater than the LateEventThreshold. Such a CarrierEvent is counted twice, as both a collision and as a lateEvent. The LateEventThreshold is greater than 480 bit times and less than 565 bit times. LateEventThreshold has tolerances included to permit an implementation to build a single threshold to serve as both the LateEventThreshold and ValidPacketMinTime threshold. The approximate minimum time for rollover of this counter is 81 hours."
  },
  "mrmMonPortVeryLongEvents": {
    "name": "mrmMonPortVeryLongEvents",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.19",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each CarrierEvent on this port whose ActivityDuration is greater than the MAU Jabber Lockup Protection timer TW3 (Ref: 9.6.1 & 9.6.5, IEEE 802.3 Std). Other counters may be incremented as appropriate."
  },
  "mrmMonPortDataRateMismatches": {
    "name": "mrmMonPortDataRateMismatches",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.20",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each frame received on this port that meets all of the following conditions: a) The CollisionEvent signal is not asserted. b) The ActivityDuration is greater than ValidPacketMinTime. c) The frequency (data rate) is detectably mismatched from the local transmit frequency. The exact degree of mismatch is vendor specific and is to be defined by the vendor for conformance testing. When this event occurs, other counters whose increment conditions were satisfied may or may not also be incremented, at the implementor's discretion. Whether or not the repeater was able to maintain data integrity is beyond the scope of this standard."
  },
  "mrmMonPortAutoPartitions": {
    "name": "mrmMonPortAutoPartitions",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.21",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This counter is incremented by one for each time the repeater has automatically partitioned this port. The conditions that cause port partitioning are specified in the partition state machine in Section 9 [IEEE 802.3 Std]. They are not differentiated here."
  },
  "mrmMonPortTotalErrors": {
    "name": "mrmMonPortTotalErrors",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.22",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " The total number of errors which have occurred on this port. This counter is the summation of the values of other error counters (for the same port), namely: FCS Errors, Alignment Errors, Frames Too Long, Short Events, Late Events, Very Long Events, Data Rate Mismatches. This counter is redundant in the sense that it is the summation of information already available through other objects. However, it is included specifically because the regular retrieval of this object as a means of tracking the health of a port provides a considerable optimization of network management traffic over the otherwise necessary retrieval of the summed counters."
  },
  "mrmMonPortBound0": {
    "name": "mrmMonPortBound0",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.23",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of frames (including error frames) with a length of 64 octets which were received on this port."
  },
  "mrmMonPortBound1": {
    "name": "mrmMonPortBound1",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.24",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of frames (including error frames) with a length of between 65 and 127 octets inclusive which were received on this port."
  },
  "mrmMonPortBound2": {
    "name": "mrmMonPortBound2",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.25",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of frames (including error frames) with a length of between 128 and 255 octets inclusive which were received on this port."
  },
  "mrmMonPortBound3": {
    "name": "mrmMonPortBound3",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.26",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of frames (including error frames) with a length of between 256 and 511 octets inclusive which were received on this port."
  },
  "mrmMonPortBound4": {
    "name": "mrmMonPortBound4",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.27",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of frames (including error frames) with a length of between 512 and 1023 octets inclusive which were received on this port."
  },
  "mrmMonPortBound5": {
    "name": "mrmMonPortBound5",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.28",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This object is the number of frames (including error frames) with a length of between 1024 and 1518 octets inclusive which were received on this port."
  },
  "mrmMonPortBandwidthUsed": {
    "name": "mrmMonPortBandwidthUsed",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.29",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is a high level 'smart MIB' object. This object provides a running average of the bandwidth in use. This value is calculated locally on the agent and so does not require processor bandwidth from the management station or occupy valuable network bandwidth communicating with that station. By default an agent supporting this parameter will exhibit the following characteristics: 1) The parameter will be recalculated at approx 15 second intervals 2) Every calculation period the device will read the value of mrmMonPortReadableOctets. 3) The calculation will be performed on the most recent 4 samples as follows: 4 Sum(sample(i)/(time(i) * K)) * 100/4 i=1 Sample(i) is mrmMonPortReadableOctets(i)-mrmMonPortReadableOctets(i-1) time(i) is the time between sample(i-1) and sample(i) K is the max bytes per unit time (i.e. the available bandwidth K depends on the ring speed. The value is expressed as a percentage. A default threshold exists on this average so that if a calculated average exceeds 15% a trap will be sent to the management station. Further traps will not be sent until the average drops to below 10%. A particular device may provide a means of changing the number of samples, the averaging period, threshold and threshold action if it so wishes."
  },
  "mrmMonPortErrorsPer10000Packets": {
    "name": "mrmMonPortErrorsPer10000Packets",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.30",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is a high level 'smart MIB' object. This object provides a running average of the bandwidth in use. The value of this value is calculated locally on the agent and so does not require processor bandwidth from a management station or occupy valuable network bandwidth communicating with that station. By default an agent supporting this parameter will exhibit the following behaviour: 1) The parameter will be recalculated at approx 15 second intervals. 2) Every calculation period the device will read the value of mrmMonPortTotalErrors and mrmMonPortReadableFrames. 3) The calculation will be performed on the most recent 4 samples as follows: 4 10000 * Sum(Errors(i)/Frames(i)) i=1 Errors(i) = mrmMonPortTotalErrors(i)-mrmMonPortTotalErrors(i-1) Frames(i) = mrmMonPortReadableFrames(i)-mrmMonPortReadableFrames(i-1) The value is an integer number of errors per 10,000 packets received by this repeater. A default threshold exists on this average so that if a calculated average exceeds 200 (i.e. 2% of frames are in error) a trap will be sent to the management station. Further traps will not be sent until the average drops to below 100 (i.e. 1% of frames are in error). A particular device may provide a means of changing the number of samples, the averaging period and threshold if it so wishes."
  },
  "mrmMonPortClearCounters": {
    "name": "mrmMonPortClearCounters",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.31",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noChangeCounters": 1,
          "clearCounters": 2
        }
      }
    },
    "maxaccess": "write-only",
    "status": "mandatory",
    "description": " This attribute allows all counters on this Port to be cleared."
  },
  "mrmMonPortLastAddress": {
    "name": "mrmMonPortLastAddress",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.32",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is the last MAC address seen on this port."
  },
  "mrmMonPortAddressChanges": {
    "name": "mrmMonPortAddressChanges",
    "oid": "1.3.6.1.4.1.43.10.17.2.3.1.1.33",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is a count of the number of times the MAC address on this port has changed. A high number of changes indicates this is either an inter-repeater link or a multi-drop segment."
  },
  "trafficLevel": {
    "name": "trafficLevel",
    "oid": "1.3.6.1.4.1.43.10.17.2.4.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is a dummy 'smart MIB' object which is used internally by the agent to provide a running average of the bandwidth in use. It should not be accessed by a management station and is used by the logic which calculates the value of its associated object 'mrmMonPortBandwidthUsed'. See 'mrmMonPortBandwidthUsed' for a description of how the bandwidth used is calculated."
  },
  "errorFrames": {
    "name": "errorFrames",
    "oid": "1.3.6.1.4.1.43.10.17.2.4.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "Counter",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": " This is a dummy 'smart MIB' object which is used internally by the agent to provide a running average of the error rate. It should not be accessed by a management station and is used by the logic which calculates the value of its associated object 'mrmMonPortErrorsPer10000Packets'. See 'mrmMonPortErrorsPer10000Packets' for a description of how the error rate is calculated."
  },
  "repPartitionStateChange": {
    "name": "repPartitionStateChange",
    "oid": "1.3.6.1.4.1.430.38",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmPortAutoPartitionState"
      }
    ],
    "description": " This trap is sent when the partition state of a port changes. The trap is accompanied by the new partition state of the port."
  },
  "repLinkStateChange": {
    "name": "repLinkStateChange",
    "oid": "1.3.6.1.4.1.430.39",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmPortLinkState"
      }
    ],
    "description": " This trap is sent when the link state of a port changes. The var-bind identifies which port has changed state and what the new state of that port is."
  },
  "repAdminStateChange": {
    "name": "repAdminStateChange",
    "oid": "1.3.6.1.4.1.430.40",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmPortAdminStatus"
      }
    ],
    "description": " This trap is only sent when the administration state of a port is changed by a gauge. It is not sent if a user initiates a state change via SNMP, Telnet or the V.24 terminal interface."
  },
  "repPortTopUsage": {
    "name": "repPortTopUsage",
    "oid": "1.3.6.1.4.1.430.41",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmMonPortBandwidthUsed"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "gaugeThresholdLevel"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "gaugeSamplePeriod"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "gaugeSamplesPerAverage"
      }
    ],
    "description": " This trap is sent when the port bandwidth used exceeds the defined threshold. This threshold is by default 15%, although this may have been changed on a particular device."
  },
  "repPortErrors": {
    "name": "repPortErrors",
    "oid": "1.3.6.1.4.1.430.42",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "mrmMonPortErrorsPer10000Packets"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "gaugeThresholdLevel"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "gaugeSamplePeriod"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "gaugeSamplesPerAverage"
      }
    ],
    "description": " This trap is sent when the errors per packet exceeds the the defined threshold."
  },
  "ringBuilder": {
    "name": "ringBuilder",
    "oid": "1.3.6.1.4.1.43.14.3",
    "class": "objectidentity"
  },
  "ringBuilderTable": {
    "name": "ringBuilderTable",
    "oid": "1.3.6.1.4.1.43.14.3.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "This table contains information about the LinkBuilder MSH Ring Builder module."
  },
  "ringBuilderTableEntry": {
    "name": "ringBuilderTableEntry",
    "oid": "1.3.6.1.4.1.43.14.3.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rbServiceId",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "This table contains an entry for each ring builder in a chassis."
  },
  "rbServiceId": {
    "name": "rbServiceId",
    "oid": "1.3.6.1.4.1.43.14.3.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This identifies one of potentially several ring builders within the chassis."
  },
  "rbRingInMedia": {
    "name": "rbRingInMedia",
    "oid": "1.3.6.1.4.1.43.14.3.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unknown": 1,
          "unshieldedTp": 2,
          "shieldedTp": 3,
          "fiber": 4
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object identifies the physical media to which the Ring In port of the Ring Builder is, or could be, connected."
  },
  "rbRingInMode": {
    "name": "rbRingInMode",
    "oid": "1.3.6.1.4.1.43.14.3.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "openRing": 1,
          "wrapRing": 2,
          "failSafe": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Each ring builder has two external trunk connections by which a ring builder may be connected to other token ring devices capable of supporting a backup path, e.g. another ring builder. Each external connection attaches to a dual ring cable. One of the rings is used to carry traffic in a fault free network. The other ring is used as a backup. If an error should be detected on the main ring then suitable stations can wrap the active path onto the backup. The ring builder is such a device. The fault recovery is handled at the ring in and ring out ports. Each of these two connections may be placed in one of the following states: openRing (1):- This external connection is configured to be connected to the external ring. NOTE: In this mode if there is no external ring the ring will be broken. wrapRing (2):- This external connection is configured to be isolated from the remote ring such that the external ring in/out port is looped from main to backup ring. failSafe (3):- In this mode the ring builder monitors the ring in signal for a phantom voltage. If this is present then the external connection is placed into OPEN state. If the phantom voltage is not present then the external connection is placed in WRAP state. In this mode the actual state of the connection can be obtained by reading the state parameter. Note that not all devices support the generation of a phantom voltage and so the failSafe mode may not be appropriate."
  },
  "rbRingInState": {
    "name": "rbRingInState",
    "oid": "1.3.6.1.4.1.43.14.3.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "open": 1,
          "wrap": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Each ring builder has two external trunk connections by which a ring builder may be connected to other token ring devices capable of supporting a backup path, e.g. another ring builder. Each external connection attaches to a dual ring cable. One of the rings is used to carry traffic in a fault free network. The other ring is used as a backup. If an error should be detected on the main ring then suitable stations can wrap the active path onto the backup. The ring builder is such a device. The fault recovery is handled at the ring in and ring out ports. Control of the external connections is via the Ring In Mode parameter. If the connection is in FAIL-SAFE mode this parameter reflects the automatically determined state of the connection. If the mode is NOT FAIL-SAFE this parameter will read the same as the mode parameter."
  },
  "rbRingOutMedia": {
    "name": "rbRingOutMedia",
    "oid": "1.3.6.1.4.1.43.14.3.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unknown": 1,
          "unshieldedTp": 2,
          "shieldedTp": 3,
          "fiber": 4
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object identifies the physical media to which the Ring Out port of the Ring Builder is, or could be, connected."
  },
  "rbRingOutMode": {
    "name": "rbRingOutMode",
    "oid": "1.3.6.1.4.1.43.14.3.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "openRing": 1,
          "wrapRing": 2,
          "failSafe": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Each ring builder has two external trunk connections by which a ring builder may be connected to other token ring devices capable of supporting a backup path, e.g. another ring builder. Each external connection attaches to a dual ring cable. One of the rings is used to carry traffic in a fault free network. The other ring is used as a backup. If an error should be detected on the main ring then suitable stations can wrap the active path onto the backup. The ring builder is such a device. The fault recovery is handled at the ring in and ring out ports. Each of these two connections may be placed in one of the following states: openRing (1):- This external connection is configured to be connected to the external ring. NOTE: In this mode if there is no external ring the ring will be broken. wrapRing (2):- This external connection is configured to isolated from the remote ring such that the external ring in/out port is looped from main to backup ring. failSafe (3):- In this mode the ring builder monitors the ring in signal for a phantom voltage. If this is present then the external connection is placed into OPEN state. If the phantom voltage is not present then the external connection is placed in WRAP state. In this mode the actual state of the connection can be obtained by reading the state parameter. Note that not all devices support the generation of a phantom voltage and so the FAIL-SAFE mode may not be appropriate."
  },
  "rbRingOutState": {
    "name": "rbRingOutState",
    "oid": "1.3.6.1.4.1.43.14.3.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "open": 1,
          "wrap": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Each ring builder has two external trunk connections by which a ring builder may be connected to other token ring devices capable of supporting a backup path, e.g. another ring builder. Each external connection attaches to a dual ring cable. One of the rings is used to carry traffic in a fault free network. The other ring is used as a backup. If an error should be detected on the main ring then suitable stations can wrap the active path onto the backup. The ring builder is such a device. The fault recovery is handled at the ring in and ring out ports. Control of the external connections is via the Ring In Mode parameter. If the connection is in FAIL-SAFE mode this parameter reflects the automatically determined state of the connection. If the mode is NOT FAIL-SAFE this parameter will read the same as the mode parameter."
  },
  "rbMode": {
    "name": "rbMode",
    "oid": "1.3.6.1.4.1.43.14.3.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "normal": 1,
          "repeater": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "As well as providing control over network connection at the ring in and ring out ports, the Ringbuilder has three modes that also control the interaction with the rest of the ring. Mode normal (1):- In this mode the ringbuilder's connections are determined by the states of the Ring In and Ring Out ports. Mode repeater (2):- In this mode, the Ring In port is connected directly to the Ring Out port internally in the Ringbuilder. The external rings (main and backup) are passed straight through, while the MAUs controlled by the Ringbuilder are maintained as a stand-alone ring. In this mode, if either the Ring In or the Ring Out port is wrapped then both are forced to wrap, and the internal ring is unaffected."
  },
  "rbTest": {
    "name": "rbTest",
    "oid": "1.3.6.1.4.1.43.14.3.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "noTest": 1,
          "test": 2,
          "testing": 3,
          "pass": 4,
          "fail": 5
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Setting this object to test(2) causes the Ringbuilder to execute a test by transmitting a frame to itself and checking that it is properly received. The test does not disrupt the operation of the ring. Initially the value of this object is noTest(1), indicating that no test has yet been performed. After a test has been requested the value read is testing(3) if a test is in progress, or pass(4) or fail(5) depending on the result of the last test executed."
  },
  "rbDRIState": {
    "name": "rbDRIState",
    "oid": "1.3.6.1.4.1.43.14.3.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "disabled": 1,
          "enabled": 2,
          "enabledWithLock": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Distributive Recovery Interface ( DRI ) allows the Active MAU to determine which of its stations are beaconing or causing problems on the ring. MAU ports are disabled one at a time , until the faulty station has been removed from the ring. THe MAU port remains disabled until the station is removed , unless the is enabled with locking. If DRI lock is enabled the port will remain disabled until re-enabled by management."
  },
  "ringMauPortTable": {
    "name": "ringMauPortTable",
    "oid": "1.3.6.1.4.1.43.14.3.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "This table contains an entry for every port on every MAU in the local ring section controlled by the ring builder."
  },
  "ringMauPortTableEntry": {
    "name": "ringMauPortTableEntry",
    "oid": "1.3.6.1.4.1.43.14.3.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rbMauServiceId",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rbMauSlot",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rbMauPort",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "This table contains an entry for every MAU port in the local ring section."
  },
  "rbMauServiceId": {
    "name": "rbMauServiceId",
    "oid": "1.3.6.1.4.1.43.14.3.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This identifies one of potentially several ring builders within the chassis."
  },
  "rbMauSlot": {
    "name": "rbMauSlot",
    "oid": "1.3.6.1.4.1.43.14.3.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Each ring service is implemented by a ring builder and a number of MAU cards. Each MAU card provides a number of ports to which Token Ring stations connect. This object identifies the card to which this row in the table applies."
  },
  "rbMauPort": {
    "name": "rbMauPort",
    "oid": "1.3.6.1.4.1.43.14.3.2.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Each MAU card contains a number of ports. A row in this table represents one of those ports. This index identifies that port."
  },
  "rbMauMedia": {
    "name": "rbMauMedia",
    "oid": "1.3.6.1.4.1.43.14.3.2.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unknown": 1,
          "unshieldedTp": 2,
          "shieldedTp": 3,
          "fiber": 4,
          "twistedPair": 5
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This object identifies the physical media to which this MAU port is, or could be, connected."
  },
  "rbMauPortAdminState": {
    "name": "rbMauPortAdminState",
    "oid": "1.3.6.1.4.1.43.14.3.2.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enabled": 1,
          "disabled": 2
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Each MAU port may be enabled or disabled for insertion. Enabling a port means that if some station should attempt to insert on that port then it will be connected into the ring. Disabled means that any station currently connected into the ring on this port will be removed and that subsequent insertion requests will be denied."
  },
  "rbMauPortAttachState": {
    "name": "rbMauPortAttachState",
    "oid": "1.3.6.1.4.1.43.14.3.2.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "absent": 1,
          "present": 2
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Each MAU port is capable of determining whether a station is currently asserting phantom voltage on that port. This indicates that a station is successfully attached to the ring or whether it is attempting to attach. Note that if this object is supported then must correctly reflect the phantom voltage driven by the station regardless of the admin state of the port. Note also that if the admin state is disabled and there is a change in this object a trap is sent to the management station."
  },
  "rbMauPortZDLState": {
    "name": "rbMauPortZDLState",
    "oid": "1.3.6.1.4.1.43.14.3.2.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enabled": 1,
          "disabled": 2,
          "notSupported": 3
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Zero Delay Lock-out(ZDL) enables the Active MAU to lock-out any station which is transmitting poor quality data , or is set to the wrong ring speed. ZDL locks out a port instantly; there is no delay before the port is disabled. If a station which has been locked out de-asserts its phantom , the port is immediately re-enabled."
  },
  "rbMauPortDisableReason": {
    "name": "rbMauPortDisableReason",
    "oid": "1.3.6.1.4.1.43.14.3.2.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "none": 1,
          "disabledByMgmt": 2,
          "disabledByZDL": 3,
          "disabledByDRI": 4
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This item indicates the reason for disabling a port. "
  },
  "ringBuilderMACTable": {
    "name": "ringBuilderMACTable",
    "oid": "1.3.6.1.4.1.43.14.3.3",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "This is a table of the MAC address(es) assigned to the Ringbuilder card."
  },
  "ringBuilderMACTableEntry": {
    "name": "ringBuilderMACTableEntry",
    "oid": "1.3.6.1.4.1.43.14.3.3.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rbMACServiceId",
        "implied": 0
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rbMACinstance",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "This table contains an entry for each MAC on each ring builder in a chassis."
  },
  "rbMACServiceId": {
    "name": "rbMACServiceId",
    "oid": "1.3.6.1.4.1.43.14.3.3.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This identifies one of potentially several ring builders within the chassis."
  },
  "rbMACinstance": {
    "name": "rbMACinstance",
    "oid": "1.3.6.1.4.1.43.14.3.3.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "A Ringbuilder has two MACs, one for the main ring and one for the backup ring. The main ring is MAC instance 1, and the backup ring MAC instance 2."
  },
  "rbMACAddress": {
    "name": "rbMACAddress",
    "oid": "1.3.6.1.4.1.43.14.3.3.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "PhysAddress",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This is the MAC address for the specified Ringbuilder and MAC instance."
  },
  "a3ComAttachStateChange": {
    "name": "a3ComAttachStateChange",
    "oid": "1.3.6.1.4.1.430.49",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rbMauPortAttachState"
      }
    ],
    "description": "This trap is sent if the value of the attach state for a particular port changes AND the admin state of that port is disabled."
  },
  "rbRingInStateChange": {
    "name": "rbRingInStateChange",
    "oid": "1.3.6.1.4.1.430.50",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rbRingInState"
      }
    ],
    "description": "This trap is sent if the Ring In port changes state while the mode of the port is 'fail safe'."
  },
  "rbRingOutStateChange": {
    "name": "rbRingOutStateChange",
    "oid": "1.3.6.1.4.1.430.51",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rbRingOutState"
      }
    ],
    "description": "This trap is sent if the Ring Out port changes state while the mode of the port is 'fail safe'."
  },
  "rbMauPortStateChange": {
    "name": "rbMauPortStateChange",
    "oid": "1.3.6.1.4.1.430.60",
    "class": "notificationtype",
    "objects": [
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rbMauPortAdminState"
      },
      {
        "module": "LBHUB-MSH-MIB",
        "object": "rbMauPortDisableReason"
      }
    ],
    "description": "This trap is sent if the MAU port changes state due to operation of ZDL or DRI."
  },
  "meta": {
    "comments": [
      "ASN.1 source file://MIBS/asn1/LBHUB-MSH-MIB.mib",
      "Produced by pysmi-0.3.4 at Tue Apr 20 16:27:12 2021",
      "On host samy-ThinkPad-T495s platform Linux version 5.8.0-50-generic by user root",
      "Using Python version 3.8.5 (default, Jan 27 2021, 15:41:15) "
    ],
    "module": "LBHUB-MSH-MIB"
  }
}