--
--  Switch MIB Release:                 9.2
--
--  Compatible StrataView Plus Release: 9.2  
--  

STRATACOM-MIB
        --FORCE-INCLUDE <snmp_auxfuncs.h>
        --FORCE-INCLUDE <snmp_asn1.h>
        --FORCE-INCLUDE <snmp_mib.h>
        --FORCE-INCLUDE <snmp_buffer.h>
        --FORCE-INCLUDE <snmpdefs.h>
        --FORCE-INCLUDE <atmf.h>
        --FORCE-INCLUDE <proto/nwapps/null_set.h>
 
        -- all functions can use %n for object name and
        -- %t for object type, %p for parent name,
        -- %d for name of default-bearing node and %% for %
        --DEFAULT test-function   it_exists
        --DEFAULT set-function    null_set_proc
        --DEFAULT get-function    get_%n
        --DEFAULT next-function   std_next
        --DEFAULT view-mask       PUBLIC_VIEW
        --DEFAULT cookie          (char *)NULL
        --DEFAULT locator          0

DEFINITIONS ::= BEGIN

-- This MIB has not been officially released to the N.I.C.

    IMPORTS
        enterprises, Counter, IpAddress   FROM RFC1155-SMI
        OBJECT-TYPE                       FROM RFC-1212
        DisplayString                     FROM RFC1213-MIB;

    stratacom             OBJECT IDENTIFIER ::= { enterprises 351 }
    strmErrors            OBJECT IDENTIFIER ::= { stratacom 910}
    snmpAgents            OBJECT IDENTIFIER ::= { stratacom 100}
    strmSwitchMIB         OBJECT IDENTIFIER ::= { snmpAgents 4 }


    switchInterfaces      OBJECT IDENTIFIER ::= { strmSwitchMIB 1 }
    switchServiceObjects  OBJECT IDENTIFIER ::= { strmSwitchMIB 2 }
    switchConnection      OBJECT IDENTIFIER ::= { strmSwitchMIB 3 }
    switchShelf           OBJECT IDENTIFIER ::= { strmSwitchMIB 4 }
    switchMedia           OBJECT IDENTIFIER ::= { strmSwitchMIB 5 }

    frServiceObjects      OBJECT IDENTIFIER ::= { switchServiceObjects 1 }
    atmServiceObjects     OBJECT IDENTIFIER ::= { switchServiceObjects 2 }
    voiceServiceObjects   OBJECT IDENTIFIER ::= { switchServiceObjects 3 }
    trunkServiceObjects   OBJECT IDENTIFIER ::= { switchServiceObjects 4 }
    lineServiceObjects    OBJECT IDENTIFIER ::= { switchServiceObjects 5 }
    rsrcServiceObjects    OBJECT IDENTIFIER ::= { switchServiceObjects 6 }

    shelfCnfgObjects      OBJECT IDENTIFIER ::= { switchShelf 1 }
    shelfInfoObjects      OBJECT IDENTIFIER ::= { switchShelf 2 }
    shelfTrapObjects      OBJECT IDENTIFIER ::= { switchShelf 3 }

--
-- The following product IDs are also defined in CISCO-PRODUCTS-MIB.oid
-- on Cisco's Web.
--
-- The object identifiers that are
-- assigned to various hardware platforms, and hence are
-- returned as values for sysObjectID
--
 cisco         OBJECT IDENTIFIER ::= { enterprises 9 }
 ciscoProducts OBJECT IDENTIFIER ::= { cisco 1 }

-- ciscoIGX8410: Cisco IGX 8400 (Integrated Gigabit eXchange) series
--               wide-area switch with 8 slots
-- ciscoIGX8420: Cisco IGX 8400 (Integrated Gigabit eXchange) series
--               wide-area switch with 16 slots
-- ciscoIGX8430: Cisco IGX 8400 (Integrated Gigabit eXchange) series
--               wide-area switch with 32 slots
-- ciscoIGX8450  Cisco IGX 8400 (Integrated Gigabit eXchange) series
--               wide-area switch with integrated internal MGX feeder
-- 
ciscoIGX8410  OBJECT IDENTIFIER ::= { ciscoProducts 232 }
ciscoIGX8420  OBJECT IDENTIFIER ::= { ciscoProducts 233 }
ciscoIGX8430  OBJECT IDENTIFIER ::= { ciscoProducts 234 }
ciscoIGX8450  OBJECT IDENTIFIER ::= { ciscoProducts 235 }

--
-- ciscoBPX8620: Cisco BPX 8600 (Broadband Packet eXchange) series
--               basic wide-area switch with 15 slots
-- ciscoBPX8650  Cisco BPX 8600 (Braoadband Packet eXchange) series
--               wide-area switch with integrated tag switching controller
--               and 15 slots
-- ciscoBPX8680  Cisco BPX 8600 (Broadband Packet eXchange) series
--               wide-area switch with integrated MGX feeder and 15 slots
--
ciscoBPX8620  OBJECT IDENTIFIER ::= { ciscoProducts 237 }
ciscoBPX8650  OBJECT IDENTIFIER ::= { ciscoProducts 238 }
ciscoBPX8680  OBJECT IDENTIFIER ::= { ciscoProducts 239 }

 

-- The following describes the MIB variables for the switchIFTable.
-- This table supports functions equivalent to CLI commands uptrk,
-- dntrk, addtrk, deltrk, upln, dnln. Described below are the objects
-- and correct values to be given for each case:
--
-- ifindex = switchIfSlot * 1,000,000 + switchIfPort * 10,000 + 
--           switchIfSubPort
-- 
--------
--Trunks
--------
--
--
--
--. uptrk
--  . IMA Routing Trunks ( UXM on IGX )
--    . switchIfAdmStatus = up(1)
--    . switchIfService   = imaRoutingTrk(11) 
--    . switchPhysPorts   = Valid bit-map of ports.
--  .   If only one or none of the bits are set in the bit map, 
--      then GenErr error will be returned.
--
--. uptrk
--  . ATM Routing Trunks (BNI, BXM)
--    . switchIfAdmStatus = up(1)
--    . switchIfService   = atmRoutingTrk(6)

--  . Axis Feeder Trunks
--    . switchIfAdmStatus = up(1)
--    . switchIfService   = atmRoutingTrk(6) or
--                          atmAxisIntfTrk(7) 
--  . IPX Feeder Trunks
--    . switchIfAdmStatus = up(1)
--    . switchIfService   = atmRoutingTrk(6)  or
--                          atmIPXAFIntfTrk(8)
--  
--  . ESP Feeder Trunks
--    . switchIfAdmStatus = up(1)
--    . switchIfService   = atmRoutingTrk(6)
--
--  . VSI Feeder Trunks
--    . switchIfAdmStatus = up(1)
--    . switchIfService   = atmRoutingTrk(6) 
--
--  . PAR Feeder Trunks
--    . switchIfAdmStatus = up(1)
--    . switchIfService   = atmRoutingTrk(6)
--  
--. dntrk
--  . ATM Trunks (BNI, BXM)
--    . switchIfAdmStatus = down(2)
--    . switchIfService   = atmRoutingTrk(6)
--
--  . Axis Feeders
--    . switchIfAdmStatus = down(2)
--    . switchIfService   = atmRoutingTrk(6)
--
--  . IPX Feeders
--    . switchIfAdmStatus = down(2)
--    . switchIfService   = atmRoutingTrk(6)
--
--  . ESP Feeder Trunks
--    . switchIfAdmStatus = down(2)
--    . switchIfService   = atmRoutingTrk(6)
--
--  . VSI Feeder Trunks
--    . switchIfAdmStatus = down(2)
--    . switchIfService   = atmRoutingTrk(6)
--
--  . PAR Feeder Trunks
--    . switchIfAdmStatus = down(2)
--    . switchIfService   = atmRoutingTrk(6)
--  
--. addtrk
--  . IMA Routing Trunk
--    . switchIfAdmStatus = added(6)
--    . switchIfService   = imaRoutingTrk(11) 
--
--  . ATM Routing Trunks (BNI, BXM)
--    . switchIfAdmStatus = added(6)
--    . switchIfService   = atmRoutingTrk(6)
--   
-- ---------------------------------
--  Adding a physical/virtual trunk:
-- ---------------------------------
-- -----------------------------------------------------------------------------
--                      |      Before addtrk       |      After addtrk         |
-- -----------------------------------------------------------------------------
--     Trunk Params     |   PHY TRK   |   VIR TRK  |   PHY TRK   |   VIR TRK   |
-- -----------------------------------------------------------------------------
--  atmTrkXmitRate      |     Yes     |    Yes     |     No      |      No     |
--  atmTrksResChans     |     No      |    Yes     |     No      |      Yes    |
--  atmTrkVPI           |     No      |    Yes     |     No      |      No     |
--  atmTrkType          |     No      |    Yes     |     No      |      No     |
--  atmTrkTrfCls        |     Yes     |    Yes     |     Yes     |      Yes    |
--  atmTrkPassSync      |     Yes     |    Yes     |     Yes     |      Yes    |
--  atmTrkStatRes       |     Yes     |    Yes     |     Yes     |      Yes    |
--  atmTrkLoopClock     |     Yes     |    Yes     |     Yes     |      Yes    |
--  atmTrkSvcChannels   |     Yes     |    No      |     No      |      No     |
--  atmTrkSvcBw         |     Yes     |    No      |     No      |      No     |
-- -----------------------------------------------------------------------------      
--      
-- Note: Above table lists ATM trunk parameters which can be configured before 
--       addtrk or after. This table can be refererence before adding a trunk 
--       or after adding a trunk. 
--      
--      
--
--. deltrk
--  . IMA Routing Trunk
--    . switchIfAdmStatus = deleted(7)
--    . switchIfService   = imaRoutingTrk(11) 
--
--  . ATM Routing Trunks (BNI, BXM, UXM, BTM)
--    . switchIfAdmStatus = deleted(7)
--    . switchIfService   = atmRoutingTrk(6)
--      
--. addshelf   
--  . Axis Feeders
--    . switchIfAdmStatus = added(6)
--    . switchIfService   = atmAxisIntfTrk(7)
--    
--  . IPX Feeders
--    . switchIfAdmStatus = added(6)
--    . switchIfService   = atmIPXAFIntfTrk(8)
--
--  . VSI shelf
--    . switchIfAdmStatus = added(6)
--    . switchIfService   = atmVsiIntfTrk(13)
--
--  . PAR shelf
--    . switchIfAdmStatus = added(6)
--    . switchIfService   = atmParIntfTrk(14)
--
--. delshelf   
--  . Axis Feeders
--    . switchIfAdmStatus = deleted(7)
--    . switchIfService   = atmAxisIntfTrk(7)
--    
-- . IPX Feeders
--    . switchIfAdmStatus = deleted(7)
--    . switchIfService   = atmIPXAFIntfTrk(8)
--
-- . VSI shelf
--   . switchIfAdmStatus = deleted(7)
--   . switchIfService   = atmVsiIntfTrk(13)
-- 
-- . PAR shelf
--   . switchIfAdmStatus = deleted(7)
--   . switchIfService   = atmParIntfTrk(14)
--
-- . Walk on switchIfTable for imaRoutingTrk
--   . First trunk in forming IMA will have
--   . switchIfService   = imaRoutingTrk(11)
--   . Remainitng trunks forming this IMA trunks will have:
--   . switchIfService   = physicalMedia(12)
--   . switchPhysPorts   = Valid bit-map of ports.
--

--------
--Lines
-------
--. upln
--  . ATM Access Line (ASI, BXM)
--    . switchIfAdmStatus = up(1)
--    . switchIfService   = atmAccessLine(3)
--   
--
--. dnln
--  . ATM Access Line (ASI, BXM)
--    . switchIfAdmStatus = down(2)
--    . switchIfService   = atmAccessLine(3)
--
-- The following describes the MIB variables for the switchIFTable.

switchIfTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF SwitchIfEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A list of ports and subports, and their interfaces"
    --DEFAULT   test-function test_switchiftable
    --DEFAULT   next-function next_switchiftable
    --DEFAULT   get-function  get_switchiftable_%t
        ::= { switchInterfaces 1  }

switchIfEntry OBJECT-TYPE
    SYNTAX      SwitchIfEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A slot-port-subport entry"
    INDEX       { switchIfIndex }
        ::= { switchIfTable 1  }

SwitchIfEntry ::=
    SEQUENCE {
        switchIfIndex         INTEGER,
        switchIfSlot          INTEGER,
        switchIfPort          INTEGER,
        switchIfSubPort       INTEGER,
        switchIfMediaType     INTEGER,
        switchIfService       INTEGER,
        switchIfAdmStatus     INTEGER,
        switchIfOperStatus    INTEGER,
        switchIfPhysPort      INTEGER,
        switchIfPartiId       INTEGER,
        switchIfCtrlerId      INTEGER,
        switchIfScTmpltId     INTEGER,
        switchIfCtrlVPI       INTEGER,
        switchIfCtrlVCIStart  INTEGER
        }

switchIfIndex OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The interface number is the index for the switchIfTable,
                 as well as the switchMedia tables and the Trunk Service
                 tables. The switchIFIndex will be an INTEGER with the
                 value related to the slot, port, and subport as  follows:
                 switchIFIndex = (slot x 1000000)+(port x 10000)+(subport);"
        ::= { switchIfEntry 1  }

switchIfSlot  OBJECT-TYPE
    SYNTAX      INTEGER (1..32)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The slot number."
        ::= { switchIfEntry 2  }

switchIfPort OBJECT-TYPE
    SYNTAX      INTEGER (1..32)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The port number."
        ::= { switchIfEntry 3  }

switchIfSubPort OBJECT-TYPE
    SYNTAX      INTEGER (0..32)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The subport number, used to identify virtual trunks."
        ::= { switchIfEntry 4  }

switchIfMediaType OBJECT-TYPE
    SYNTAX      INTEGER {
                other(1),
                ds1(18),
                serialPort(22),
                ds3(30),
                sonet(39)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The type of interface. This object is normally used to
                 provide information about a media layer, such as ds1, ds3,
                 or sonet."
        ::= { switchIfEntry 5  }

switchIfService OBJECT-TYPE
    SYNTAX      INTEGER {
                other(1),
                frameRelay(2),
                atmAccessPort(3),
                voiceData(4),
                fpRoutingTrk(5),
                atmRoutingTrk(6),
                atmAxisIntfTrk(7),
                atmIPXAFIntfTrk(8),
                atmFdrIntfTrk(9),
                atmAPSIntfTrk(10),
                imaRoutingTrunk(11),
                physicalMedia(12),
                atmVsiIntfTrk(13),
                atmParIntfTrk(14)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "User requested service for logical interface table row.
                atmVsiIntfTrk is only available for BXM resource on BPX.
                IPX cannot support the service."
        ::= { switchIfEntry 6  }

switchIfAdmStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                up(1),
                down(2),
                added(6),
                deleted(7),
                setbitmap(8),
                assginScTmplt(9)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "User requested state for logical interface table row.
                 A user may up, down, add, or delete an interface.
                 The set-request PDU should contain values for both
                 switchIFService and switchAdmStatus. A logical row
                 can be created in the switchIfTable by combining an
                 appropriate switchIFService and switchAdmStatus up(1).
                 switchIFService and switchAdmStatus. A logical row
                 can be deleted from the switchIfTable by combining an
                 appropriate switchIFService and switchAdmStatus down(2).
                 The values for added(6) and deleted(7) can be used 
                 only with a valid Trunk switchIfService (5..8)."
        ::= { switchIfEntry 7  }
 
switchIfOperStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                up(1),
                down(2),
                testing(3),
                unknown(4),
                dormant(5),
                added(6)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The current state for logical interface table row."
        ::= { switchIfEntry 8  }
 
switchIfPhysPort OBJECT-TYPE
    SYNTAX       INTEGER
    ACCESS       read-write
    STATUS       mandatory
    DESCRIPTION "This Integer is a Bit map specifying which physical ports 
                 are used by the IMA trunk. Bits corresponding to the physical 
                 ports forming this IMA trunk will be set to 1. Using this 
                 Integer we can represent maximum 32 ports.
                 For regular ATM Routing trunk bit related to that port will be
                 set. For access lines this field is unused and will return -1.
                 For example:
                 Value       Ports used           Trunk Type
                 _______________________________________________
                   0         Invalid              Invalid
                   1         1                    ATM RoutingTrk
                   2         2                    ATM RoutingTrk
                   3         1 & 2                IMA RoutingTrk
                   4         3                    ATM RoutingTrk
                   5         1 & 3                IMA RoutingTrk
                   15        1,2,3 & 4            IMA RoutingTrk
                "
        ::= { switchIfEntry 9}
 
switchIfPartiId OBJECT-TYPE
    SYNTAX      INTEGER (0..2)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The partition ID for logical interface table row.
                 A partition in the BXM resource is dedicated for
                 control by the corresponding VSI Master. There may
                 be more than one VSI Master assigned to a partition.
                 This is limited to the number of lcns available on
                 the BXM card.  The partition is not available for any 
                 other cards.  0 indicates non-existent partition for
                 all non-VSI controllers. Number of partitions supported
                 is one for 9.1 release and 9.2 initial release.
                 "
        ::= { switchIfEntry 10  }

switchIfCtrlerId OBJECT-TYPE
    SYNTAX      INTEGER (-1..32)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The controller ID for logical interface table row.
                 The ID in the BXM resource is used to identify
                 a VSI master. All masters controlling the same partition
                 must have unique controller id.
                 -1 indicates an invalid controller ID"
        ::= { switchIfEntry 11  }

switchIfScTmpltId OBJECT-TYPE
    SYNTAX      INTEGER (1..3)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The Service Class Template Identifier for the logical
                 interface. A Service Template Id can be assigned to a
                 logical interface. The interface will then use the
                 Service Classes and associated qbins in that template,
                 for VSI controller requests. -1 indicates that the template
                 object does not apply to this interface.
                 The current templates are supported in this release:
                 Template 1: MPLS service classes
                 Template 2: ATMF service classes/ UPC enabled
                 template 3: ATMF service classes/ UPC disabled."
        ::= { switchIfEntry 12  }

switchIfCtrlVPI OBJECT-TYPE
    SYNTAX      INTEGER (0..4095)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The control VPI for logical interface table
                 row. The VPI used for control VCs from the
                 VSI master connected to this interface
                 to each VSI slave on the node"
        ::= { switchIfEntry 13  }

switchIfCtrlVCIStart OBJECT-TYPE
    SYNTAX      INTEGER (1..65535)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The control VCI start for logical interface
                 table row. The VCI used for control VCs from
                 the VSI master connected to this interface
                 to each VSI slave on the node. The VCI for
                 the control VC to VSI slave at slot n
                 (1<=n<=15) is given by VCIstart+(n-1)"
        ::= { switchIfEntry 14  }


-- The following describes the MIB variables for the frLportCnfTable. 
-- This table provides the manager a detailed view of the logical ports 
-- available on the switch. 

frLportCnfTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF FrLportCnfEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The Frame Relay Logical Port Configuration table.  
                This table provides the following areas of information 
                on per port basis:
                * Port identification 
                * Current admin & operation status
                * Port-specific configuration
                * LMI-related configuration
                * Port error status
                * Pointer(s) to other tables"
    --DEFAULT   test-function   test_frlportcnftable
    --DEFAULT   next-function   next_frlportcnftable
    --DEFAULT   get-function    get_frlportcnftable_%t
    --DEFAULT   view-mask       IPX_VIEW
        ::= { frServiceObjects 1  }

frLportCnfEntry OBJECT-TYPE
    SYNTAX      FrLportCnfEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the Frame Relay Logical Port Configuration table.
                 Some entries that are applicable to a specific FRI interface
                 are indicated in the parenthesis, such as (FRI subrate/
                 T1/E1 interface only). Otherwise, they are used for both 
                 interfaces."
    INDEX   { frLportSlotIndex , frLportPortIndex }
        ::= { frLportCnfTable 1  }

FrLportCnfEntry ::=
    SEQUENCE {
        frLportSlotIndex        INTEGER,
        frLportPortIndex        INTEGER,
        frLportPortDLCI         INTEGER,

        frLportAdminStatus      INTEGER,
        frLportOperStatus       INTEGER,

        frLportPortSpeed        INTEGER,
        frLportClockType        INTEGER,
        frLportPortType         INTEGER,

        frLportVcCount          INTEGER,
        frLportFirstVcPtr       OBJECT IDENTIFIER,
        frLportAggrChCnt        INTEGER,
        frLportChSpeed          INTEGER,

        frLportMaxTxQDepth      INTEGER,
        frLportECNQThresh       INTEGER,
        frLportDEThresh         INTEGER,
        frLportIDEMap           INTEGER,

        frLportSigProt          INTEGER,
        frLportNNIStatus        INTEGER,
        frLportAsynStatus       INTEGER,

        frLportPolVerTmr        INTEGER,
        frLportErrThresh        INTEGER,
        frLportMonEveCnt        INTEGER,

        frLportCommPri          INTEGER,
        frLportUpRNR            INTEGER,
        frLportLowRNR           INTEGER,

        frLportMinFrmFlgs       INTEGER,

        frLportOamThresh        INTEGER,

        frLportLinkTimer        INTEGER,
        frLportPollCycle        INTEGER,
        
        frLportCLLMTimer        INTEGER,
        frLportEFCItoBECN       INTEGER,

        frLportSrRTS            INTEGER,
        frLportSrDTR            INTEGER,
        frLportSrDCD            INTEGER,
        frLportSrCTS            INTEGER,
        frLportSrDSR            INTEGER,

        frLportLoopBack         INTEGER,
        frLportExtConFail       INTEGER,
        
        frLportLine             INTEGER,
        frLportStartCh          INTEGER,
        frLportExtProt          INTEGER,
        frLportDte              INTEGER
    }

frLportSlotIndex OBJECT-TYPE
    SYNTAX      INTEGER (1..32)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The slot number"
        ::= { frLportCnfEntry 1  }

frLportPortIndex OBJECT-TYPE
    SYNTAX      INTEGER (1..32)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The port number"
        ::= { frLportCnfEntry 2  }

frLportPortDLCI OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Port DLCI for Frame Forwarding (FRI subrate interface only).
                 - Get Operation:
                 If the network manager attempts to GET this object from a 
                 T1/E1 port, SNMP_OBJ_NA (Object Not Applicable -1) is 
                 returned."
        ::= { frLportCnfEntry 3  }

frLportAdminStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                up(1),
                down(2),
                modify(3),
                writeOnly(4),
                add(5),
                delete(6)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "User requested state for logical port table row.  A user 
                may up, down, configure, add and delete a FR Logical port.
                - Get Operation:
                  writeOnly(4) is always returned.
                - Set Operation:
                  . up/down/delete
                    No other objects are needed.
                  . modify
                    Refer to the user guide for combination of objects
                    allowed for various port protocols.
                  . add
                    - Adding single-line ports needs the following additional 
                      objects:
                      frLportAggrChCnt (optional, default = 1)
                      frLportChSpeed   (optional, default = 64k(2))
                    - Adding multi-line ports needs the following additional 
                      objects:
                      frLportLine      (required)
                      frLportStartCh   (optional, default = port index)
                      frLportAggrChCnt (optional, default = 1)
                      frLportChSpeed   (optional, default = 64k)
                      " 
        ::= { frLportCnfEntry 4  }

frLportOperStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                inActive(1),
                active  (2),
                looped  (3),
                failed  (4),
                unknown (5)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Actual state of the logical port."  
        ::= { frLportCnfEntry 5  }

frLportPortSpeed OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The baud rate of the port. For FRI T1/E1 interface, this
                 object is determined when this port is added by
                 the number of channels aggregated under it. Therefore,
                 it can be configured only if the port is subrated.
                 - Get Operation:
                 OK for both T1/E1 and subrate interface.
                 - Set Operation:
                 If the network manager attempts to SET this object on a 
                 T1/E1 port, an error is reported. The value is specified
                 in 100bps."
        ::= { frLportCnfEntry 6  }

frLportClockType OBJECT-TYPE
    SYNTAX      INTEGER {
                normal (1),
                looped (2),
                none   (3)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The type of port clock (FRI subrate interface only). For
                 T1/E1 interface this object should be none.
                 - Get Operation:
                 If the network manager attempts to get this object from a 
                 T1/E1 port, none (3) is returned.
                 - Set Operation:
                 If the network manager attempts to set this object on a 
                 T1/E1 port with either normal or looped type, an error 
                 is returned."
        ::= { frLportCnfEntry 7  }

frLportPortType OBJECT-TYPE
    SYNTAX      INTEGER {
                fr  (1),
                atm (2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The type of FRP subrate port. This object is not used in
                 switch software release 8.1 It is retained for historical
                 reasons, and possible future enhancement."
        ::= { frLportCnfEntry 8  }

frLportVcCount OBJECT-TYPE
    SYNTAX      INTEGER (0..252)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of virtual connections that terminate on 
                 this port. Note that there can be up to 252 connections
                 per FRP cards shared among the ports. A port may have up
                 to 252 connections allocated."
        ::= { frLportCnfEntry 9  }

frLportFirstVcPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The object identifier denoting the first endpoint 
                associated with  this port. For current implementation, 
                this OID points to the first frame relay connection
                on the port. It has a NULL OID value (i.e. { 0 0 }) if 
                there is no frame relay connection on this port. The 
                management station can retrieve all the information about 
                the first connection by reading from row pointed to by 
                this OID. Specifically, this OID specifies the first
                column of the appropriate row in the frEndptTable."
        ::= { frLportCnfEntry 10  }

frLportAggrChCnt OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The number of aggregate channels assigned to this logical
                 port (FRI T1/E1 interface only) when the port is added.
                 - Get Operation:
                   . Subrate - this object is always 1.
                   . Single- and Multi-line - the number of channels 
                     allocated for the logical port.
                 - Set Operation:
                   . Subrate ports - illegal.
                   . Single-line - specified when the manager adds a 
                     logical Frame Relay port. Together with the port
                     index, this object defines the range of the channels
                     to be allocated, from port to port+frLportAggrChCnt-1.
                   . Multi-line - specified when the manager adds a logical 
                     Frame Relay port. Together with frLportStartCh, this
                     object defines the range of the channels to be
                     allocated, from frLportStartCh to frLportStartCh +
                     frLportAggrChCnt - 1.
                     
                    Note that single and multi-line logical ports have 
                    different starting channels. Single-line ports start 
                    with the port index and Multi-line ports stars with a 
                    separate object frLportStartCh.
                 "
        ::= { frLportCnfEntry 11  }

frLportChSpeed OBJECT-TYPE
    SYNTAX      INTEGER {
                s56k (1),
                s64k (2),
                na  (3)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The channel speed (FRI T1/E1 interface only). For FRI
                 subrate interface this object should be set as na."
        ::= { frLportCnfEntry 12  }

frLportMaxTxQDepth OBJECT-TYPE
    SYNTAX      INTEGER (0..65535)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The maximum bytes queued for transmission from the 
                 FRP port"
        ::= { frLportCnfEntry 13  }

frLportECNQThresh OBJECT-TYPE
    SYNTAX      INTEGER (0..65535)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Port explicit congestion notification threshold. This 
                 is the point at which the BECN and FECN bits will be 
                 set in the communications to the user device."
        ::= { frLportCnfEntry 14  }

frLportDEThresh OBJECT-TYPE
    SYNTAX      INTEGER (0..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The percentage of the queue depth above which frames 
                 with the Discard Eligibility bit set will be discarded.
                 An entry of 100% effectively disables DE for the port."
        ::= { frLportCnfEntry 15  }

frLportIDEMap OBJECT-TYPE
    SYNTAX      INTEGER {
                no  (1),
                yes (2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The flag indicating whether IDE to DE mapping should be 
                 performed."
        ::= { frLportCnfEntry 16  }

frLportSigProt OBJECT-TYPE
    SYNTAX      INTEGER {
                xdisabled  (1),
                lmi-asyn   (2),
                disabled   (3),
                lmi-noasyn (4),
                uni-annexA (5),
                uni-annexD (6),
                nni-annexA (7),
                nni-annexD (8),
                auto-det   (9)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The specified LMI operation mode. The options can be
        1 - (UNI)LMI disabled
        2 - (UNI)LMI and asynchronous update enabled
        3 - (UNI)LMI disabled
        4 - (UNI)LMI enabled but asynchronous update disabled
        5 - (UNI)LMI enabled using CCITT O.933 Annex A parameters
        6 - (UNI)LMI enabled using ANSI T1.617 parameters
        7 - (NNI)LMI enabled using CCITT O.933 Annex A parameters
        8 - (NNI)LMI enabled using ANSI T1.617 parameters
        Note that option 7 and 8 are both bidirectional protocols
        defined by FRF.2 and available only if Frame Relay NNI
        feature is enabled."
        ::= { frLportCnfEntry 17  }

frLportNNIStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                no  (1),
                yes (2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The flag indicating whether NNI is active on the specified
                slot.port.
                - Get Operation only:
                This object is always NO if the network manager attempts
                to GET frLportNNIStatus from a disabled, LMI or LMI no
                update port. In other cases, the value of this object is
                determined by whether the port is configured as NNI or not."
                ::= { frLportCnfEntry 18  }

frLportAsynStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                no  (1),
                yes (2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The flag indicating whether the IPX should send unsolicited
                 LMI update messages as they appear or wait for the polling 
                 from the user device. This object is applicable to only 
                 Annex A/D UNI and Annex A/D NNI protocols for write and
                 LMI, Annex A/D UNI and Annex A/D NNI for read. 
                 - Get Operation:
                 This object is always NO for ports without protocols; 
                 otherwise, its value is determined by the asynchronous
                 status of the port. 
                 - Set Operation:
                 If the network manager attempts to SET this object of a port
                 with none or LMI protocol, an error is reported."
        ::= { frLportCnfEntry 19  }

frLportPolVerTmr OBJECT-TYPE
    SYNTAX      INTEGER (5..30)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The link integrity verification timer heartbeat (keep-alive)
                 period. It should be set to 5 seconds more than the 
                 heartbeat time in the user device. Default is 15 seconds. 
                 - Get Operation:
                 Since this object is not applicable to disabled protocol,
                 SNMP_OBJ_NA (-1) is returned if the network manager attempts
                 to GET this object from a port without protocols.
                 - Set Operation:
                 If the network manager attempts to SET this object of a port
                 without any protocol, an error is reported."
        ::= { frLportCnfEntry 20  }

frLportErrThresh OBJECT-TYPE
    SYNTAX      INTEGER (1..10)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The number of the failures in the monitored events that
                 cause the keep-alive process to report an alarm. 
                 - Get Operation:
                 Since this object is not applicable to disabled protocol,
                 SNMP_OBJ_NA (-1) is returned if the network manager attempts
                 to GET this object from a port without protocols.
                 - Set Operation:
                 If the network manager attempts to SET this object of a port
                 without any protocol, an error is reported."
        ::= { frLportCnfEntry 21  }


frLportMonEveCnt OBJECT-TYPE
    SYNTAX      INTEGER (1..10)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The number of monitored events for the keep-alive process.
                 A port communication fail condition is cleared after this
                 number of successful polling cycles. 
                 - Get Operation:
                 Since this object is not applicable to disabled protocol,
                 SNMP_OBJ_NA (-1) is returned if the network manager attempts
                 to GET this object from a port without protocols.
                 - Set Operation:
                 If the network manager attempts to SET this object of a port
                 without any protocol, an error is reported."
        ::= { frLportCnfEntry 22  }

frLportCommPri OBJECT-TYPE
    SYNTAX      INTEGER {
                no (1),
                yes (2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The flag specifying if the connection SNA priority should
                 be communicated to the user device attached to the port.
                 - Get Operation:
                 Since this object is specific to LMI protocols, SNMP_OBJ_NA 
                 (-1) is returned if the network manager attempts to GET 
                 this object from a non-LMI port.
                 - Set Operation:
                 Likewise, if the network manager attempts to SET this object
                 of a non-LMI port, an error is reported."
        ::= { frLportCnfEntry 23  }

frLportUpRNR OBJECT-TYPE
    SYNTAX      INTEGER (1..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The upper Receiver-Not-Ready threshold. This threshold 
                 specifies the number of receiver not ready indications
                 from the user equipment before an alarm is generated for
                 this connection. The default is 75. 
                 - Get Operation:
                 Since this object is specific to LMI protocols, SNMP_OBJ_NA 
                 (-1) is returned if the network manager attempts to GET 
                 this object from a non-LMI port.
                 - Set Operation:
                 Likewise, if the network manager attempts to SET this object
                 of a non-LMI port, an error is reported."
        ::= { frLportCnfEntry 24  }

frLportLowRNR OBJECT-TYPE
    SYNTAX      INTEGER (1..100) 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The Lower Receiver-Not-Ready threshold. This threshold
                 specifies the number of receiver not ready indications
                 from the user equipment before an alarm is cleared for
                 this connection. The default is 75.
                 - Get Operation:
                 Since this object is specific to LMI protocols, SNMP_OBJ_NA 
                 (-1) is returned if the network manager attempts to GET 
                 this object from a non-LMI port.
                 - Set Operation:
                 Likewise, if the network manager attempts to SET this object
                 of a non-LMI port, an error is reported."
        ::= { frLportCnfEntry 25  }

frLportMinFrmFlgs OBJECT-TYPE
    SYNTAX      INTEGER (1..255) 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The minimum number of flags between frames. All values
                 in the range 1 to 255 are valid and the default is 1."
        ::= { frLportCnfEntry 26  }

frLportOamThresh OBJECT-TYPE
    SYNTAX  INTEGER (0..15)
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION "The alarm threshold for number of OAM heartbeat
                 FastPackets missed before propagating A-bit=0.
                 This threshold is applicable to both UNI and NNI
                 Frame Relay ports when the node has FR NNI feature enabled
                 and this FRP firmware supports it.
                 - Get Operation:
                 Since this object is not applicable to disabled protocol,
                 SNMP_OBJ_NA (-1) is returned if the network manager attempts
                 to GET this object from a port without protocols.
                 - Set Operation:
                 If the network manager attempts to SET this object of a port
                 without any protocol, an error is reported."
    ::= { frLportCnfEntry 27  }  

frLportLinkTimer OBJECT-TYPE
    SYNTAX  INTEGER (5..30)
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION "T391 - Link Integrity Timer (applicable to
                 NNI FR port only), indicating the interval at which
                 a Status Enquiry message is sent. This interval should be 
                 between 5 and 30 seconds with a default of 6 seconds.
                 - Get Operation:
                 the network manager attempts to GET this object from a port
                 with a protocol other than NNIs, SNMP_OBJ_NA (-1) is 
                 returned.
                 - Set Operation:
                 If the network manager attempts to SET this object of a port
                 with a protocol other than NNIs, an error is reported."
    ::= { frLportCnfEntry 28  }  

frLportPollCycle OBJECT-TYPE
    SYNTAX  INTEGER (1..255)
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION "N391 - Full Status Polling Cycle (applicable to
                 NNI FR port only), indicating the interval (in terms
                 of polling cycles) at which a Full Status Report of
                 all PVCs is requested. The exact time duration
                 is N391*T391. This interval should be between 1 and
                 255 polling cycles with a default of 6.
                 - Get Operation:
                 If the network manager attempts to GET this object from 
                 a port with a protocol other than NNIs, SNMP_OBJ_NA (-1) 
                 is returned.
                 - Set Operation:
                 If the network manager attempts to SET this object of a port
                 with a protocol other than NNIs, an error is reported."
    ::= { frLportCnfEntry 29 }

frLportCLLMTimer OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The timer for CLLM messages in CLLM intervals. No CLLM if 0
                 is configured. If a user configures this value to be greater
                 than 0 then it should be in the range 4 to 35. The unit is
                 hundredth of a sec.  Note that ForeSight (CLLM) is available
                 only if the firmware supports it.
                 - Get Operation:
                 If the network manager attempts to GET this object from a 
                 port where ForeSight is not supported, SNMP_OBJ_NA (-1) is 
                 returned.
                 - Set Operation:
                 If the network manager attempts to SET this object of a port
                 where ForeSight is not supported, an error is reported."
        ::= { frLportCnfEntry 30 }

frLportEFCItoBECN OBJECT-TYPE
    SYNTAX      INTEGER {
                no  (1),
                yes (2),
                na  (3)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This object indicates whether EFCI to BECN mapping
                 is enabled."
        ::= { frLportCnfEntry 31 }

frLportSrRTS OBJECT-TYPE
    SYNTAX      INTEGER {
                off (1),
                on  (2),
                na  (3)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The current status of the RTS lead (subrated FRI only).
                 Na is used for T1/E1 FRI.
                 - Get Operation:
                 This object is valid only if the port is subrated and DTE.
                 Otherwise, na is returned."
        ::= { frLportCnfEntry 32 }

frLportSrDTR OBJECT-TYPE
    SYNTAX      INTEGER {
                off (1),
                on  (2),
                na  (3)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The current status of the DTR lead (subrated FRI only).
                 Na is used for T1/E1 FRI.
                 - Get Operation:
                 This object is valid only if the port is subrated and DTE.
                 Otherwise, na is returned."
        ::= { frLportCnfEntry 33 }

frLportSrDCD OBJECT-TYPE
    SYNTAX      INTEGER {
                off (1),
                on  (2),
                na  (3)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The current status of the DCD lead (subrated FRI only).
                 Na is used for T1/E1 FRI.
                 - Get Operation:
                 This object is valid only if the port is subrated and DCE.
                 Otherwise, na is returned."
        ::= { frLportCnfEntry 34 }

frLportSrCTS OBJECT-TYPE
    SYNTAX      INTEGER {
                off (1),
                on  (2),
                na  (3)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The current status of the CTS lead (subrated FRI only).
                 Na is used for T1/E1 FRI.
                 - Get Operation:
                 This object is valid only if the port is subrated and DCE.
                 Otherwise, na is returned."
        ::= { frLportCnfEntry 35 }

frLportSrDSR OBJECT-TYPE
    SYNTAX      INTEGER {
                off (1),
                on  (2),
                na  (3)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The current status of the DSR lead (subrated FRI only).
                 Na is used for T1/E1 FRI.
                 - Get Operation:
                 This object is valid only if the port is subrated and DCE.
                 Otherwise, na is returned."
    ::= { frLportCnfEntry 36 }

frLportLoopBack OBJECT-TYPE
    SYNTAX      INTEGER {
                none   (1),
                local  (2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The loopback mode"
        ::= { frLportCnfEntry 37 }

frLportExtConFail OBJECT-TYPE
    SYNTAX      INTEGER {
                false (1),
                true  (2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The flag indicating if the connection with the external
                 device is lost."
        ::= { frLportCnfEntry 38 }

frLportLine OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The line number of a logical port. 
                 - Get Operations:
                 Subrate           - always -1 (not applicable).
                 Single-line T1/E1 - always 1.
                 Multi-line        - The line number specified when the port 
                                     was first added.
                 - Set Operations:
                 Subrate & Single-line - illegal.
                 Multi-line - 
                 This object is used by the manager to specify the
                 physical line number when a port is first added. 
                 This object has to be given; otherwise, the request 
                 will be rejected."
        ::= { frLportCnfEntry 39 }

frLportStartCh OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The starting channel number of a logical port.
                 - Get Operations:
                 Subrate           - always -1 (not applicable).
                 Single-line T1/E1 - always the port index.
                 Multi-line card   - the starting channel number of the 
                                     logical port
                       as it was added.
                 - Set Operations:
                 Subrate and Single-line - illegal.
                 Multi-line -
                 This object is used by the manager to specify the 
                 starting channel when a port is added. This object 
                 and frLportAggrChCnt together define a range of channels 
                 (frLportStartCh - frLportStartCh+frLportAggrChCnt-1) 
                 to be allocated for a multi-line port. If not given, 
                 the default value is the logical port number specified 
                 as part of the index. Note that this default value may 
                 not be valid and would likely be rejected if conflicts 
                 are found."
        ::= { frLportCnfEntry 40 }

frLportExtProt OBJECT-TYPE
    SYNTAX      INTEGER {
                enable  (1),
                disable (2)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This object tells whether the Signalling protcol being used
                 is Extended protocol. The extension in the protocol is
                 detected by the card."
        ::= { frLportCnfEntry 41  }

frLportDte OBJECT-TYPE
    SYNTAX      INTEGER {
                dce (1),
                dte (2),
                na  (3)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This object is used to configure a Frame Relay port
                 as either DTE or DCE. The value 'na' is returned for
                 frame relay ports for which this object does not
                 apply (e.g. ports that reside on T1/E1 interfaces)."
        ::= { frLportCnfEntry 42 }


 
-- The following describes the MIB variables for the frLportStatTable. 
-- This table provides the manager access to the statistics available
-- on the logical ports. 

frLportStatTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF FrLportStatEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The Frame Relay Logical Port Statistics table.  
                 This table ...."
    --DEFAULT   test-function   test_frlportstattable
    --DEFAULT   next-function   next_frlportstattable
    --DEFAULT   get-function    get_frlportstattable_%t
    --DEFAULT   view-mask       IPX_VIEW
    --DEFAULT   locator         FRLPORT_STAT_LOCATOR
        ::= { frServiceObjects 2  }

frLportStatEntry OBJECT-TYPE
    SYNTAX      FrLportStatEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the Frame Relay Logical Port Statistics table."
    INDEX   { frLportSlotIndex , frLportPortIndex }
        ::= { frLportStatTable 1  }

FrLportStatEntry ::=
    SEQUENCE {
        frLportRxBytes          Counter,
        frLportRxFrms           Counter,

        frLportTxBytes          Counter,
        frLportTxFrms           Counter,
        frLportTxFrmsFecns      Counter,
        frLportTxFrmsBecns      Counter,

        frLportCrcErrors        Counter,
        frLportBadFmts          Counter,
        frLportAlgnErrors       Counter,
        frLportIllegLengths     Counter,
        frLportDmaOvruns        Counter,
        frLportStatEnqUnis      Counter,
        frLportStatTxUnis       Counter,
        frLportUpdtTxUnis       Counter,
        frLportInvldReqCnts     Counter,
        frLportToutCntUnis      Counter,
        frLportSeqnmErrUnis     Counter,
        frLportUnknDlcis        Counter,
        frLportDeFrmsDrops      Counter,
        frLportStatEnqNnis      Counter,
        frLportStatRxNnis       Counter,
        frLportUpdtRxNnis       Counter,
        frLportToutCntNnis      Counter,
        frLportSeqnmErrNnis     Counter,
        frLportCllmTxFrms       Counter,
        frLportCllmTxBytes      Counter,
        frLportCllmRxFrms       Counter,
        frLportCllmRxBytes      Counter,
        frLportCllmFailures     Counter,
        frLportDscdQTxFrms      Counter,
        frLportDscdQTxBytes     Counter,
        frLportLmiFailFrms      Counter,
        frLportLmiFailBytes     Counter

    }


frLportRxBytes  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port Rx bytes"
        ::= { frLportStatEntry 1  }

frLportRxFrms  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port Rx frames"
        ::= { frLportStatEntry 2  }

frLportTxBytes  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port Tx bytes"
        ::= { frLportStatEntry 3  }

frLportTxFrms  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port Tx frames"
        ::= { frLportStatEntry 4  }

frLportTxFrmsFecns  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port Tx FECN frames"
        ::= { frLportStatEntry 5  }

frLportTxFrmsBecns  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port Tx BECN frames"
        ::= { frLportStatEntry 6  }

frLportCrcErrors  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port CRC errors on received frames"
        ::= { frLportStatEntry 7  }

frLportBadFmts  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port frames with illegal formats"
        ::= { frLportStatEntry 8  }

frLportAlgnErrors  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port Alignment errors on received 
                 frames"
        ::= { frLportStatEntry 9  }

frLportIllegLengths  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port Illegal length on received frames"
        ::= { frLportStatEntry 10  }

frLportDmaOvruns  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port number of DMA overruns"
        ::= { frLportStatEntry 11  }

frLportStatEnqUnis  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port status enquiry count. Transmit
                 protocol LMI UNI."
        ::= { frLportStatEntry 12  }

frLportStatTxUnis  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port status transmit count. Transmit
                 protocol LMI UNI."
        ::= { frLportStatEntry 13  }

frLportUpdtTxUnis  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port update transmit count. Transmit
                 protocol LMI UNI."
        ::= { frLportStatEntry 14  }

frLportInvldReqCnts  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port invalid request count. 
                 UNI and NNI."
        ::= { frLportStatEntry 15  }

frLportToutCntUnis  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port timeout count. Transmit
                 protocol LMI UNI."
        ::= { frLportStatEntry 16  }

frLportSeqnmErrUnis  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port sequence number error. Transmit
                 protocol UNI."
        ::= { frLportStatEntry 17  }

frLportUnknDlcis  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port number of unknown DLCI's on
                 received frames."
        ::= { frLportStatEntry 18  }

frLportDeFrmsDrops  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port number of DE dropped frames." 
        ::= { frLportStatEntry 19  }

frLportStatEnqNnis  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port status enquiry count. Transmit
                 protocol LMI NNIs."
        ::= { frLportStatEntry 20  }

frLportStatRxNnis  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port status transmit count. Transmit
                 protocol LMI NNIs."
        ::= { frLportStatEntry 21  }

frLportUpdtRxNnis  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port update transmit count. Transmit
                 protocol LMI NNIs."
        ::= { frLportStatEntry 22  }

frLportToutCntNnis  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port timeout count. Transmit
                 protocol LMI NNIs."
        ::= { frLportStatEntry 23  }

frLportSeqnmErrNnis  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port sequence number error. Transmit
                 protocol NNIs."
        ::= { frLportStatEntry 24  }

frLportCllmTxFrms  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port CLLM (Foresight) Tx frames"
        ::= { frLportStatEntry 25  }

frLportCllmTxBytes  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port CLLM (Foresight) Tx bytes"
        ::= { frLportStatEntry 26 }

frLportCllmRxFrms  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port CLLM (Foresight) Rx frames"
        ::= { frLportStatEntry 27 }

frLportCllmRxBytes  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port CLLM (Foresight) Rx bytes"
        ::= { frLportStatEntry 28 }

frLportCllmFailures  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port CLLM (Foresight) failures"
        ::= { frLportStatEntry 29 }

frLportDscdQTxFrms  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port discard queue Tx frames"
        ::= { frLportStatEntry 30 }

frLportDscdQTxBytes  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port discard queue Tx bytes"
        ::= { frLportStatEntry 31 }

frLportLmiFailFrms  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port LMI failure frames"
        ::= { frLportStatEntry 32 }

frLportLmiFailBytes  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Logical Port LMI failure bytes"
        ::= { frLportStatEntry 33 }

--
-- The following describes the MIB variables for the atmPortTable.
-- This table provides the manager a detailed view of the ATM ports
-- available on the switch. 

atmPortTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF AtmPortEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The ATM Port Configuration table."
    --DEFAULT   test-function   test_atmporttable
    --DEFAULT   next-function   next_atmporttable
    --DEFAULT   get-function    get_atmporttable_%t
    --DEFAULT   view-mask       BPX_VIEW | IGX_VIEW
        ::= { atmServiceObjects 1  }

atmPortEntry OBJECT-TYPE
    SYNTAX      AtmPortEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the ATM Port Configuration table."
    INDEX   { atmPortSlot , atmPortPort }
        ::= { atmPortTable 1  }

AtmPortEntry ::=
    SEQUENCE {
        atmPortSlot             INTEGER,
        atmPortPort             INTEGER,
        atmPortAdminStatus      INTEGER,
        atmPortOperStatus       INTEGER,
        atmPortType             INTEGER,
        atmPortIfType           INTEGER,
        atmPortSpeed            INTEGER,
        atmPortAxis             INTEGER,
        atmPortVcCount          INTEGER,
        atmPortFirstVcPtr       OBJECT IDENTIFIER,
        atmPortMetro            INTEGER,
        atmPortMgmtProto        INTEGER,
        atmPortIlmiVpi          INTEGER,
        atmPortIlmiVci          INTEGER,
        atmPortIlmiPollEnable   INTEGER,
        atmPortIlmiTrapEnable   INTEGER,
        atmPortIlmiPollIntrvl   INTEGER,
        atmPortIlmiErrorThresh  INTEGER,
        atmPortIlmiEventThresh  INTEGER,
        atmPortLmiVpi           INTEGER,
        atmPortLmiVci           INTEGER,
        atmPortLmiPollEnable    INTEGER,
        atmPortLmiStatEnqTimer  INTEGER,
        atmPortLmiUpdStatTimer  INTEGER,
        atmPortLmiStatEnqRetry  INTEGER,
        atmPortLmiUpdStatRetry  INTEGER,
        atmPortLmiPollTimer     INTEGER,
        atmPortPercUtil         INTEGER,
        atmPortSvcChannels      INTEGER,
        atmPortShareLcn         INTEGER,
        atmPortSvcLcnLow        INTEGER,
        atmPortSvcLcnHigh       INTEGER,
        atmPortSvcVpiLow        INTEGER,
        atmPortSvcVpiHigh       INTEGER,
        atmPortSvcVciLow        INTEGER,
        atmPortSvcVciHigh       INTEGER,
        atmPortSvcQbinBitMap    OCTET STRING,
        atmPortSvcQbinSz        INTEGER,
        atmPortSvcBw            INTEGER,
        atmPortSvcInUse         INTEGER,
        atmPortPvcInUse         INTEGER,
        atmPortIlmiAddrReg      INTEGER,
        atmPortCACOverride      INTEGER,
        atmPortLoad             INTEGER,
        atmPortVcShaping        INTEGER,
        atmPortHcfShift         INTEGER
    }

atmPortSlot OBJECT-TYPE
    SYNTAX      INTEGER (1..32)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The slot number"
        ::= { atmPortEntry 1  }

atmPortPort OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The port number"
        ::= { atmPortEntry 2  }

atmPortAdminStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                up(1),
                down(2),
                modify(3),
                writeOnly(4)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "User requested state for port table row.  A user
                may Up or Down an existing port.  The user may also
                modify the characteristics of the port."
        ::= { atmPortEntry 3  }

atmPortOperStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                inactive(1),
                active  (2),
                looped  (3),
                failed  (4),
                unknown (5)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Actual state of the port."
        ::= { atmPortEntry 4  }

atmPortType OBJECT-TYPE
    SYNTAX      INTEGER {
                uni     (1),
                nni     (2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Indicates whether this is a UNI or NNI port.
                 The switch supports this operation only on a
                 per-card level, so changing one port changes
                 the other also.
                 The value of this object cannot be changed 
                 if there are active connections on the card."
        ::= { atmPortEntry 5  }

atmPortIfType OBJECT-TYPE
    SYNTAX      INTEGER {
                unknown (1),
                t3      (2),
                e3      (3),
                oc3-smf (4),
                oc3-mmf (5),
                oc3-stm1(6),
                oc3-utp (7),
                oc3-stp (8),
                oc3-smflr(9),
                oc12-smf(10),
                oc12-mmf(11),
                oc12-smflr(12),
                t1      (13),
                e1      (14),
                oc3-xlr (15),
                oc12-xlr(16)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The type of interface for this port."
        ::= { atmPortEntry 6  }

atmPortSpeed OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The speed of the port in cells per seconds."
        ::= { atmPortEntry 7  }

atmPortAxis OBJECT-TYPE
    SYNTAX      INTEGER {
                none  (1),
                t1    (2),
                e1    (3)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Indicates port support for BASIS shelf. 
                 The value of this object cannot be changed 
                 if there are active connections on the port.
                 For ASI-2 the value of this object is 'none'.
                 An attempt to change the value of this object
                 on an ASI-2 will return a BadValue error."
        ::= { atmPortEntry 8  }

atmPortVcCount OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of virtual connections that terminate on
                 this port."
        ::= { atmPortEntry 9  }

atmPortFirstVcPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The object identifier denoting the first connection 
                endpoint associated with  this port. For current 
                implementation, this OID points to the first 
                connection on the port. It has a NULL OID value
                (i.e. { 0 0 }) if there is no connection on this
                port. The management station can retrieve all the
                information about the first connection by reading
                from row pointed to by this OID. Specifically, this
                OID specifies the first column of the appropriate row
                in the atmEndptTable."
        ::= { atmPortEntry 10  }

atmPortMetro OBJECT-TYPE
    SYNTAX      INTEGER {
                enable  (1),
                disable (2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Metro Data Cell Header Format. This object applies
                 to T3 non-axis ports. The value of this object is
                 set to disable by the switch every time that the
                 value of the object atmPortAxis changes to or from
                 'none'. 
                 . Applicable card: ASI-T3
                 "
        ::= { atmPortEntry 11  }

atmPortMgmtProto OBJECT-TYPE
    SYNTAX      INTEGER {
                none (1),
                lmi  (2),
                ilmi (3)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Indicates the port management protocol used for
                 this port."
        ::= { atmPortEntry 12 }

atmPortIlmiVpi OBJECT-TYPE
    SYNTAX      INTEGER (0..4095) 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The virtual path identifier for the ILMI protocol.
                 For UNI ports, it ranges from 0 to 255 and, for NNI ports
                 it ranges from 0 to 4095."
        ::= { atmPortEntry 13 }

atmPortIlmiVci OBJECT-TYPE
    SYNTAX      INTEGER (1..65535)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The virtual channel identifier for the ILMI protocol."
        ::= { atmPortEntry 14 }

atmPortIlmiPollEnable OBJECT-TYPE
    SYNTAX      INTEGER {
                enable (1),
                disable(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Enable ILMI keep alive polling procedure."
        ::= { atmPortEntry 15 }

atmPortIlmiTrapEnable OBJECT-TYPE
    SYNTAX      INTEGER {
                enable (1),
                disable(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "if enabled the ILMI agent will send unsolicited
                 Trap PDUs."
        ::= { atmPortEntry 16 }

atmPortIlmiPollIntrvl OBJECT-TYPE
    SYNTAX      INTEGER (5..60)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The number of seconds between each keep alive
                 poll transmitted by the port (T491)."
        ::= { atmPortEntry 17 }

atmPortIlmiErrorThresh OBJECT-TYPE
    SYNTAX      INTEGER (1..10)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The number of keep alive polls that must fail
                 within a window of N492 polls, before the port
                 is placed in the failed state (N491)."
        ::= { atmPortEntry 18 }

atmPortIlmiEventThresh OBJECT-TYPE
    SYNTAX      INTEGER (1..10)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "It specifies the number of keep alive polls
                 within which if N491 polls fail the port is
                 placed in the failed state (N492)."
        ::= { atmPortEntry 19 }

atmPortLmiVpi OBJECT-TYPE
    SYNTAX      INTEGER (0..4095) 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The virtual path identifier for the LMI protocol.
                 For UNI ports, it ranges from 0 to 255 and, for NNI ports
                 it ranges from 0 to 4095."
        ::= { atmPortEntry 20 }

atmPortLmiVci OBJECT-TYPE
    SYNTAX      INTEGER (1..65535)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The virtual channel identifier for the ILMI protocol."
        ::= { atmPortEntry 21 }

atmPortLmiPollEnable OBJECT-TYPE
    SYNTAX      INTEGER {
                enable (1),
                disable(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "if enable an Status Enquiry message is sent when 
                 the polling timer expires."
        ::= { atmPortEntry 22 }

atmPortLmiStatEnqTimer  OBJECT-TYPE
    SYNTAX      INTEGER (5..30)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Link integrity timer for the port (T393)."
        ::= { atmPortEntry 23 }

atmPortLmiUpdStatTimer  OBJECT-TYPE
    SYNTAX      INTEGER (5..30)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Update status timer for the port (T394)."
        ::= { atmPortEntry 24 }

atmPortLmiStatEnqRetry  OBJECT-TYPE
    SYNTAX      INTEGER (1..10)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The maximum number of times a Status Enquiry
                 message is retransmitted. A Status Enquiry
                 message is retransmitted when timer T393
                 expires (N394)."
        ::= { atmPortEntry 25 }

atmPortLmiUpdStatRetry  OBJECT-TYPE
    SYNTAX      INTEGER (1..10)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The maximum number of times an Update Status
                 message is retransmitted. An Update Status
                 message is retransmitted when timer T394
                 expires (N395)."
        ::= { atmPortEntry 26 }

atmPortLmiPollTimer  OBJECT-TYPE
    SYNTAX      INTEGER (5..30)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Polling timer (T396). If polling is enabled
                 a Status Enquiry message is sent when this 
                 timer expires."
        ::= { atmPortEntry 27 }

atmPortPercUtil OBJECT-TYPE
    SYNTAX      INTEGER {
                enable (1),
                disable(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Percentage Utilization can be disabled or enabled. 
                 If the use of percent utilization is disabled, the 
                 bandwidth for the connections terminating on the port 
                 will be used to determine the port load.
                 If the use of percent utilization is enabled, the 
                 bandwidth for the connection is multiplied by the 
                 percent utilization for the connection to determine the 
                 port load."
        ::= { atmPortEntry 28 }

atmPortSvcChannels OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of LCN's partioned for the SVC on this port. 
                 The range of the LCN's are defined by atmPortSvcLcnHigh and 
                 atmPortSvcLcnLow objects. IF this is a non-zero value, then the 
                 remaining SVC objects are valid."
        ::= { atmPortEntry 29 }

atmPortShareLcn OBJECT-TYPE
    SYNTAX      INTEGER {
                 portBased(1),
                 cardBased(2)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Whether the LCN's are shared per port basis or per card basis."
        ::= { atmPortEntry 30 }

atmPortSvcLcnLow OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The lower limit of the LCN value which can be used on this port for
                 SVC's.  This object is valid if atmPortSvcChannels is non-zero."
        ::= { atmPortEntry 31 }

atmPortSvcLcnHigh OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The upper limit of the LCN value which can be used on this port. 
                 This object is valid if atmPortSvcChannels is non-zero."
        ::= { atmPortEntry 32 }

atmPortSvcVpiLow OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Lower limit of the VPI value which can be used on this port. 
                 The VCI's that can be used are from 32 to the largest VCI value
                 allowed on that port. VCI 1-31 are reserved. The default value is
                 100. This object is valid  if atmPortSvcChannels is non-zero."
        ::= { atmPortEntry 33 }

atmPortSvcVpiHigh OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The upper limit of the VPI value which can be used on this port. 
                 The VCI's that can be used are from 32 to the largest VCI value
                 allowed on that port. The default value is 100.
                 This object is valid if atmPortSvcChannels is non-zero."
        ::= { atmPortEntry 34 }

atmPortSvcVciLow OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      deprecated
    DESCRIPTION "It stores the SVC VCI Lower limit."
        ::= { atmPortEntry 35 }

atmPortSvcVciHigh OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      deprecated
    DESCRIPTION "It stores the SVC VCI Upper limit."
        ::= { atmPortEntry 36 }

atmPortSvcQbinBitMap OBJECT-TYPE
    SYNTAX      OCTET STRING
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Egress queues on an ASI line port is partitioned between PVC's
                 and SVC's. This is a bitstring value ranging from 0  - 0xffffffff.
                 A bit set indicates that the QBIN is allocated to SVC, and 
                 if set to 0, it is allocated to PVC's. The bits
                 are numbered in the BIG endian order, the m.s bit corresponds to 
                 Qbin0 and the next m.s bit corresponds to Qbin 1 etc. For ex.
                 On an ASI-T3 atmPortSvcQbinMap is set to a value 0x8fff0000 to 
                 indicate that queues 0 and 4 through 15 are allocated to SVC's.
                 This object is valid if atmPortSvcChannels is non-zero."
        ::= { atmPortEntry 37 }

atmPortSvcQbinSz OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Egress Queue pool size on a line port is partitioned between 
                 PVC's and SVC's. This object reflects the SVC Egress Queue pool 
                 size. The default value is 0. This object is valid if 
                 atmPortSvcChannels is non-zero."
        ::= { atmPortEntry 38 }

atmPortSvcBw OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Bandwidth on a port is partitioned between SVC and PVC. The 
                 bandwidth allocated for SVC's is stored in this object. The 
                 default value is 0. This object is valid if atmPortSvcChannels is 
                 non-zero."
        ::= { atmPortEntry 39 }

atmPortSvcInUse OBJECT-TYPE
    SYNTAX      INTEGER {
                inUse (1),
                notInUse(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This object is set by the INS to indicate that SVC partitioning
                 information is being used by INS. The initial value is notInUse.
                 This object is valid if atmPortSvcChannels is non-zero."
        ::= { atmPortEntry 40 }


atmPortPvcInUse OBJECT-TYPE
    SYNTAX      INTEGER {
                inUse (1),
                notInUse(2)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This object is set by the INS to indicate that PVC partitioning
                 information is valid on this port."
        ::= { atmPortEntry 41 }

atmPortIlmiAddrReg  OBJECT-TYPE
    SYNTAX      INTEGER {
                enabled (1),
                disabled(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "If enabled the ILMI agent will support Address Registration."
        ::= { atmPortEntry 42 }

atmPortCACOverride OBJECT-TYPE
    SYNTAX      INTEGER {
                enabled (1),
                disabled(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "CAC, Connection Admission Control, regulates the connection 
                 bandwidth allocation on ATM ports. This object, CAC Override,
                 gives users the options to add or modify a connection on this
                 port even if it is oversubscribed. The default value is 
                 enable(1), i.e. users can add a new connection of modify an 
                 existing connection such that the total data rate becomes
                 higher than the port speed."
        ::= { atmPortEntry 43 }

atmPortLoad OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This object describe the current loading of the port.
                 It is calculated as 
                 
         Sum of ECR (Equivalent Cell Rate) of all cons on the port
        ----------------------------------------------------------  * 100%
                             Port Speed
                 
                 Note that it is in percentage.  
                "
        ::= { atmPortEntry 44 }

atmPortVcShaping OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Indicates whether VC shaping is enabled for the ATM
                 circuit line."
        ::= { atmPortEntry 45  }
 
atmPortHcfShift OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Indicates whether HCF Shift is enabled on the port. The object
                 is currently applicable for ASI and BXM ATM ports only.
                 For ATM ports on other cards (e.g. UXM), not-applicable (-1)
                 is returned."
        ::= { atmPortEntry 46  }
 

--
-- The following describes the MIB variables for the atmPortQueueTable.
-- This table provides the manager access to read and configure the
-- ATM port egress queues.

atmPortQueueTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF AtmPortQueueEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The ATM port egress queue table."
    --DEFAULT   test-function   test_atmportqueuetable
    --DEFAULT   next-function   next_atmportqueuetable
    --DEFAULT   get-function    get_atmportqueuetable_%t
    --DEFAULT   view-mask       BPX_VIEW | IGX_VIEW
        ::= { atmServiceObjects 2  }

atmPortQueueEntry OBJECT-TYPE
    SYNTAX      AtmPortQueueEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the ATM port queue table."
    INDEX   { atmPortSlot , atmPortPort , atmPortQueueIndex }
        ::= { atmPortQueueTable 1  }

AtmPortQueueEntry ::=
    SEQUENCE {
        atmPortQueueIndex        INTEGER,
        atmPortQueueAdminStatus  INTEGER,
        atmPortQueueType         INTEGER,
        atmPortQueueDepth        INTEGER,
        atmPortQueueClpHi        INTEGER,
        atmPortQueueClpLo        INTEGER,
        atmPortQueueEfciTh       INTEGER,
        atmPortQueueAlgorithm    INTEGER
    }

atmPortQueueIndex  OBJECT-TYPE
    SYNTAX      INTEGER (0..15)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Index into the port egress queue array of the
                 given port that uniquely identifies this queue.
                 The following index has to be specified in order to
                 access the right queue:
                 . cbr = 0 
                 . abr = 1
                 . vbr = 2
                 For example, to access the cbr queue of an ATM port in slot
                 10 and port 2, a user has to specify the index as
                 '10.2.0'. The abr queue of ATM port 2.1 should be indexed
                 as '2.1.1'. Note that atmPortQueueIndex and atmPortQueueType
                 are not the same for the a given queue type.
                "
        ::= { atmPortQueueEntry 1  }

atmPortQueueAdminStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                modify(1),
                writeOnly(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "User requested state for this port queue table
                 row. The only operation supported in this table
                 is modify."
        ::= { atmPortQueueEntry 2  }

atmPortQueueType  OBJECT-TYPE
    SYNTAX      INTEGER {
                unknown (1),
                unused  (2),
                cbr     (3),
                abr     (4),
                vbr     (5),
                axis    (6),
                rtvbr   (7)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The type of the queue. If the type is 'axis',
                 then the atmPortQueueIndex specifes the Axis
                 slot associated with this queue."
        ::= { atmPortQueueEntry 3  }

atmPortQueueDepth  OBJECT-TYPE
    SYNTAX      INTEGER (0..11000)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The storage depth allocated to this queue in
                 block of cells. The block size is one cell for
                 T3/E3 and 64 cells for OC3. The aggregate of 
                 the queue depths for all queues cannot exceed
                 the maximum storage available for the port."
        ::= { atmPortQueueEntry 4  }

atmPortQueueClpHi  OBJECT-TYPE
    SYNTAX      INTEGER (0..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The CLP tagging activation threshold for this
                 queue expressed as a percentage of queue depth."
        ::= { atmPortQueueEntry 5  }

atmPortQueueClpLo  OBJECT-TYPE
    SYNTAX      INTEGER (0..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The CLP tagging deactivation threshold for this
                 queue expressed as a percentage of queue depth."
        ::= { atmPortQueueEntry 6  }
 
atmPortQueueEfciTh  OBJECT-TYPE
    SYNTAX      INTEGER (0..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The EFCI threshold for this queue expressed
                 as a percentage of queue depth."
        ::= { atmPortQueueEntry 7  }
 
atmPortQueueAlgorithm OBJECT-TYPE
    SYNTAX      INTEGER {
                off        (1),
                always     (2),
                ok         (3),
                minGuar    (4),
                minSmooth  (5),
                minDelay   (6) 
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The queue service algorithm:
                 off:        never serve
                 always:     always serve 
                 ok:         ok to serve, not minimum guaranteed
                 min_guar:   minimum guaranteed bw, no limit
                 min_smooth: minimum guaranteed bw, smoothed
                 min_delay:  minimum guaranteed bw, delay limited
                " 
        ::= { atmPortQueueEntry 8  }
 


--
-- The following describes the MIB variables for the atmPortStatTable.
-- This table provides the manager access to the statistics available
-- on the ATM ports. Counter value zero will be returned if the 
-- statistics are not applicable.

atmPortStatTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF AtmPortStatEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The ATM Port Statistics table."
    --DEFAULT   test-function   test_atmportstattable
    --DEFAULT   next-function   next_atmportstattable
    --DEFAULT   get-function    get_atmportstattable_%t
    --DEFAULT   view-mask       BPX_VIEW | IGX_VIEW
        ::= { atmServiceObjects 3  }

atmPortStatEntry OBJECT-TYPE
    SYNTAX      AtmPortStatEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the ATM Port Statistics table."
    INDEX   { atmPortSlot , atmPortPort }
        ::= { atmPortStatTable 1  }

AtmPortStatEntry ::=
    SEQUENCE {
        atmPortStatUnknVpiVcis     Counter,
        atmPortStatBufferOvfls     Counter,
        atmPortStatNonZeroGfcs     Counter,
        atmPortStatIsuDiscards     Counter,
        atmPortStatIsuEmptys       Counter,
        atmPortStatAisRxs          Counter,
        atmPortStatFerfRxs         Counter,
        atmPortStatCellsRxs        Counter,
        atmPortStatClpRxs          Counter,
        atmPortStatEfciRxs         Counter,
        atmPortStatBcmRxs          Counter,
        atmPortStatCellsTxs        Counter,
        atmPortStatOamRxs          Counter,
        atmPortStatPayldErrs       Counter,
        atmPortStatClpTxs          Counter,
        atmPortStatEfciTxs         Counter,
        atmPortStatHdrDiscards     Counter,
        atmPortStatIlmiGetRxs      Counter,
        atmPortStatIlmiGetNextRxs  Counter,
        atmPortStatIlmiGetNextTxs  Counter,
        atmPortStatIlmiSetRxs      Counter,
        atmPortStatIlmiTrapRxs     Counter,
        atmPortStatIlmiGetRspRxs   Counter,
        atmPortStatIlmiGetTxs      Counter,
        atmPortStatIlmiGetRspTxs   Counter,
        atmPortStatIlmiTrapTxs     Counter,
        atmPortStatIlmiUnkRxs      Counter,
        atmPortStatLmiStatTxs      Counter,
        atmPortStatLmiUpdtStatTxs  Counter,
        atmPortStatLmiStatAckTxs   Counter,
        atmPortStatLmiStatEnqRxs   Counter,
        atmPortStatLmiStatEnqTxs   Counter,
        atmPortStatLmiStatRxs      Counter,
        atmPortStatLmiUpdStatRxs   Counter,
        atmPortStatLmiStatAckRxs   Counter
    }


atmPortStatUnknVpiVcis  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of cells discarded due to unknown
                 address."
        ::= { atmPortStatEntry 1  }

atmPortStatBufferOvfls OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of times the port has incurred a
                 cell buffer overflow."
        ::= { atmPortStatEntry 2  }

atmPortStatNonZeroGfcs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of non-zero GFC cells for a UNI
                 port. For a NNI port this value is 0." 
        ::= { atmPortStatEntry 3  }

atmPortStatIsuDiscards  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The count of cells discarded by the Ingress
                 Control Service Unit."
        ::= { atmPortStatEntry 4  }

atmPortStatIsuEmptys  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Ingress Control Service Unit free list
                 empty count."
        ::= { atmPortStatEntry 5  }

atmPortStatAisRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Total numbers of cells received with AIS."   
        ::= { atmPortStatEntry 6  }

atmPortStatFerfRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Total numbers of cells received with FERF."   
        ::= { atmPortStatEntry 7  }

atmPortStatCellsRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Total numbers of cells received."
        ::= { atmPortStatEntry 8  }

atmPortStatClpRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "numbers of cells received with CLP set."   
        ::= { atmPortStatEntry 9  }

atmPortStatEfciRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Total numbers of cells received with EFCI set."   
        ::= { atmPortStatEntry 10 }

atmPortStatBcmRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Total numbers of BCM cells received."   
        ::= { atmPortStatEntry 11 }

atmPortStatCellsTxs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Total numbers of cells transmitted."   
        ::= { atmPortStatEntry 12 }

atmPortStatOamRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Total numbers of OAM cells received."
        ::= { atmPortStatEntry 13 }

atmPortStatPayldErrs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Total numbers of cells discarded due to BIP-16."
        ::= { atmPortStatEntry 14 }

atmPortStatClpTxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Total numbers of cells transmitted with CLP set."
        ::= { atmPortStatEntry 15 }

atmPortStatEfciTxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Total numbers of cells transmitted with EFCI set."
        ::= { atmPortStatEntry 16 }

atmPortStatHdrDiscards  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Total numbers of cells discarded due to parity error."
        ::= { atmPortStatEntry 17 }

atmPortStatIlmiGetRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "ILMI Get requests received."
        ::= { atmPortStatEntry 18 }

atmPortStatIlmiGetNextRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "ILMI Get Next requests received."
        ::= { atmPortStatEntry 19 }

atmPortStatIlmiGetNextTxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "ILMI Get Next requests transmitted."
        ::= { atmPortStatEntry 20 }

atmPortStatIlmiSetRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "ILMI Set requests received."
        ::= { atmPortStatEntry 21 }

atmPortStatIlmiTrapRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "ILMI Trap received."
        ::= { atmPortStatEntry 22 }

atmPortStatIlmiGetRspRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "ILMI Get Response messages received."
        ::= { atmPortStatEntry 23 }

atmPortStatIlmiGetTxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "ILMI Get requests transmitted."
        ::= { atmPortStatEntry 24 }

atmPortStatIlmiGetRspTxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "ILMI Get Response messages transmitted."
        ::= { atmPortStatEntry 25 }

atmPortStatIlmiTrapTxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "ILMI Traps transmitted."
        ::= { atmPortStatEntry 26 }

atmPortStatIlmiUnkRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Unknown PDU type received."
        ::= { atmPortStatEntry 27 }

atmPortStatLmiStatTxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "LMI Status messages transmitted."
        ::= { atmPortStatEntry 28 }

atmPortStatLmiUpdtStatTxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "LMI Update Status messages transmitted."
        ::= { atmPortStatEntry 29 }

atmPortStatLmiStatAckTxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "LMI Status Acknowledge messages transmitted."
        ::= { atmPortStatEntry 30 }

atmPortStatLmiStatEnqTxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "LMI Status Enquiry messages transmitted."
        ::= { atmPortStatEntry 31 }

atmPortStatLmiStatEnqRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "LMI Status Enquiry messages received."
        ::= { atmPortStatEntry 32 }

atmPortStatLmiStatRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "LMI Status messages received."
        ::= { atmPortStatEntry 33 }

atmPortStatLmiUpdStatRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "LMI Update Status messages received."
        ::= { atmPortStatEntry 34 }

atmPortStatLmiStatAckRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "LMI Status Acknowledge messages received."
        ::= { atmPortStatEntry 35 }


--
-- The voiceChannel Table -  obsolete and replaced by lineChanTable
-- voiceChannelTable OBJECT-TYPE ::= { voiceServiceObjects  1 }
--

--
-- The lineChan Table
--
-- The following describes the MIB variables for the lineChanTable.
-- This table provides the manager access to read and configure a
-- voice/data/svc channel. The valid channel variables for each type 
-- of channel are listed as follows. Note that the voice, data or svc
-- channel variables can not be mixed with either other in one request.
-- 
-- ----------------------------------------------------------------------
--     Line Chan Params          |    Voice    |     Data    |    SVC   |
-- ----------------------------------------------------------------------
--    lineChanAdapVoice                 x
--    lineChanDialType                  x
--    lineChanDtSignallingDelay         x
--    lineChanDtMinWink                 x
--    lineChanDtPlayOutDelay            x
--    lineChanRecvSigABit               x
--    lineChanRecvSigBBit               x
--    lineChanRecvSigCBit               x
--    lineChanRecvSigDBit               x
--    lineChanXmitSigABit               x
--    lineChanXmitSigBBit               x
--    lineChanXmitSigCBit               x
--    lineChanXmitSigDBit               x
--    lineChanIfTypeName                x
--    lineChanIfOnhkABit                x
--    lineChanIfOnhkBBit                x
--    lineChanIfOnhkCBit                x
--    lineChanIfOnhkDBit                x
--    lineChanEchoCancel                x
--    lineChanEchoRtnLoss               x
--    lineChanEchoTone                  x
--    lineChanEchoConv                  x
--    lineChanEchoNlp                   x
--    lineChanInGain                    x
--    lineChanOutGain                   x
--    lineChanUtil                      x
--    lineChanEchoBgFilter              x
--    lineChanEchoBackCard              x
--    lineChanDataDceDte                              x
--    lineChanDataUcs                                 x
--    lineChanEiaUpdt                                 x
--    lineChanTimeSlot                                            x
--    lineChanEndState                                            x
--    lineChanIdleCodeSuppr                           x
-- -----------------------------------------------------------------------------

lineChanTable  OBJECT-TYPE 
    SYNTAX      SEQUENCE OF LineChanEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The line chan table has channel specific configuration 
        information. This is available for each line channel."
    --DEFAULT   test-function   test_vochantable
    --DEFAULT   next-function   next_vochantable
    --DEFAULT   get-function    get_vochantable_%t
    --DEFAULT   view-mask       IPX_VIEW 
        ::= { lineServiceObjects  1 }

lineChanEntry OBJECT-TYPE
    SYNTAX      LineChanEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the line Channel information table."
    INDEX   { switchIfIndex, lineChanChannelIndex }
        ::= { lineChanTable 1 }

LineChanEntry ::=
    SEQUENCE {
    lineChanChannelIndex      INTEGER,
    lineChanEndptPtr          OBJECT IDENTIFIER,
    lineChanIfType            INTEGER,
    lineChanAdapVoice         INTEGER,
    lineChanDialType          INTEGER,
    lineChanDtSignallingDelay INTEGER,
    lineChanDtMinWink         INTEGER,
    lineChanDtPlayOutDelay    INTEGER,
    lineChanRecvSigABit       INTEGER,
    lineChanRecvSigBBit       INTEGER,
    lineChanRecvSigCBit       INTEGER,
    lineChanRecvSigDBit       INTEGER,
    lineChanXmitSigABit       INTEGER,
    lineChanXmitSigBBit       INTEGER,
    lineChanXmitSigCBit       INTEGER,
    lineChanXmitSigDBit       INTEGER,
    lineChanIfTypeName        INTEGER,
    lineChanIfOnhkABit        INTEGER,
    lineChanIfOnhkBBit        INTEGER,
    lineChanIfOnhkCBit        INTEGER,
    lineChanIfOnhkDBit        INTEGER,
    lineChanIfCondIndex       INTEGER,
    lineChanEchoCancel        INTEGER,
    lineChanEchoRtnLoss       INTEGER,
    lineChanEchoTone          INTEGER,
    lineChanEchoConv          INTEGER,
    lineChanEchoNlp           INTEGER,
    lineChanInGain            INTEGER,
    lineChanOutGain           INTEGER,
    lineChanUtil              INTEGER,
    lineChanEchoBgFilter      INTEGER,
    lineChanEchoBackCard      INTEGER,
    lineChanDataDceDte        INTEGER,
    lineChanDataUcs           INTEGER,
    lineChanConnPtr           OBJECT IDENTIFIER,
    lineChanEiaUpdt           INTEGER,
    lineChanTimeSlot          INTEGER,
    lineChanEndState          INTEGER,
    lineChanIdleCodeSuppr     INTEGER
}

lineChanChannelIndex     OBJECT-TYPE
    SYNTAX      INTEGER (1..31)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The channel number. This shall serve as the index to 
                 this table"
        ::= { lineChanEntry 1  }

lineChanEndptPtr    OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Pointer to an endpoint table entry. In case there is no
                 no connection for this channel, there is no corresponding 
                 endpoint table entry, so a null OID is returned."
        ::= { lineChanEntry 2  }

lineChanIfType OBJECT-TYPE
    SYNTAX      INTEGER {
                unknown (1),
                t1      (2),
                e1      (3)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The type of the line interface associated with this
                 channel"
        ::= { lineChanEntry 3  }

lineChanAdapVoice OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Determines whether the channel is configured for Adaptive 
                 line. This feature must be configured at both ends of the 
                 channel. The adaptive line feature must also be equipped at
                 each node terminating the connection. If the adaptive line 
                 feature is enabled for a channel connection which is used 
                 for a 'c' or 'v' connection, VAD is automatically disabled 
                 on that channel when trunk bandwidth is available, and it 
                 is enabled when trunk bandwidth is needed. By DEFAULT, this
                 is True. This variable is not applicable if a channel is used
                 for signalling or data type connections." 
        ::= { lineChanEntry 4  } 

lineChanDialType OBJECT-TYPE
    SYNTAX      INTEGER {
                inband(1),
                pulse(2),
                userConfigured(3)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Information about dail type used on the channel. By default 
                 Inband dail type is used.  In case it is of type 
                 userConfigured, the related objects for which values need 
                 to be provided are :
                    lineChanSignallingDelay
                    lineChanMinWink
                    lineChanPlayOutDelay.
                 If the values for any of the above variables are not 
                 provided for userConfigured(3) Dial type, the current 
                 values in the database shall be retained. Each of the 
                 variables can be set independently. By default, every
                 voice connection is configured with Inband signalling.
                 When the dialType is inband(1) or pulse(2), these values 
                 are used:

                 SignallingType                Inband     Pulse

                 lineChanSignallingDelay      96        96
                 lineChanMinWink              20        20
                 lineChanPlayOutDelay         200       200

                 When the dial type is inband(1) or pulse(2), the 
                 objects mentioned above are not configurable."
        ::= { lineChanEntry 5  } 

lineChanDtSignallingDelay    OBJECT-TYPE
    SYNTAX      INTEGER (30..96)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "It is the signalling delay in milliseconds, assigned to
                 the userConfigurable(3) dial type. The value specified is 
                 rounded to the nearest multiple of 1.5 msec.
                 When the dial type is inband(1) or pulse(2), a default value
                 of 96 is used, and a configured valued is not accepted."
        ::= { lineChanEntry 6  } 

lineChanDtMinWink OBJECT-TYPE
    SYNTAX      INTEGER (120..300)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "It is the minimum wink in milliseconds, assigned to
                 the userConfigurable(3) dial type. The value specified 
                 is rounded to the nearest multiple of 3 msec.
                 When the dial type is inband(1) or pulse(2), a default value
                 of 200 is used, and a configured valued is not accepted."
        ::= { lineChanEntry 7  } 

lineChanDtPlayOutDelay  OBJECT-TYPE
    SYNTAX      INTEGER (100..200)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "It is the playout delay in milliseconds, assigned to
                 the userConfigurable(3) dial type. The value specified is 
                 rounded to the nearest multiple of 1.5 msec.
                 When the dial type is inband(1) or pulse(2), a default value
                 of 200 is used, and a configured valued is not accepted."
        ::= { lineChanEntry  8 }

lineChanRecvSigABit  OBJECT-TYPE
    SYNTAX       INTEGER {
                 zero (1),
                 one (2),
                 xmitTransparent(3),
                 donotXmit(4),
                 revSigBit(5)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "It represents the configuration of bit conversion to 
                 received signalling on a channel. The value is given as
                 one of the enumeration above which have following meaning:
                     one(1)             == Signalling bit is 1
                     zero(2)            == Signalling bit is 0
                     xmitTransparent(3) == Send signalling bit transparently
                     donotXmit(4)       == Don't transmit signalling bit
                     revSigBit(5)       == Reverse/Inverse signalling bit.
                 The default value is zero(1). If the signalling is not used,
                 the A B C and D bits have 1 1 0 1 values respectively. 
                 The initialization value is xmitTransparent(3)"
        ::= { lineChanEntry  9 }

lineChanRecvSigBBit  OBJECT-TYPE
    SYNTAX       INTEGER {
                 zero (1),
                 one (2),
                 xmitTransparent(3),
                 donotXmit(4),
                 revSigBit(5)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "It represents the configuration of bit conversion to 
                 received signalling on a channel. The value is given as
                 one of the enumeration above which have following meaning:
                     one(1)             == Signalling bit is 1
                     zero(2)            == Signalling bit is 0
                     xmitTransparent(3) == Send signalling bit transparently
                     donotXmit(4)       == Don't transmit signalling bit
                     revSigBit(5)       == Reverse/Inverse signalling bit.
                 The default value is zero(1). If the signalling is not used,
                 the A B C and D bits have 1 1 0 1 values respectively. 
                 The initialization value is xmitTransparent(3)"
        ::= { lineChanEntry 10 }

lineChanRecvSigCBit  OBJECT-TYPE
    SYNTAX       INTEGER {
                 zero (1),
                 one (2),
                 xmitTransparent(3),
                 donotXmit(4),
                 revSigBit(5)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "It represents the configuration of bit conversion to 
                 received signalling on a channel. The value is given as
                 one of the enumeration above which have following meaning:
                     one(1)             == Signalling bit is 1
                     zero(2)            == Signalling bit is 0
                     xmitTransparent(3) == Send signalling bit transparently
                     donotXmit(4)       == Don't transmit signalling bit
                     revSigBit(5)       == Reverse/Inverse signalling bit.
                 The default value is zero(1). If the signalling is not used,
                 the A B C and D bits have 1 1 0 1 values respectively. 
                 The initialization value is xmitTransparent(3)"
        ::= { lineChanEntry 11 }

lineChanRecvSigDBit  OBJECT-TYPE
    SYNTAX       INTEGER {
                 zero (1),
                 one (2),
                 xmitTransparent(3),
                 donotXmit(4),
                 revSigBit(5)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "It represents the configuration of bit conversion to 
                 received signalling on a channel. The value is given as
                 one of the enumeration above which have following meaning:
                     one(1)             == Signalling bit is 1
                     zero(2)            == Signalling bit is 0
                     xmitTransparent(3) == Send signalling bit transparently
                     donotXmit(4)       == Don't transmit signalling bit
                     revSigBit(5)       == Reverse/Inverse signalling bit.
                 The default value is zero(1). If the signalling is not used,
                 the A B C and D bits have 1 1 0 1 values respectively. 
                 The initialization value is xmitTransparent(3)"
        ::= { lineChanEntry 12 }

lineChanXmitSigABit  OBJECT-TYPE
    SYNTAX       INTEGER {
                 zero (1),
                 one (2),
                 xmitTransparent(3),
                 donotXmit(4),
                 revSigBit(5)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This allows the node to pass A  channel signalling bits 
                 through unchanged, or to invert / hold them at a given
                 value for a line. It affects signalling
                 bits in the transmit direction (eg. to the CPE / PABX).
                 The value is given as one of the enumerated values which
                 have following meaning:
                     one(1)             == Signalling bit is 1
                     zero(2)            == Signalling bit is 0
                     xmitTransparent(3) == Send signalling bit transparently
                     donotXmit(4)       == Don't transmit signalling bit
                     revSigBit(5)       == Reverse/Inverse signalling bit.
                 The default value is zero(1). If the signalling is not used,
                 the A B C and D bits have 1 1 0 1 values respectively. 
                 The initialization value is xmitTransparent(3)"
        ::= { lineChanEntry 13 }

lineChanXmitSigBBit  OBJECT-TYPE
    SYNTAX       INTEGER {
                 zero (1),
                 one (2),
                 xmitTransparent(3),
                 donotXmit(4),
                 revSigBit(5)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This allows the node to pass B  channel signalling bits 
                 through unchanged, or to invert / hold them at a given
                 value for a line. It affects signalling
                 bits in the transmit direction (eg. to the CPE / PABX).
                 The value is given as one of the enumerated values which
                 have following meaning:
                     one(1)             == Signalling bit is 1
                     zero(2)            == Signalling bit is 0
                     xmitTransparent(3) == Send signalling bit transparently
                     donotXmit(4)       == Don't transmit signalling bit
                     revSigBit(5)       == Reverse/Inverse signalling bit.
                 The default value is zero(1). If the signalling is not used,
                 the A B C and D bits have 1 1 0 1 values respectively. 
                 The initialization value is xmitTransparent(3)"
        ::= { lineChanEntry 14 }

lineChanXmitSigCBit  OBJECT-TYPE
    SYNTAX       INTEGER {
                 zero (1),
                 one (2),
                 xmitTransparent(3),
                 donotXmit(4),
                 revSigBit(5)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This allows the node to pass C  channel signalling bits
                 through unchanged, or to invert / hold them at a given
                 value for a line. It affects signalling
                 bits in the transmit direction (eg. to the CPE / PABX).
                 The value is given as one of the enumerated values which
                 have following meaning:
                     one(1)             == Signalling bit is 1
                     zero(2)            == Signalling bit is 0
                     xmitTransparent(3) == Send signalling bit transparently
                     donotXmit(4)       == Don't transmit signalling bit
                     revSigBit(5)       == Reverse/Inverse signalling bit.
                 The default value is zero(1). If the signalling is not used,
                 the A B C and D bits have 1 1 0 1 values respectively. 
                 The initialization value is xmitTransparent(3)"
        ::= { lineChanEntry 15 }

lineChanXmitSigDBit  OBJECT-TYPE
    SYNTAX       INTEGER {
                 zero (1),
                 one (2),
                 xmitTransparent(3),
                 donotXmit(4),
                 revSigBit(5)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This allows the node to pass D channel signalling bits
                 through unchanged, or to invert / hold them at a given
                 value for a line. It affects signalling
                 bits in the transmit direction (eg. to the CPE / PABX).
                 The value is given as one of the enumerated values which
                 have following meaning:
                     one(1)             == Signalling bit is 1
                     zero(2)            == Signalling bit is 0
                     xmitTransparent(3) == Send signalling bit transparently
                     donotXmit(4)       == Don't transmit signalling bit
                     revSigBit(5)       == Reverse/Inverse signalling bit.
                 The default value is zero(1). If the signalling is not used,
                 the A B C and D bits have 1 1 0 1 values respectively. 
                 The initialization value is xmitTransparent(3)"
        ::= { lineChanEntry 16 }

lineChanIfTypeName OBJECT-TYPE
    SYNTAX         INTEGER {
                   userConfig(1),
                   unConfig(2),
                   noSig(3),
                   forceSig(4),
                   twoWireENM(5),
                   fourWireENM(6),
                   fXO(7),
                   fXSGS(8),
                   fXSLS(9),
                   dP0(10),
                   dPT(11),
                   rP0(12),
                   rPT(13),
                   sDP0(14),
                   dX(15),
                   eT0(16),
                   pLAR(17),
                   pLR(18),
                   rD(19),
                   r1(20),
                   sSDC5A(21),
                   r2Backward(22),
                   r2Forward(23)
        }
    ACCESS      read-write 
    STATUS      mandatory
    DESCRIPTION "It represents the interface type assigned to a voice channel.
                 The lineChanIfTypeName is ignored for 'data' type connections,
                 but lineChanIfTypeName can be set to configure a channel for
                 voice connections instead of 'data' type connections.
                 The lineChanDataDceDte interface type can be set to configure
                 a channel for data connections instead of voice connections.
                 The following different types of interfaces are possbile:

                Number   InterfaceType       A    B    C    D  CondName
            
                1         {User Config,      U,   U,   N,   N,  a},
                2         {Unconfig,         U,   U,   N,   N,  a},
                3         {No Sig,           U,   U,   U,   U,  a},
                4         {Force Sig,        U,   U,   N,   N,  a},
                5         {2W E&M,           0,   X,   N,   N,  a},
                6         {4W E&M,           0,   X,   N,   N,  a},
                7         {FXO,              1,   1,   N,   N,  b},
                8         {FXS G/S,          0,   1,   N,   N,  c},
                9         {FXS L/S,          0,   X,   N,   N,  d},
                10        {DPO,              0,   X,   N,   N,  a},
                11        {DPT,              0,   X,   N,   N,  a},
                12        {RPO,              0,   X,   N,   N,  a},
                13        {RPT,              0,   X,   N,   N,  a},
                14        {SDPO,             0,   X,   N,   N,  a},
                15        {DX,               0,   X,   N,   N,  a},
                16        {ETO,              U,   U,   N,   N,  e},
                17        {PLAR,             U,   U,   N,   N,  d},
                18        {PLR,              0,   X,   N,   N,  a},
                19        {RD,               U,   U,   N,   N,  a},
                20        {R1 (SOCOTEL),     0,   N,   N,   N,  e},
                21        {SSDC5A,           1,   1,   0,   1,  f},
                22        {R2 (backward),    1,   1,   N,   N,  e},
                23        {R2 (forward),     1,   0,   N,   N,  d}

        Where A B C D are the signalling bits corresponding to Onhook 
        values having the following meanings:
                0 == zero(1)
                1 == one(2)
                X == donotCare(3)
                U == unKnown(4)
                N == notUsed(5)

        If the IPX receives A B C D bits corresponding to the on-hook 
        values, that channel is known to be on-hook. Otherwise that 
        channel is known to be offhook.  Each pre-defined interface type
        has a pre-determined conditioning template associated with it.

        If any of the above variables are not provided with values, the  
        current values in the data base are retained.
        The default values for a voice channel are:

               InterfaceType    A    B    C    D   CondName
        
               UnConfigured     U    U    N    N   a.

        If it is a userConfigured(1) OR Forced Signalling forceSig(4),
        the following variables need to be supplied: 
                lineChanIfOnhkABit
                lineChanIfOnhkBBit
                lineChanIfOnhkCBit
                lineChanIfOnhkDBit
                lineChanIfCondName.

        The Conditioning templates can be any of a(1) - f(6) types.

        If a pre-defined ChanIfTypeName is chosen in a set-request,
        values for the other related objects should not be provided."

        ::= { lineChanEntry 17 }

lineChanIfOnhkABit OBJECT-TYPE
    SYNTAX      INTEGER  {
                zero(1),
                one(2),
                donotCare(3),
                unKnown(4),
                notUsed(5)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "It represents the value of A signalling bit, for which 
                 the IPX shall recognize a on-hook condition. The default 
                 value is unKnown(4). The value corresponding to pre-defined
                 Interface types have been given in the table in the 
                 'Description' clause of the object lineChanIfTypeName. 
                 If the interface type is pre-defined type, value is not 
                 accepted for this object."
        ::= { lineChanEntry 18 }

lineChanIfOnhkBBit OBJECT-TYPE
    SYNTAX      INTEGER {
                zero(1),
                one(2),
                donotCare(3),
                unKnown (4),
                notUsed(5)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "It represents the value of B signalling bit, for which
                 the IPX shall recognize a on-hook condition. The default
                 value is unKnown(4). The value corresponding to pre-defined
                 Interface types have been given in the table in the 
                 'Description' clause of the object lineChanIfTypeName. 
                 If the interface type is pre-defined type, value is not 
                 accepted for this object."
        ::= { lineChanEntry 19 }

lineChanIfOnhkCBit OBJECT-TYPE
    SYNTAX      INTEGER  {
                zero(1),
                one(2),
                donotCare(3),
                unKnown (4),
                notUsed(5)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "It represents the value of C signalling bit, for which
                 the IPX shall recognize a on-hook condition. The default
                 value is unKnown(4). The value corresponding to pre-defined
                 Interface types have been given in the table in the 
                 'Description' clause of the object lineChanIfTypeName. 
                 If the interface type is pre-defined type, value is not 
                 accepted for this object."
        ::= { lineChanEntry 20 }

lineChanIfOnhkDBit OBJECT-TYPE
    SYNTAX      INTEGER  {
                zero(1),
                one(2),
                donotCare(3),
                unKnown (4),
                notUsed(5)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "It represents the value of D signalling bit, for which
                 the IPX shall recognize a on-hook condition. The default
                 value is unKnown(4). The value corresponding to pre-defined
                 Interface types have been given in the table in the 
                 'Description' clause of the object lineChanIfTypeName. 
                 If the interface type is pre-defined type, value is not 
                 accepted for this object."
        ::= { lineChanEntry 21 }

lineChanIfCondIndex OBJECT-TYPE
    SYNTAX      INTEGER {
                a(1),
                b(2),
                c(3),
                d(4),
                e(5),
                f(6)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "It represents the name of one of the condition criterion
                 templates for the channel. The value is related to values
                 of lineChanIfTypeName as described in the 'Description'
                 clause of the lineChanIfTypeName. If lineChanIfTypeName
                 is not userConfig(1) or forceSig(4), lineChanIfCondIndex
                 values are  not accepted in set-requests. Only values for 
                 pre-defined conditioning templates are accepted for this object."
        ::= { lineChanEntry 22 }

lineChanEchoCancel  OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This represents the integrated echo canceller channel 
        parameters associated with the specified voice endpoint channel.
        By default it is disabled. If it is to be enabled from a 
        disabled state then values for following variables must be given:

        Variable Name             Value       Description

        lineChanEchoRtnLoss    high/low    Set the echo return loss
                                               to high / low.

        lineChanEchoTone       enable/     Enables or disables the
                                   disable     tone disabler.

        lineChanEchoConv       enable/     Enables or disables 
                                   disable     convergence.

        lineChanEchoNlp        enable/     Enables or disables 
                                   disable     non-linear processing.

        lineChanEchoBgFilter   enable/     Enables or disables the
                                   disable     Background Filter

        lineChanEchoBackCard   enable/     Enables or disables the preference 
                                   disable     for BackCard echo cancellation
        }
        If any one of the variables are not specified, the previous 
        value of that variable shall be retained. If the Echo Cancel
        is set to disable(2), values for the related parameters
        are not allowed in the set-request."
        ::= { lineChanEntry 23 }

lineChanEchoRtnLoss OBJECT-TYPE
    SYNTAX      INTEGER {
                low(1),
                high(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This represents the Echo Return Loss if the echo canceller 
                 is enabled. The default value is high(2). If the Echo Cancel
                 is set to disable(2), values for the related parameters 
                 are not allowed in the set-request."
        ::= { lineChanEntry 24 }

lineChanEchoTone   OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This represents whether the Tone disabler  is enabled. The 
                 default value is enable(1). If the Echo Cancel
                 is set to disable(2), values for the related parameters 
                 are not allowed in the set-request."
        ::= { lineChanEntry 25 }

lineChanEchoConv    OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This represents whether the Echo Convergence is enabled. 
                 The default value is enable(1). If the Echo Cancel
                 is set to disable(2), values for the related parameters 
                 are not allowed in the set-request."
        ::= { lineChanEntry 26 }

lineChanEchoNlp     OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This represents whether the NonLinear processing is 
                 enabled. The default value is enable(1). If the Echo 
                 Cancel is set to disable(2), values for the related 
                 parameters are not allowed in the set-request."
        ::= { lineChanEntry 27 }

lineChanInGain OBJECT-TYPE
    SYNTAX      INTEGER (0..14)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This variable represents the amount of gain inserted at 
                 the receiver side of a line on voice type 
                 connections. The gain is specified in decibels to be 
                 assigned to the channel. The gain can be configured  
                 between +6 dB and -8 dB. By default it is zero."
        ::= { lineChanEntry 28 }

lineChanOutGain OBJECT-TYPE
    SYNTAX      INTEGER (0..14)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This variable represents the amount of gain inserted at
                 the transmit side of a line on voice type 
                 connections. The gain is specified in decibels to be 
                 assigned to the channel. The gain can be configured  
                 between +6 dB and -8 dB. By default it is zero."
        ::= { lineChanEntry 29 }

lineChanUtil OBJECT-TYPE
    SYNTAX      INTEGER (0..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Represents the percentage of utilization of this channel.  
                 This object informs the system software of the expected 
                 utilization rate of connections with traffic depdendent 
                 compression algorithm for voice connections with VAD.
                 The default value is 40."
        ::= { lineChanEntry 30 }

lineChanEchoBgFilter    OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This represents whether the Echo Canceller Background
                 Filter is enabled. The default value is enable(1).
                 If the Echo Cancel is set to disable(2), values for
                 the related parameters are not allowed in the set-request."
        ::= { lineChanEntry 31 }

lineChanEchoBackCard    OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This represents whether the preference for Echo Cancelation 
                 on the backcard is enabled. The default value is enable(1).
                 If the Echo Cancel is set to disable(2), values for
                 the related parameters are not allowed in the set-request."
        ::= { lineChanEntry 32 }

lineChanDataDceDte OBJECT-TYPE
    SYNTAX      INTEGER {
                other (1),
                dce   (2),
                dte   (3)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Indicates if the channel is operating as a DCE or DTE
                 data interface when configured for data connections.
                 The lineChanDataDceDte interface type can be set to configure
                 a channel for data connections instead of voice connections.
                 The lineChanIfTypeName can be set to configure a channel for
                 voice connections instead of data type connections."
        ::= { lineChanEntry 33 }

lineChanDataUcs OBJECT-TYPE
    SYNTAX      INTEGER {
                other (1),
                t1-ucs(2),
                ds0a  (3),
                e1-ucs(4)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The unassigned channel signalling configuration used when 
                 a channel is configured for data connections. This object
                 is configurable for T1 lines to t1-ucs(2) or ds0a(3). The 
                 default value is t1-ucs(2). For E1 lines, the this object is
                 always e1-ucs(4). An attempt to set an invalid value will
                 will fail with genError status. (see strmErrors for details.)"
       ::= { lineChanEntry 34 }
 
lineChanConnPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Pointer to an connTable entry. In case there is no
                 no connection for this channel, there is no corresponding 
                 table entry, so a null OID is returned."
        ::= { lineChanEntry 35 }

lineChanEiaUpdt OBJECT-TYPE
     SYNTAX      INTEGER (0..20)
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "Sampling rate for updating EIA control leads in
                  number of samples per second. The default is 2."
         ::= { lineChanEntry 36 }
 
lineChanTimeSlot     OBJECT-TYPE
    SYNTAX      INTEGER (0..31)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The Timeslot number to be associated with this
                 channel; used with Cached SVC channel only.
                 0 is not a setable value.  It is returned if
                 SVC caching is turned off or other errors."
        ::= { lineChanEntry 37  }
 
lineChanEndState     OBJECT-TYPE
    SYNTAX      INTEGER  {
                enabled  (1),
                disabled (2),
                unknown  (3)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Desired end state for this Cached SVC channel only.
                 The value 3 is not setable but is returned on error."
        ::= { lineChanEntry 38  }
 
lineChanIdleCodeSuppr    OBJECT-TYPE
    SYNTAX      INTEGER  {
                enabled  (1),
                disabled (2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This represents whether Idle Code Suppression is enabled.
                 The default value is disabled(2). Setting to disabled is
                 allowed for card that does not support ICS, but setting
                 to enabled is not allowed."
        ::= { lineChanEntry 39  }

--
-- This object is used for creating PVCs (connections).  The following
-- steps are required for creating PVCs (this example creates a
-- frame relay PVC):
--
--  1) Obtain the current value of connNextEndptIndex.
--  2) Create a new entry in the frEndptTable:
--     a. Set frEndptAdminStatus to create using index value 
--        obtained from connNextEndptIndex.
--     b. Set the values of frEndptDesc and frOtherEndptDesc
--        appropriately.  For example to creat a  from NodeA in domain
--        D1 using Frame Relay end-point 12.1.100 to NodeB in domain D2
--        with Frame Relay end-point 4.2.100:
--              Set frEndptDesc to string      12.1.100
--              Set frOtherEndptDesc to string D2.NodeB.4.2.100
--     c. Optionally Set the values of the input and output bandwidth
--        parameters.
--     d. Optionally Set the values of the other PVC options.
--  3) Issue a management protocol SET operation for the newly built
--     entry.
--
-- Once complete, a new row in the frEndptTable will exist with
-- the value obtained from connNextEndptIndex as the INDEX, and a new
-- row in the connTable will exist.  The connTable row is used to
-- manipulate the state of the connection, obtain current status of
-- the connection, and to obtain routing information about the connection.
--
-- To delete the connection, modify the frEndptAdminStatus object in the
-- corresponding end-point to "delete", and perform a management protocol
-- SET operation on the entry.  
--

connNextEndptIndex OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This object contains an appropriate value to be used
                 when creating entries in the connection specific
                 end-point tables (e.g. frEndptTable).  A value
                 of minus one (-1) indicates that no unassigned entries are
                 available.  To obtain the connNextEndptIndex value
                 for a new entry, the manager issues a management protocol
                 retrieval operation to obtain the current value of
                 this object.  After each retrieval, the agent should
                 modify the value to the next unassigned index."
    --DEFAULT    get-function get_conn_nextendptindex
        ::= { switchConnection 1  }


-- This object contains the value of the request id for the newest
-- entry in the error status table. Many management applications
-- have no knowledge of the request ids used by the SNMP engine.
-- These applications can get the value of this object and then
-- use it to retrieve the error status for the last SET operation.

errStatusLastIndex  OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      obsolete 
    DESCRIPTION "If at least one entry exists in the error status table
                 for the given manager, the value of this object contains
                 the index corresponding to the last entry. If no entry
                 exists in the error status table for the given manager
                 the value of this object is -1."
    --DEFAULT    get-function get_err_lastindex
        ::= { switchConnection 2  }


--
-- The following table is used to maintain status information about
-- SNMP SET requests from a Manager.  When an SNMP SET completes, an 
-- entry is created.  In addition to successful status, the manager
-- is provided information associated with any failed requests. This
-- table is indexed by request ID.  The request Id is the SNMP PDU 
-- identifier associated with the failed request.
--
-- Currently a limit of 10 entries are imposed on this table. Each
-- manager is allowed to access it's own table.  Individual manager
-- access is determined by IP address.
--
errStatusTable OBJECT-TYPE 
    SYNTAX      SEQUENCE OF ErrStatusTableEntry
    ACCESS      not-accessible
    STATUS      deprecated 
    DESCRIPTION "A List of Error Statuses for a given SNMP Manager"
    --DEFAULT   test-function   test_errtable
    --DEFAULT   next-function   next_errtable
    --DEFAULT   get-function    get_errtable_%t
        ::= { switchConnection 3  }

errStatusTableEntry OBJECT-TYPE
    SYNTAX      ErrStatusTableEntry
    ACCESS      not-accessible
    STATUS      deprecated 
    DESCRIPTION "A General Error Status Entry."
    INDEX   { errReqId }
        ::= { errStatusTable 1  }

ErrStatusTableEntry ::=
    SEQUENCE {
        errReqId                INTEGER,    
        errCode                 INTEGER,
        errStatusDesc           DisplayString
    }


errReqId OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      deprecated
    DESCRIPTION "This object contains the PDU request ID associated with
                 the error." 
        ::= { errStatusTableEntry 1  }

errCode OBJECT-TYPE
    SYNTAX      INTEGER {
                success(1),
                existErr(2),
                syntaxErr(3),
                resourceErr(4),
                databaseLocked(5),
                otherErr(6),
                wrongType(7),
                wrongLength(8),
                wrongEncoding(9),
                wrongValue(10),
                noCreation(11),
                inconsistentValue(12),
                resourceUnavailable(13),
                commitFailed(14),
                undoFailed(15),
                authorizationError(16),
                notWritable(17),
                inconsistentName(18),
                featureDisabled(19),
                m32Problem(20),
                sarProblem(21),
                bnmProblem(22),
                ascUpdFailed(23),
                lineEnabled(24),
                lineDisabled(25),
                lmMismatch(26),
                lineHasPorts(27),
                portEnabled(28),
                portDisable(29),
                portHasChan(30),
                chanEnabled(31),
                chanDisabled(32),
                dlciEnabled(33),
                dlciDisabled(34)
        }
    ACCESS      read-only
    STATUS      deprecated
    DESCRIPTION "This object contains an error status code used by
                 the manager to take automated corrective actions
                 when requests encounter failures. If no error is
                 encountered, a successful status is provided."
        ::= { errStatusTableEntry 2  }

errStatusDesc OBJECT-TYPE
    SYNTAX      DisplayString
    ACCESS      read-only
    STATUS      deprecated
    DESCRIPTION "This object contains error status information for failed
                 SETS to one or more objects in frEndptTable and/or
                 vcTable. This object is updated only on failed SETS.
                 Since the SNMP standard allows only limited number of
                 error status returns, the managers can retrieve this
                 variable to get additional information on a 
                 failed SET. Typically this object will contain 
                 information specifiying date, type of operation (SET or
                 GET), current SNMP table (connTable, frEndptTable,... etc) 
                 and additional error information."
        ::= { errStatusTableEntry 3  }
 

--
-- This is the table describing all the connections associated with 
-- this managed entity.  The endpoints (virtual circuits) related to
-- these connections are defined in connection type-specific tables.
--
-- This table contains entries for existing connections.  These
-- entries can be viewed for the purpose of obtaining current information
-- about the managed entities connections:
--
--  1) connLclEndptDesc describes the local end-point for the connection.
--     Via this description one can obtain local domain, nodename, and
--     connection specific identifiers (e.g. slot, port, and address).
--  2) connRmtEndptDesc describes the remote end-point for the connection.
--     Via this description one can obtain remote domain, nodename, and
--     connection specific identifiers (e.g. slot, port, and address).
--  3) connOeIndex allows a manager to obtain information about the
--     connection from the remote node viewpoint.  This information
--     can be obtained by querying the remote node's connTable using
--     connOeIndex as the key INDEX.
--  4) connAdminStatus allows the connection to have it's state
--     changed from up to down, modify it's class of service, or
--     configure the preffered route of the connection.
--  5) connOperStatus contains the current status of the connection.
--     If the status is "failed", connNoRouteFoundFailure, connBumpFailure,
--     connEndPointFailure, and connTestFailure give more details about the
--     failure.
--  6) connFirstEndptPtr is an object identifier pointer to obtain a row 
--     in the end-point table that describes the local virtual circuit 
--     end-point.
--     Using the connType object, it is known what type of table this is
--     pointing to.  For example, this may point to an entry in the
--     frEndptTable for connections with vcType of frame-relay.
--     It is through the end-point specific tables that more
--     information such as configuration and statistics can be obtained.
--     Configuration of the connection is accomplished via modification
--     of the entry in the end-point specific table.
--  7) connCurrRouteDesc describes the current route being used by this
--     connection.  All hops of the route are specified.
--  8) connPrefRouteDesc describes the preferred route being used by this
--     connection.  All hops of the route are specified.
--  9) connMstOSpacePkts provides the minimum packet load available on the
--     current path of this connection in master -> slave direction.
-- 9.1)connMstOSpaceCells provides the minimum cell load available on the
--     current path of this connection in master -> slave direction.
--  10) connMstOSpaceBdaCmax provides the minimum BData A Cmax available on
--      current path of this connection in master -> slave direction.
--  11) connMstOSpaceBdbCmax provides the minimum BData B Cmax available on
--      current path of this connection in master -> slave direction.
--  12) connSlvOSpacePkts provides the minimum packet load available on the
--      current path of this connection in slave -> master direction.
-- 12.1)connSlvOSpaceCells provides the minimum cell load available on the
--      current path of this connection in slave -> master direction.
--  13) connSlvOSpaceBdaCmax provides the minimum BData A Cmax available on
--      current path of this connection in slave -> master direction.
--  14) connSlvOSpaceBdbCmax provides the minimum BData B Cmax available on
--      current path of this connection in slave -> master direction.
--  

connTable OBJECT-TYPE 
    SYNTAX      SEQUENCE OF ConnTableEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A List of Connection Virtual Circuit Entries"
    --DEFAULT   test-function   test_conntable
    --DEFAULT   next-function   next_conntable
    --DEFAULT   get-function    get_conntable_%t
        ::= { switchConnection 4  }

connTableEntry OBJECT-TYPE
    SYNTAX      ConnTableEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A General Connection Entry"
    INDEX   { connIndex }
        ::= { connTable 1  }

ConnTableEntry ::=
    SEQUENCE {
        connIndex                INTEGER,    
        connLclEndptDesc         DisplayString,
        connType                 INTEGER,

        connOeIndex              INTEGER,
        connRmtEndptDesc         DisplayString,
        
        connMasterFlag           INTEGER,
        connClassOfService       INTEGER,

        connGroupFlag            INTEGER,

        connAdminStatus          INTEGER,
        connOperStatus           INTEGER,

        connNoRouteFoundFailure  INTEGER,
        connBumpFailure          INTEGER,    

        connFirstEndptPtr        OBJECT IDENTIFIER,

        connCurrRouteDesc        DisplayString,
        connPrefRouteDesc        DisplayString,

        connMstOSpacePkts        INTEGER,
        connMstOSpaceCells       INTEGER,
        connMstOSpaceBdaCmax     INTEGER,
        connMstOSpaceBdbCmax     INTEGER,
        connSlvOSpacePkts        INTEGER,
        connSlvOSpaceCells       INTEGER,
        connSlvOSpaceBdaCmax     INTEGER,
        connSlvOSpaceBdbCmax     INTEGER,
        connIcaRTD               INTEGER,
        connGroupDesc            DisplayString
    }

connIndex OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Connection Table Index for this connection."
        ::= { connTableEntry 1  }

connLclEndptDesc OBJECT-TYPE
    SYNTAX      DisplayString
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Description for Local VC end-point.  Contains
                 information about the domain, nodename, slot,
                 port, and address value for the end-point.  For
                 example, D1.Node1.12.1.100.200, is a valid description."
        ::= { connTableEntry 2  }

connType OBJECT-TYPE
    SYNTAX      INTEGER {
                frameRelay(1),
                atf(2),
                atm(3),
                voice(4),
                unknown(5),
                data(6)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Connection type"
        ::= { connTableEntry 3  }

connOeIndex OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Index into remote node's connTable for this connection
                 end-point."
        ::= { connTableEntry 4  }

connRmtEndptDesc OBJECT-TYPE
    SYNTAX      DisplayString
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Description for Remote VC end-point.  Contains
                 information about the domain, nodename, slot,
                 port, and address value for the end-point.  For
                 example, D2.Node2.10.1.100.200, is a valid description."
        ::= { connTableEntry 5  }

connMasterFlag OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Specifies whether this end-point is the owner of
                 the connection."
        ::= { connTableEntry 6  }

connClassOfService OBJECT-TYPE
    SYNTAX      INTEGER (0..15)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "A class of service for this connection.  The lower
                 the class value, the higher the routing priority
                 of the connection."
        ::= { connTableEntry 7  }

connGroupFlag OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      deprecated
    DESCRIPTION "Specifies whether this is a grouped connection.  In
                 the grouped connection case, the connFirstEndptPtr object
                 is a pointer to a list of end-points in this group."
        ::= { connTableEntry 8  }

connAdminStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                up(1),
                down(2),
                modify(3),
                writeOnly(4),
                createGroup(5),
                deleteGroup(6)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "User requested state for connection.  A user can change
                 the state of the connection to up or down.  The user is
                 also allowed to modify the connections class of service or
                 preferred route. The connOperStatus object maintains the 
                 current status of the connection. When we delete
                 a group, the conIndex should be 65535. Note that 
                 createGroup(5) and deleteGroup(6) will no longer be 
                 supported after release 9.0."
        ::= { connTableEntry 9  }

connOperStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                ok(1),
                okPendingDown(2),
                down(3),
                failed(4),
                okPendingRoute(5),
                unknown(6)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Actual state of the connection.  If the state is failed,
                 then look to the objects connNoRouteFoundFailure,
                 and connBumpFailure to determine reason for failure."
        ::= { connTableEntry 10  }

connNoRouteFoundFailure OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Connection is failed is because no route to the
                 remote end-point could be found."
        ::= { connTableEntry 11  }

connBumpFailure OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Connection is failed because of insufficient bandwidth
                 to route to the remote end-point.  This may have also
                 been caused because a higher priority connection took
                 this connections bandwidth.  A higher priority connection
                 is one with the lowest class of service (COS)."
        ::= { connTableEntry 12  }

connFirstEndptPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Pointer to end-point specific information.  Using this
                 pointer the user can obtain configuration and statistical
                 information about the connection.  Specifically, this
                 object identifier specifies the MIB tree identification of
                 the first column of the appropriate end-point table row."
        ::= { connTableEntry 13  }

connCurrRouteDesc OBJECT-TYPE
    SYNTAX      DisplayString (SIZE (0..255))
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Descriptor of the current route (all hops specified).
                 This descriptor gives information about the domain, nodename,
                 slot, and possibly a port and vtrk for each hop in the
                 route.  
                 
                 Get Operations only:
                 For example, Node1   15--15.5 Node2 is a valid route
                 specifying a terrestrial link between Node1 slot 15 and
                 Node2 slot 15.5. Inter-domain connection's routes will
                 append the remote domain and nodename of the terminating
                 endpoint. Satellite trunks are denoted as '~~' and unknown
                 types are shown as '??'. For the originating node, only
                 the node name and outgoing trunk are shown. For the via
                 nodes, the node names and both incoming and outgoing trunks
                 are shown. For the destination node, only the node name
                 and incoming trunk is shown. Each trunk can be described
                 in the following four fashions:
                 1. slot
                 2. slot.port
                 3. slot.port.vtrk
                    where
                     slot      - slot number
                     port      - port number
                     vtrk      - virtual trunk number
                 Examples:
                 1) Node1   15--15.5 Node2
                 2) Node1   15--15.5.1 Node2   13.1--3 Node3
                 3) Node1   15--15.5.1 Node2   13.1--3.1 Node3   2.2.1~~5 Node4
                 "
 
        ::= { connTableEntry 14  }

connPrefRouteDesc OBJECT-TYPE
    SYNTAX      DisplayString (SIZE (0..255))
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Descriptor of the preferred route (all hops specified).
                 This descriptor gives information about the domain, nodename,
                 slot, and possibly a port for each hop in the route.  
                 
                 Get Operations:
                 The preferred route will be displayed in the 
                 same format as connCurrRouteDesc. 
                 
                 SET Operations: 
                 The following general format should be used:
                     (<node_name>.<slot>)* - <node_name>
                     (<node_name>.<slot.port>)* - <node_name>
                     (<node_name>.<slot.port.vtrk>)* - <node_name>
                 where
                     node_name - node name
                     slot      - slot number
                     port      - port number
                     vtrk      - virtual trunk number
                 Note that only the OUTGOING trunks are allowed in each hop
                 for the originating and via nodes. For the destination 
                 node, only the node name is specified. This is DIFFERENT
                 than the result of the Get operations where both incoming
                 and outgoing trunks are displayed for via nodes.
                 
                 The rules for validation are:
                 1. All slot, port, and vtrk must be NON-ZERO numbers.
                 2. The legal delimiter has to be one of {`\0', `-', `\n',
                    `-', ` `}, but only ` ` and `-' can show up between hops in
                    multiples.
                 3. The last hop can only be the node name of the destination
                    node.
 
                 Valid examples:
                     1) Node1.15.1 - Node2.13.1 - Node3
                     2) Node1.15.1-Node2.13.1-Node3
                     3) Node1.15   - Node2.12.3   - Node3.15   - Node4
 
                 Invalid examples:
                     1) Node1.0
                     2) Node1.2.0
                     3) Node1.1-Node2.2.2
                     4) Node1.1-Node2.2.2-Node3.3
                     5) Node1.1-Node2.2.2-Node3.
                     6) Node1.1-Node2.2.2-Node3.3-
                     7) Node1..1-Node2
                     8) Node1.1-3.3Node2.3.1
                     9) Node1.1-3.3Node2.3.1-2Node3
 
                 NOTE: a> (...)* notation means the description inside
                          parenthesis may repeat any number of times,
                          with `-' or ` ` as delimiters. The total number
                          of hops is 255.
                       b> An empty string (null or string of blank spaces)
                          will clear the pref route description equivalent
                          to delete pref route."
        ::= { connTableEntry 15  }

connMstOSpacePkts OBJECT-TYPE
    SYNTAX      INTEGER (0..2147483647) 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This variable provides the minimum packet load 
                 available on the current path of this connection 
                 in master->slave direction. This variable
                 is determined by comparing available bandwidth on
                 every trunk on which the connection is currently 
                 routed and reporting the minimum available bandwidth. 
                 For interdomain connections this value represents
                 available bandwidth through all domains. This variable
                 is meaningful for routed connections only. 
                 These values are returned in packets per second."
        ::= { connTableEntry 16  }

connMstOSpaceCells OBJECT-TYPE
    SYNTAX      INTEGER (0..2147483647)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This variable provides the minimum cell load 
                 available on the current path of this connection 
                 in master->slave direction. This variable
                 is determined by comparing available bandwidth on
                 every trunk on which the connection is currently 
                 routed and reporting the minimum available bandwidth. 
                 For interdomain connections this value represents
                 available bandwidth through all domains. This variable
                 is meaningful for routed connections only. 
                 These values are returned in cells per second."
        ::= { connTableEntry 17  }

connMstOSpaceBdaCmax OBJECT-TYPE
    SYNTAX      INTEGER (0..65534)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This variable provides the minimum BData A Cmax 
                 available on the current path of this connection 
                 in master->slave direction. This variable
                 is determined by comparing available BData A Cmax on
                 every trunk on which the connection is currently 
                 routed and reporting the minumim available.  
                 For interdomain connections this value represents
                 available BData A Cmax through all domains. This variable
                 is meaningful for routed connections only. 
                 These values are returned in bytes."
        ::= { connTableEntry 18  }

connMstOSpaceBdbCmax OBJECT-TYPE
    SYNTAX      INTEGER (0..65534)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This variable provides the minimum BData B Cmax 
                 available on the current path of this connection 
                 in master->slave direction. This variable
                 is determined by comparing available BData B Cmax on
                 every trunk on which the connection is currently 
                 routed and reporting the minumim available.  
                 For interdomain connections this value represents
                 available BData B Cmax through all domains. This variable
                 is meaningful for routed connections only. 
                 These values are returned in bytes."
        ::= { connTableEntry 19  }

connSlvOSpacePkts OBJECT-TYPE
    SYNTAX      INTEGER (0..2147483647)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This variable provides the minimum packet load
                 available on the current path of this connection 
                 in slave->master direction. This variable
                 is determined by comparing available bandwidth on
                 every trunk on which the connection is currently
                 routed and reporting the minumim available bandwidth.
                 For interdomain connections this value represents
                 available bandwidth through all domains. This variable
                 is meaningful for routed connections only.
                 These values are returned in packets per second."
        ::= { connTableEntry 20  }

connSlvOSpaceCells OBJECT-TYPE
    SYNTAX      INTEGER (0..2147483647)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This variable provides the minimum cell load
                 available on the current path of this connection 
                 in slave->master direction. This variable
                 is determined by comparing available bandwidth on
                 every trunk on which the connection is currently
                 routed and reporting the minumim available bandwidth.
                 For interdomain connections this value represents
                 available bandwidth through all domains. This variable
                 is meaningful for routed connections only.
                 These values are returned in cells per second."
        ::= { connTableEntry 21  }

connSlvOSpaceBdaCmax OBJECT-TYPE
    SYNTAX      INTEGER (0..65534)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This variable provides the minimum BData A Cmax 
                 available on the current path of this connection 
                 in slave->master direction. This variable
                 is determined by comparing available BData A Cmax on
                 every trunk on which the connection is currently 
                 routed and reporting the minumim available.  
                 For interdomain connections this value represents
                 available BData A Cmax through all domains. This variable
                 is meaningful for routed connections only. 
                 These values are returned in bytes."
        ::= { connTableEntry 22  }

connSlvOSpaceBdbCmax OBJECT-TYPE
    SYNTAX      INTEGER (0..65534)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This variable provides the minimum BData B Cmax 
                 available on the current path of this connection 
                 in slave->master direction. This variable
                 is determined by comparing available BData B Cmax on
                 every trunk on which the connection is currently 
                 routed and reporting the minumim available.  
                 For interdomain connections this value represents
                 available BData B Cmax through all domains. This variable
                 is meaningful for routed connections only. 
                 These values are returned in bytes."
        ::= { connTableEntry 23  }

connIcaRTD OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is the calculated round
                 trip delay (measured in milliseconds) of this connection.
                 This object is calculated for Foresight connections only. 
                 (xxEndptEnableFST object value is true)."
        ::= { connTableEntry 24  }

connGroupDesc OBJECT-TYPE
    SYNTAX      DisplayString
    ACCESS      read-write
    STATUS      deprecated
    DESCRIPTION "Description for Group identifier. This string describes the
                 connection group name. The format of the group name is 
                 domain.node_name.grp_number (Example, D1.node1.1). The 
                 varaible connIndex needs to have a special value of 65535
                 when Creating OR Deleting a group. The group number and 
                 the domain are optional. Since release 8.4, only con group
                 deletion is allowed."
        ::= { connTableEntry 25  }


--
-- This table defines Frame Relay connection end-point configuration.
-- Each connection (virtual circuit or PVC) end-point describes the
-- particular characteristics of the end-point.  Such information
-- as local and remote end-point descriptions, class of service, input
-- and output bandwidth parameters, special PVC options, and PVC
-- statistics are maintained for each end-point. 
-- A means for creating or deleting an end-point is also provided.
--
frEndptTable OBJECT-TYPE 
    SYNTAX      SEQUENCE OF FrEndptEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The Frame Relay End-Point Configuration table. 
                 This table is used to model a Frame Relay end-point.  
                 The table contains the configuration parameters 
                 required to create and configure a Frame Relay end-point." 
    --DEFAULT   test-function   test_frendpttable
    --DEFAULT   next-function   next_frendpttable
    --DEFAULT   get-function    get_frendpttable_%t
    --DEFAULT   view-mask       IPX_VIEW 
        ::= { switchConnection 5  }

frEndptEntry OBJECT-TYPE
    SYNTAX      FrEndptEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the Frame Relay End-point Configuration table."
    INDEX   { frEndptIndex }
        ::= { frEndptTable 1  }

FrEndptEntry ::=
    SEQUENCE {
        frEndptIndex             INTEGER,    
        frEndptDesc              DisplayString,

        frOtherEndptIndex        INTEGER,    
        frOtherEndptDesc         DisplayString,

        frEndptAdminStatus       INTEGER,
        frEndptOperStatus        INTEGER,

        frNoRouteFoundFailure    INTEGER,
        frBumpFailure            INTEGER,    
        frEndPointFailure        INTEGER,
        frTestFailure            INTEGER,

        frConnPtr                OBJECT IDENTIFIER,
        frNextPtr                OBJECT IDENTIFIER,
        frNextOnPortPtr          OBJECT IDENTIFIER,

        frEndptConnDesc          DisplayString,    
        frEndptTrkAvoidType      INTEGER,    
        frEndptTrkAvoidZCS       INTEGER,    

        frEndptSubType           INTEGER,    
        frEndptBWClass           INTEGER,    

        frEndptMIR               INTEGER,
        frEndptCIR               INTEGER,
        frEndptBc                INTEGER,
        frEndptBe                INTEGER,
        frEndptVcQSize           INTEGER,
        frEndptPIR               INTEGER,
        frEndptCMAX              INTEGER,
        frEndptEcnQSize          INTEGER,
        frEndptQIR               INTEGER,
        frEndptPercUtil          INTEGER,

        frEndptOeMIR             INTEGER,
        frEndptOeCIR             INTEGER,
        frEndptOeBc              INTEGER,
        frEndptOeBe              INTEGER,
        frEndptOeVcQSize         INTEGER,
        frEndptOePIR             INTEGER,
        frEndptOeCMAX            INTEGER,
        frEndptOeEcnQSize        INTEGER,
        frEndptOeQIR             INTEGER,
        frEndptOePercUtil        INTEGER,

        frEndptEnableFST         INTEGER,
        frEndptConnPrio          INTEGER,

        frEndptGroupFlag         INTEGER,
        frEndptLocLpbkState      INTEGER,
        frEndptLocRmtLpbkState   INTEGER,
        frEndptLpbkStatus        INTEGER,
        frEndptTestType          INTEGER,
        frEndptRtdTestDelay      INTEGER,
        frEndptGroupDesc         DisplayString 
    }

frEndptIndex OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Index into frEndptTable for this end-point."
        ::= { frEndptEntry 1  }

frEndptDesc OBJECT-TYPE
    SYNTAX      DisplayString
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "String describing this  end-point.  Contains
                 information about the domain, nodename, slot, port,
                 and DLCI for the end-point.  For example,
                 D1.Node1.12.1.100, is a valid description.  Domain
                 and nodename need not be given but slot, port,
                 and DLCI values must exist; 12.1.100 is valid."
        ::= { frEndptEntry 2  }

frOtherEndptIndex OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Index into remote node's frEndptTable for this PVC
                 end-point."
        ::= { frEndptEntry 3  }

frOtherEndptDesc OBJECT-TYPE
    SYNTAX      DisplayString
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "String describing the remote  end-point.  Contains
                 information about the domain, nodename, slot, port,
                 and DLCI for the end-point.  For example,
                 D2.Node2.10.1.100, is a valid description. Nodename,
                 slot, port, and DLCI values must exist; Node2.10.1.100
                 is valid."
        ::= { frEndptEntry 4  }

frEndptAdminStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                create(1),
                delete(2),
                modify(3),
                test(4),
                writeOnly(5)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "User requested state for end-point table row.  A user can
                 create this VC or delete this VC by setting this object
                 appropriately.  If the end-point is to be modified, set 
                 this object identifier to be modify. The user also has the
                 capability to test a particular object.  For this capability,
                 the user must set this value to test."
        ::= { frEndptEntry 5  }

frEndptOperStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                ok(1),
                okPendingDown(2),
                down(3),
                failed(4),
                inTest(5),
                okPendingRoute(6),
                okPendingDelete(7),
                looped(8),
                unknown(9)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Actual state of the end-point.  If the state is failed,
                 then look to the objects frNoRouteFoundFailure,
                 frBumpFailure, frEndPointFailure, and frTestFailure
                 to determine reason for failure."
        ::= { frEndptEntry 6  }

frNoRouteFoundFailure OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "End-point is failed is because no route to the
                 remote end-point could be found."
        ::= { frEndptEntry 7  }

frBumpFailure OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "End-point is failed because of insufficient bandwidth
                 to route to the remote end-point.  This may have also
                 been caused because a higher priority connection took
                 this end-point's bandwidth.  A higher priority connection
                 is one with the lowest class of service (COS)."
        ::= { frEndptEntry 8  }

frEndPointFailure OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "End-point is failed because of a remote end-point failure.
                 The remote end-point is on a node that resides in another
                 domain making the connection an inter-domain connection."
        ::= { frEndptEntry 9  }

frTestFailure OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "End-point is failed because of the failure of a
                 connection test if true(2)."
        ::= { frEndptEntry 10  }

frConnPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Pointer to general connection information.  Using this
                 pointer the user can obtain connection status, and
                 routing information. Specifically, this is an object
                 identifier specifying the first column of the appropriate
                 row in the connTable."
        ::= { frEndptEntry 11  }

frNextPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      deprecated
    DESCRIPTION "Pointer to next end-point information.  This allows
                 logical sets of end-points to be linked up.  For example,
                 the end-points associated with a bundle or group.
                 Specifically, this is an object identifier specifying the
                 first column of the appropriate row in the frEndptTable."
        ::= { frEndptEntry 12  }

frNextOnPortPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Pointer to next end-point information for the port 
                 associated with this end-point.  For example, using 
                 this pointer all frame relay end-points on a given 
                 slot.port can be determined.  Specifically, this is
                 an object identifier specifying the first column of the
                 appropriate row in the frEndptTable."
        ::= { frEndptEntry 13  }

frEndptConnDesc OBJECT-TYPE
    SYNTAX      DisplayString (SIZE (0..20))
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "A string that has been defined for the connection to
                 give a more descriptive name.  Connections can be given
                 clear text names in order to make them more human readable.
                 This object has been changed to not-accessible because
                 it is no longer supported as of release 8.4."
        ::= { frEndptEntry 14  }

frEndptTrkAvoidType OBJECT-TYPE
    SYNTAX      INTEGER {
                none(1),
                satellite(2),
                terrestrial(3)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "User selectable types of trunks to avoid for the
                 transfer of FRP data.  Current choices are to avoid
                 satellite links, terrestrial links, or to not avoid
                 any specific type of link. This object is optional
                 during the creation of the endpoint."
        ::= { frEndptEntry 15  }

frEndptTrkAvoidZCS OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Flag to force the connection to avoid trunks with zero
                 code suppression (ZCS). This object is optional during
                 the creation of the endpoint."
        ::= { frEndptEntry 16  }

frEndptSubType OBJECT-TYPE
    SYNTAX      INTEGER {
                frameRelay(1),
                atf(2),
                unknown(3),
                cbr(4),
                vbr(5),
                abr(6),
                atft(7),
                atfx(8)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Frame Relay endpoint subtype object. Note that frameRelay(1)
                 and atf(2) can be used interchangeably during connection
                 creation."
        ::= { frEndptEntry 17  }
 
frEndptBWClass OBJECT-TYPE
    SYNTAX      INTEGER (1..10)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "User selectable connection class which defines the
                 operating parameters for the connection.  Any or
                 all of these parameters can be overridden by
                 specifying the bandwidth parameters directly. This
                 object is required during the creation of an endpoint."
        ::= { frEndptEntry 18  }
 
frEndptMIR OBJECT-TYPE
    SYNTAX      INTEGER (2400..16384000)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The minimum transmit bandwidth (MIR) parameter
                 (in 100s of bits per second) for this  end-point.
                 During creation of an endpoint, this object is 
                 required if no class index is provided.  This is
                 because the default values of bandwidth parameters
                 not provided are derived from this object."
        ::= { frEndptEntry 19  }

frEndptCIR OBJECT-TYPE
    SYNTAX      INTEGER (0..16384000)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the committed
                 information rate (CIR) parameter (in 100s of bits
                 per second) for this  end-point.  This value will
                 be defaulted to the provided MIR during an endpoint
                 create. 0-CIR feature allows this object to be 0.
                 "
        ::= { frEndptEntry 20  }

frEndptBc OBJECT-TYPE
    SYNTAX      INTEGER (1..65535)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the committed
                 burst size (Bc) parameter (in bytes) for
                 this  end-point.
                 This parameter is entered instead of the frEndptVcQSize 
                 parameter.  If both the Bc and VcQSize are provided, the
                 values are tested for compatibility."
        ::= { frEndptEntry 21  }

frEndptBe OBJECT-TYPE
    SYNTAX      INTEGER (0..65535)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the excess
                 burst size (Be) parameter (in bytes) for
                 this  end-point.
                 This parameter is entered instead of the frEndptPIR 
                 parameter. If both the Be and the PIR are provided, the
                 values are tested for compatibility."
        ::= { frEndptEntry 22  }

frEndptVcQSize OBJECT-TYPE
    SYNTAX      INTEGER (1..65535)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The value of this object is the maximum queue depth
                 (in bytes) for this  end-point.
                 This parameter is entered instead of the frEndptBc
                 parameter. If both the VcQSize and the Bc are provided,
                 the values are tested for compatibility."
        ::= { frEndptEntry 23  }

frEndptPIR OBJECT-TYPE
    SYNTAX      INTEGER (2400..16384000)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The peak transmit bandwidth (PIR) parameter
                 (in 100s of bits per second) for this  end-point.
                 This parameter is entered instead of the frEndptBe
                 parameter. This value defaults to the current port
                 speed of the associated interface."
        ::= { frEndptEntry 24  }

frEndptCMAX OBJECT-TYPE
    SYNTAX      INTEGER (1..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The maximum credits (in FastPackets) that can be
                 accrued for this end-point."
        ::= { frEndptEntry 25  }

frEndptEcnQSize OBJECT-TYPE
    SYNTAX      INTEGER (0..65535)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The threshold setting used by the explicit congestion
                 notification feature for this  end-point's
                 transmit queue. This value is specified in bytes.
                 When the frEndptVcQSize value exceeds this value
                 then the FECN bit will be set in all frames transmitted
                 to the remote  end-point."
        ::= { frEndptEntry 26 }

frEndptQIR OBJECT-TYPE
    SYNTAX      INTEGER (2400..16384000)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The transmit quiescent information rate (QIR) parameter
                 (in 100s of bits per second) for this  end-point.
                 This value can range between the MIR and PIR values
                 and must be between 2400 and 16384000.  This parameter
                 has meaning only if the frEndptEnableFST parameter
                 is set to true."
        ::= { frEndptEntry 27 }

frEndptPercUtil OBJECT-TYPE
    SYNTAX      INTEGER (0..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the channel
                 percentage utilization setting for this  end-point.
                 This is the expected long-term utilization of the
                 channel by this  end-point."
        ::= { frEndptEntry 28 }

frEndptOeMIR OBJECT-TYPE
    SYNTAX      INTEGER (2400..16384000)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The minimum receive bandwidth (MIR) parameter
                 (in 100s of bits per second) for the other end-point.
                 This parameter is actually the frEndptMIR
                 parameter for the remote end-point.
                 During creation of an endpoint, this object is
                 required if no class index is provided.  This is
                 because the default values of bandwidth parameters
                 not provided are derived from this object."
        ::= { frEndptEntry 29 }

frEndptOeCIR OBJECT-TYPE
    SYNTAX      INTEGER (0..16384000)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the committed
                 information rate (CIR) parameter (in 100s of bits
                 per second) for the other end-point.
                 This parameter is actually the frEndptCIR
                 parameter for the remote end-point. 0-CIR feature allows
                 this object to be 0.
                 For ATFR/ATFST connections, see atmEndptOeSCR for the 
                 other end cell rate range. Bit rate = 384 x Cell rate.
                 E.g., if other end is BXM-T3,
                 minimal CIR = 50 x 384 = 19200.
                 "
        ::= { frEndptEntry 30 }

frEndptOeBc OBJECT-TYPE
    SYNTAX      INTEGER (0..65535)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the committed
                 burst size (Bc) parameter (in bytes) for
                 the end-point.  This parameter is entered
                 instead of the frEndptOeVcQSize parameter.
                 This parameter is actually the frEndptBc
                 parameter for the remote end-point.
                 Since this value is calculated at the remote end based on 
                 the BW parameters unaccessible by the local agent during
                 the varbind validation, the value specifed in the success 
                 SET response MAY NOT be its end value. The NMS is advised 
                 to GET this parameter again to confirm its actual value. 
                 Note: While modifying the value of 
                 this object it should be in the range 1..65535."
        ::= { frEndptEntry 31 }

frEndptOeBe OBJECT-TYPE
    SYNTAX      INTEGER (0..65535)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the excess
                 burst size (Be) parameter (in bytes) for
                 the other end-point This parameter is entered
                 instead of the frEndptOePIR parameter.
                 This parameter is actually the frEndptBe
                 parameter for the remote end-point.
                 Since this value is calculated at the remote end based on 
                 the BW parameters unaccessible by the local agent during
                 the varbind validation, the value specifed in the success 
                 SET response MAY NOT be its end value. The NMS is advised 
                 to GET this parameter again to confirm its actual value." 
        ::= { frEndptEntry 32 }

frEndptOeVcQSize OBJECT-TYPE
    SYNTAX      INTEGER (1..3072000)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The value of this object is the maximum queue depth
                 (in bytes) for this  end-point.
                 This parameter is entered instead of the frEndptOeBc
                 parameter.  This parameter is actually the
                 frEndptVcQSize parameter for the remote end-point.
                 Since this value is calculated at the remote end based on 
                 the BW parameters unaccessible by the local agent during
                 the varbind validation, the value specifed in the success 
                 SET response MAY NOT be its end value. The NMS is advised 
                 to GET this parameter again to confirm its actual value." 
        ::= { frEndptEntry 33 }

frEndptOePIR OBJECT-TYPE
    SYNTAX      INTEGER (2400..16384000)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The peak receive bandwidth (PIR) parameter
                 (in 100s of bits per second) for the other end-point 
                 This parameter is entered instead of the frEndptOeBe
                 parameter.  This parameter is actually the frEndptPIR
                 parameter for the remote end-point. This value defaults 
                 to the current port speed of the associated interface.
                 Since this value is calculated at the remote end based on 
                 the BW parameters unaccessible by the local agent during
                 the varbind validation, the value specifed in the success 
                 SET response MAY NOT be its end value. The NMS is advised 
                 to GET this parameter again to confirm its actual value."
        ::= { frEndptEntry 34 }

frEndptOeCMAX OBJECT-TYPE
    SYNTAX      INTEGER (1..57600)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The maximum credits (in (in FastPackets)that can be 
                 accrued for the other end-point. This parameter is
                 actually the frEndptCMAX parameter for the remote
                 end-point."
        ::= { frEndptEntry 35 }

frEndptOeEcnQSize OBJECT-TYPE
    SYNTAX      INTEGER (0..65535)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The threshold setting used by the explicit congestion
                 notification feature for the other end-point's
                 receive queue. This value is specified in bytes.
                 When the frpVCEndptOeVcQSize value exceeds this value
                 then the BECN bit will be set in all frames transmitted
                 to Frame Relay Service User.  This parameter is actually
                 the frEndptEcnQSize parameter for the remote end-point."
        ::= { frEndptEntry 36 }

frEndptOeQIR OBJECT-TYPE
    SYNTAX      INTEGER (2400..16384000)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The receive quiescent information rate (QIR) parameter
                 (in 100s of bits per second) for the other end-point. 
                 This value can range between the MIR and PIR values
                 and must be between 2400 and 16384000.  This parameter
                 has meaning only if the frEndptEnableFST parameter
                 is set to true.  This parameter is actually the frEndptQIR
                 parameter for the remote end-point."
        ::= { frEndptEntry 37 }

frEndptOePercUtil OBJECT-TYPE
    SYNTAX      INTEGER (0..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the channel
                 percentage utilization setting for the other end-point.
                 This is the expected long-term utilization of the
                 channel by the other end-point.  This parameter is actually
                 the frEndptPercUtil parameter for the remote end-point."
        ::= { frEndptEntry 38 }

frEndptEnableFST OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The value of this object determines whether or not the
                 ForeSight option is being used for this .  If set
                 to false, then ForeSight is not used, and if true then
                 ForeSight will be used. Note that this object CANNOT be
                 set for ATFR or ATFST connection during connection 
                 modification."
        ::= { frEndptEntry 39 }

frEndptConnPrio OBJECT-TYPE
    SYNTAX      INTEGER {
                low(1),
                high(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The value of this object determines the priority
                 that is given to the data carried by this .  If
                 set to low, then the data is given the standard
                 priority, and if set to high, the  data will be
                 given a higher priority.  Higher priority data
                 is placed at the beginning of the port's queues."
        ::= { frEndptEntry 40 }

frEndptGroupFlag OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      not-accessible
    STATUS      deprecated
    DESCRIPTION "Specifies whether this is a grouped connection. Note 
                 that MIB object connGroupFlag provides grouping 
                 information about all the connections using that
                 connTable entry whereas this object provides same 
                 information for this end point."
        ::= { frEndptEntry 41 }

frEndptLocLpbkState OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Specifies the Local Loopback State the user would
                 like to set for the endpoint." 
        ::= { frEndptEntry 42 }

frEndptLocRmtLpbkState OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write 
    STATUS      mandatory
    DESCRIPTION "Specifies the Local-Remote Loopback State the user 
                 would like to set for the endpoint." 
        ::= { frEndptEntry 43 }

frEndptLpbkStatus OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Specifies the current Loopback State of the endpoint. 
                 The value returned from this object is a bitmap
                 of the current loopback states which the endpoint
                 has configured.  There currently are 16 loopback
                 states an endpoint may have configured. If NO LOOPBACK
                 is configured, the agent will return -1.  The bitmap
                 is defined as follows:
         LP_RMT_RMT   0 /* Remote nodes remote muxbus loopback   */
         LP_RMT_TST   1 /* Remote nodes tstcon loopback          */
         LP_LOC_RMT   2 /* Local  nodes remoet muxbus loopback   */
         LP_LOC_TST   3 /* Local  nodes tstcon loopback          */
         LP_LOC_LOC   4 /* Local  nodes local muxbus loopback    */
         LP_LOC_PORT  5 /* Local  nodes port loopback            */
         LP_LOC_TPORT 6 /* Local  nodes port test loopback       */
         LP_RMT_LOC   7 /* Remote nodes local muxbus loopback    */
         LP_RMT_PORT  8 /* Remote nodes port loopback            */
         LP_RMT_TPORT 9 /* Remote nodes port test looback        */
         LP_LOC_CSU 10 /* Local  DDS network requested CSU loopback */
         LP_RMT_CSU 11 /* Remote DDS network requested CSU loopback */
         LP_LOC_DSU 12 /* Local  DDS network requested DSU loopback */
         LP_RMT_DSU 13 /* Remote DDS network requested DSU loopback */
         LP_LOC_EXT 14 /* Local  DDS external loopback          */
         LP_RMT_EXT 15 /* Remote DDS external loopback          */
         "
        ::= { frEndptEntry 44 }

frEndptTestType OBJECT-TYPE
    SYNTAX      INTEGER {
                test(1),
                testDelay(2),
                testNoLoop(3),
                testDelayNoLoop(4),
                writeOnly(5)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Specifies the type of test the user would like to
                 conduct on this endpoint.  There are currently two
                 types of tests.  Test will exercise continuity, while
                 TestDelay will calculate the delay incurred on the
                 connection. The result of the TestDelay may then be
                 accessed through the frEndptRtdTestDelay object.
                 To invoke a test, the frEndptAdminStatus is required 
                 to be set to test(4).
                 The NoLoop options provide the user the capability to
                 execute the tests without automatically invoking a 
                 loopback at the remote endpoint." 
        ::= { frEndptEntry 45 }

frEndptRtdTestDelay OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is the calculated round
                 trip delay (measured in milliseconds) of this Frame
                 Relay endpoint. A delay test is invoked through setting
                 the frEndptTestType object to TestDelay." 
        ::= { frEndptEntry 46 }

frEndptGroupDesc OBJECT-TYPE
    SYNTAX      DisplayString
    ACCESS      not-accessible
    STATUS      deprecated
    DESCRIPTION "String describing the group this endpoint is 
                 associated with.  The format of the group text
                 description is domain.node.grp_number (Example,
                 D2.node1.1)." 
        ::= { frEndptEntry 47 }
 

--
-- This table defines Frame Relay connection end-point statistics with
-- information in the following areas:
--
--  1. Received or transmitted frame statistics
--  2. Received or transmitted but discarded frame statistics.
--  3. Frame relay flow and congestion control statistics.
--      4. Received or transmitted frame and bytes over CIR.
--

frEndptStatTable OBJECT-TYPE 
    SYNTAX      SEQUENCE OF FrEndptStatEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The Frame Relay End-Point Statistics table." 
    --DEFAULT   test-function   test_frendptstattable
    --DEFAULT   next-function   next_frendptstattable
    --DEFAULT   get-function    get_frendptstattable_%t
    --DEFAULT   view-mask       IPX_VIEW 
    --DEFAULT   locator         FRENDPT_STAT_LOCATOR
        ::= { switchConnection 6  }

frEndptStatEntry OBJECT-TYPE
    SYNTAX      FrEndptStatEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the Frame Relay End-point Statistics table."
    INDEX   { frEndptIndex }
        ::= { frEndptStatTable 1  }

FrEndptStatEntry ::=
    SEQUENCE {
        frEndptRxBytes          Counter,
        frEndptRxBytesDscds     Counter,
        frEndptRxFrms           Counter,
        frEndptRxFrmsDscds      Counter,
        frEndptRxPkts           Counter,
        frEndptRxPktsDscds      Counter,

        frEndptTxBytes          Counter,
        frEndptTxBytesDscds     Counter,
        frEndptTxFrms           Counter,
        frEndptTxFrmsDscds      Counter,
        frEndptTxPkts           Counter,
        frEndptTxFrmsFecns      Counter,
        frEndptTxFrmsBecns      Counter,

        frEndptSecInServices    Counter,
        frEndptCongestMins      Counter,

        frEndptRxFrmsDes        Counter,
        frEndptRxBytesDes       Counter,
        frEndptTxFrmsDes        Counter,
        frEndptRxFrmsDeDscds    Counter,

        frEndptRxFrmsCirs       Counter,
        frEndptRxBytesCirs      Counter,
        frEndptTxFrmsCirs       Counter,
        frEndptTxBytesCirs      Counter,

        frEndptUnknProtIngDscds Counter,
        frEndptUnknProtEgrDscds Counter
    }

frEndptRxBytes  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of frame
                 bytes received from the local frame relay port."
        ::= { frEndptStatEntry 1  }

frEndptRxBytesDscds  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of frame
                 bytes received from the local frame relay port but 
                 discarded before being transmitted onto the Muxbus, due 
                 to the age of the frame in the IPX system or lack of 
                 buffer space."
        ::= { frEndptStatEntry 2  }

frEndptRxFrms  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of frames
                 received from the local frame relay port."
        ::= { frEndptStatEntry 3  }

frEndptRxFrmsDscds  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of frames
                 received from the local frame relay port but 
                 discarded before being transmitted onto the Muxbus, due 
                 to the age of the frame in the IPX system or lack of 
                 buffer space "
        ::= { frEndptStatEntry 4  }

frEndptRxPkts  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of packets
                 received from the Muxbus by the local port card."
        ::= { frEndptStatEntry 5  }

frEndptRxPktsDscds  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of packets
                 received from the Muxbus by the local port card but
                 discarded before being transmitted."
        ::= { frEndptStatEntry 6  }

frEndptTxBytes  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of frame
                 bytes received from the Muxbus and transmitted out the 
                 frame relay port."
        ::= { frEndptStatEntry 7  }

frEndptTxBytesDscds  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of frame
                 bytes received from the Muxbus but discarded 
                 before being transmitted out the frame relay port, due
                 to the age of the frame in the IPX system, CRC error,
                 or lack of buffer space."
        ::= { frEndptStatEntry 8  }

frEndptTxFrms  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of frames
                 transmitted out the frame relay port."
        ::= { frEndptStatEntry 9  }

frEndptTxFrmsDscds  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of frames,
                 which are discarded by the local frame relay card before 
                 being transmitted out the local port, due to the age of
                 the frame in the IPX system, a CRC error, or lack of
                 buffer space."
        ::= { frEndptStatEntry 10  }

frEndptTxPkts  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of packets
                 tranmitted to the Muxbus by the local port card."
        ::= { frEndptStatEntry 11  }

frEndptTxFrmsFecns  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of frames
                 transmitted out the local frame relay port with FECN
                 bit set."
        ::= { frEndptStatEntry 12  }

frEndptTxFrmsBecns  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of frames
                 transmitted out the local frame relay port with BECN
                 bit set."
        ::= { frEndptStatEntry 13  }

frEndptSecInServices OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of seconds in
                 which a connection is in service. A connection is 
                 considered to be in service if its end point is not in 
                 alarm, the cards required to support the connection 
                 are present and the connection is routed."
        ::= { frEndptStatEntry 14  }

frEndptCongestMins  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, number of minutes in which
                 50% or more frames are tagged FECN by the FRP."
        ::= { frEndptStatEntry 15  }

frEndptRxFrmsDes  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of frames
                 received from the local frame relay port with their
                 DE bit set. DE bits are only counted by model D frame 
                 relay firmware or later."
        ::= { frEndptStatEntry 16  }

frEndptRxBytesDes  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of frames
                 received from the local frame relay port with their
                 DE bit set. DE bits are only counted by model D frame 
                 relay firmware or later."
        ::= { frEndptStatEntry 17  }

frEndptTxFrmsDes  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of frames
                 transmitted out the local frame relay port with their
                 DE bit set. DE bits are only counted by model D frame 
                 relay firmware or later."
        ::= { frEndptStatEntry 18  }

frEndptRxFrmsDeDscds  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Statistic, the number of frame
                 received from the local frame relay port with their DE
                 bit set, which are discarded before being transmitted onto
                 the Muxbus. DE bits are only counted by model D frame
                 relay firmware or later."
        ::= { frEndptStatEntry 19  }

frEndptRxFrmsCirs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Rx frames from port in excess of CIR."
        ::= { frEndptStatEntry 20  }

frEndptRxBytesCirs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Rx bytes from port in excess of CIR."
        ::= { frEndptStatEntry 21  }

frEndptTxFrmsCirs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Tx frames from port in excess of CIR."
        ::= { frEndptStatEntry 22  }

frEndptTxBytesCirs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay Endpoint Tx bytes from port in excess of CIR."
        ::= { frEndptStatEntry 23  }

frEndptUnknProtIngDscds  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay SIW Endpoint statistic. Frames with unknown
                 protocol field discarded at the Ingress. This statistics is 
                 applicable to SIW translation connection."
        ::= { frEndptStatEntry 24  }

frEndptUnknProtEgrDscds  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Frame Relay SIW Endpoint statistic. Frames with unknown
                 protocol field discarded at the Egress. This statistics is 
                 applicable to SIW translation connection."
        ::= { frEndptStatEntry 25  }

-- This table describes frame relay bandwith classes available on 
-- the node. In order to avoid specifying all the bandwidth parameters
-- while creating a frame relay connection user can specify a
-- frame relay bandwidth class by its number (available as index into
-- this table). 
--
frBwClassTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF FrBwClassEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The Frame Relay Bandwidth Class table."
    --DEFAULT   test-function   test_frbwclasstable
    --DEFAULT   next-function   next_frbwclasstable
    --DEFAULT   get-function    get_frbwclasstable_%t
    --DEFAULT   view-mask       IPX_VIEW 
        ::= { switchConnection 7  }
 
frBwClassEntry OBJECT-TYPE
    SYNTAX      FrBwClassEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the Frame Relay Bandwidth Class table."
    INDEX   { frBwClassIndex }
        ::= { frBwClassTable 1  }
 
FrBwClassEntry ::=
    SEQUENCE {
        frBwClassIndex          INTEGER,

        frBwClassMIR            INTEGER,
        frBwClassCIR            INTEGER,
        frBwClassVcQSize        INTEGER,
        frBwClassBc             INTEGER,
        frBwClassPIR            INTEGER,
        frBwClassBe             INTEGER,
        frBwClassCMAX           INTEGER,
        frBwClassEcnQSize       INTEGER,
        frBwClassQIR            INTEGER,
        frBwClassPercUtil       INTEGER,

        frBwClassOeMIR            INTEGER,
        frBwClassOeCIR            INTEGER,
        frBwClassOeVcQSize        INTEGER,
        frBwClassOeBc             INTEGER,
        frBwClassOePIR            INTEGER,
        frBwClassOeBe             INTEGER,
        frBwClassOeCMAX           INTEGER,
        frBwClassOeEcnQSize       INTEGER,
        frBwClassOeQIR            INTEGER,
        frBwClassOePercUtil       INTEGER,

        frBwClassEnableFST      INTEGER,
        frBwClassDescription    DisplayString
    }

frBwClassIndex OBJECT-TYPE
    SYNTAX      INTEGER (1..10)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Index into FrBwClassTable. This index identifies the
                 frame relay bandwidth class."
        ::= { frBwClassEntry 1  }

frBwClassMIR OBJECT-TYPE
    SYNTAX      INTEGER (2400..16384000)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The minimum transmit bandwidth (MIR) parameter
                 (in 100s of bits per second) for this  end-point."
        ::= { frBwClassEntry 2  }

frBwClassCIR OBJECT-TYPE
    SYNTAX      INTEGER (2400..16384000)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the committed
                 information rate (CIR) parameter (in 100s of bits
                 per second) for this  end-point."
        ::= { frBwClassEntry 3  }
 
frBwClassVcQSize OBJECT-TYPE
    SYNTAX      INTEGER (1..65535)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is the maximum queue depth
                 (in bytes) for this  end-point."
        ::= { frBwClassEntry 4  }

frBwClassBc OBJECT-TYPE
    SYNTAX      INTEGER (1..65535)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the committed
                 burst size (Bc) parameter (in bytes) for
                 this  end-point."
        ::= { frBwClassEntry 5  }

frBwClassPIR OBJECT-TYPE
    SYNTAX      INTEGER (2400..16384000)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The peak transmit bandwidth (PIR) parameter
                 (in 100s of bits per second) for this  end-point."
        ::= { frBwClassEntry 6  }
 
frBwClassBe OBJECT-TYPE
    SYNTAX      INTEGER (0..65535)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the excess
                 burst size (Be) parameter (in bytes) for
                 this  end-point."
        ::= { frBwClassEntry 7  }

frBwClassCMAX OBJECT-TYPE
    SYNTAX      INTEGER (1..255)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The maximum credits that can be accrued for this
                 end-point."
        ::= { frBwClassEntry 8  }

frBwClassEcnQSize OBJECT-TYPE
    SYNTAX      INTEGER (0..65535)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The threshold setting used by the explicit congestion
                 notification feature for this  end-point's
                 transmit queue. This value is specified in bytes."
        ::= { frBwClassEntry 9  }

frBwClassQIR OBJECT-TYPE
    SYNTAX      INTEGER (2400..16384000)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The transmit quiescent information rate (QIR) parameter
                 (in 100s of bits per second) for this  end-point.
                 This value can range between the MIR and PIR values
                 and must be between 2400 and 16384000.  This parameter
                 has meaning only if the frEndptEnableFST parameter
                 is set to true."
        ::= { frBwClassEntry 10  }

frBwClassPercUtil OBJECT-TYPE
    SYNTAX      INTEGER (0..100)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the channel
                 percentage utilization setting for this  end-point.
                 This is the expected long-term utilization of the
                 channel by this  end-point."
        ::= { frBwClassEntry 11  }

frBwClassOeMIR OBJECT-TYPE
    SYNTAX      INTEGER (2400..16384000)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The minimum receive bandwidth (MIR) parameter
                 (in 100s of bits per second) for the other end-point."
        ::= { frBwClassEntry 12  }

frBwClassOeCIR OBJECT-TYPE
    SYNTAX      INTEGER (2400..16384000)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the committed
                 information rate (CIR) parameter (in 100s of bits
                 per second) for the other end-point."
        ::= { frBwClassEntry 13  }
 
frBwClassOeVcQSize OBJECT-TYPE
    SYNTAX      INTEGER (1..3072000)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is the maximum queue depth
                 (in bytes) for this  end-point."
        ::= { frBwClassEntry 14  }

frBwClassOeBc OBJECT-TYPE
    SYNTAX      INTEGER (0..65535)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the committed
                 burst size (Bc) parameter (in bytes) for
                 the end-point."
        ::= { frBwClassEntry 15  }

frBwClassOePIR OBJECT-TYPE
    SYNTAX      INTEGER (2400..16384000)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The peak receive bandwidth (PIR) parameter
                 (in 100s of bits per second) for the other end-point."
        ::= { frBwClassEntry 16  }
 
frBwClassOeBe OBJECT-TYPE
    SYNTAX      INTEGER (0..65535)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the excess
                 burst size (Be) parameter (in bytes) for
                 the other end-point."
        ::= { frBwClassEntry 17  }

frBwClassOeCMAX OBJECT-TYPE
    SYNTAX      INTEGER (1..57600)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The maximum credits that can be accrued for the other 
                 end-point."
        ::= { frBwClassEntry 18  }

frBwClassOeEcnQSize OBJECT-TYPE
    SYNTAX      INTEGER (0..65535)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The threshold setting used by the explicit congestion
                 notification feature for the other end-point's
                 receive queue. This value is specified in bytes."
        ::= { frBwClassEntry 19  }

frBwClassOeQIR OBJECT-TYPE
    SYNTAX      INTEGER (2400..16384000)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The receive quiescent information rate (QIR) parameter
                 (in 100s of bits per second) for the other end-point."
        ::= { frBwClassEntry 20  }

frBwClassOePercUtil OBJECT-TYPE
    SYNTAX      INTEGER (0..100)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the channel
                 percentage utilization setting for the other end-point."
        ::= { frBwClassEntry 21  }

frBwClassEnableFST OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
                }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object determines whether or not the
                 ForeSight option is being used for this .  If set
                 to false, then ForeSight is not used, and if true then
                 ForeSight will be used."
        ::= { frBwClassEntry 22  }

frBwClassDescription OBJECT-TYPE
    SYNTAX      DisplayString (SIZE (0..24))
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This MIB object contains a textual description of this
                 frame relay bandwidth class."
        ::= { frBwClassEntry 23  }

--
-- This is the table describing an ATM connection end-point.
-- Each connection (virtual circuit or ) end-point describes the
-- particular characteristics of the end-point.  Such information
-- as local and remote end-point description, class of service, input
-- and output bandwidth parameters, and special options are maintained 
-- in the end-point table.  
-- 
--
-- Mappings between objects and standard ATM BW parameters and object
-- applicability for connection types:
-- ========================================================================
--  Objects & Oe        UBR   CBR   VBR   ATFR  ABR.nV ABR.V  ABRFST  ATFST
-- ========================================================================
-- atmEndptPCR          PCR   PCR   PCR   PCR   PCR    PCR    PCR     PCR
-- atmEndptSCR                      SCR   SCR          SCR    SCR     SCR
-- atmEndptMCR                                  MCR    MCR    MCR     MCR
-- atmEndptPercUtil     %Utl  %Utl  %Utl  %Utl  %Utl   %Utl   %Utl    %Utl
-- atmEndptPolicing            PLC  PLC   PLC   4      PLC    PLC     PLC
-- atmEndptVcQSize                        VC_Q         VC_Q   VC_Q    VC_Q
-- atmEndptQIR                                         ICR    ICR     ICR
-- atmEndptEfciQSize                      EFCI         EFCI   EFCI    EFCI
-- atmEndptCBS                      MBS   MBS          MBS    MBS     MBS
-- atmEndptIBS                            IBS                         IBS
-- atmEndptCCDV         CDVT  CDVT  CDVT  CDVT  CDVT   CDVT   CDVT    CDVT
-- atmEndptHiCLP                                       CLPHi  CLPHi   CLPHi
-- atmEndptLoCLP                                       CLPLo  CLPLo   CLPLo
-- atmEndptCLPTagging   CLP_S
-- atmEndptRateUpICA                                   RIF    RIF     RIF
-- atmEndptRateDnICA                                   RDF    RDF     RDF
-- atmEndptToQIR                                       ADTF   ADTF    ADTF
-- atmEndptMinAdjustICA                                TRM    TRM     TRM
-- atmEndptBCM                                  No     FCES   FCES    FECS
-- atmEndptFGCRA        AAL5        AAL5  Yes   AAL5   AAL5   AAL5    Yes
--                      FBTC        FBTC        FBTC   FBTC   FBTC    
-- atmEndptNRM                                         NRM           
-- atmEndptFRTT                                        FRTT          
-- atmEndptTBE                                         TBE           
-- atmEndptVSVD                                 No     Both    (Yes)   (Yes)
-- 
-- Note:
-- ABR.nV = ABR with both ForeSight and VSVD disabled 
--          (ATM Forum Standard ABR)
-- ABR.V  = ABR with ForeSight disabled and VSVD enabled 
--          (ATM Forum Standard ABR)
-- ABRFST = ABR with ForeSight enabled (StrataCom Proprietary ABR)
-- CLP_S  = CLP Setting
-- PCR_P  = PCR Policing
-- SCR_P  = SCR Policing
-- FCES   = Flow Control External Segment
-- AAL5 FBTC = AAL5 Frame Based Traffic Control
-- Yes    = Has to be set to enable(1) for this connection type.
-- No     = Has to be set to disable(2) for this connection type.
-- Both   = Can be set to either enable(1) or disable(2)
-- (Yes)  = Always enabled and cannot be set.
-- (No)   = Always disabled and cannot be set.
--
atmEndptTable OBJECT-TYPE 
    SYNTAX      SEQUENCE OF AtmEndptEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The ATM End-Point table.  This table
                 is used to model a PVC end-point.  This table
                 contains the traffic parameters for ATM end-point."
    --DEFAULT   test-function   test_atmendpttable
    --DEFAULT   next-function   next_atmendpttable
    --DEFAULT   get-function    get_atmendpttable_%t
    --DEFAULT   view-mask       BPX_VIEW | IGX_VIEW
        ::= { switchConnection 8  }

atmEndptEntry OBJECT-TYPE
    SYNTAX      AtmEndptEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the ATM End-point table."
    INDEX   { atmEndptIndex }
        ::= { atmEndptTable 1  }

AtmEndptEntry ::=
    SEQUENCE {
        atmEndptIndex             INTEGER,    
        atmEndptDesc              DisplayString,

        atmOtherEndptIndex        INTEGER,    
        atmOtherEndptDesc         DisplayString,

        atmEndptAdminStatus       INTEGER,
        atmEndptOperStatus        INTEGER,

        atmNoRouteFoundFailure    INTEGER,
        atmBumpFailure            INTEGER,    
        atmEndPointFailure        INTEGER,
        atmTestFailure            INTEGER,

        atmConnPtr                OBJECT IDENTIFIER,
        atmNextPtr                OBJECT IDENTIFIER,
        atmNextOnPortPtr          OBJECT IDENTIFIER,

        atmEndptConnDesc          DisplayString,    
        atmEndptTrkAvoidType      INTEGER,    
        atmEndptTrkAvoidZCS       INTEGER,    

        atmEndptSubType           INTEGER,    
        atmEndptBWClass           INTEGER,    

        atmEndptMIR               INTEGER,
        atmEndptCIR               INTEGER,
        atmEndptVcQSize           INTEGER,
        atmEndptPIR               INTEGER,
        atmEndptEfciQSize         INTEGER,
        atmEndptQIR               INTEGER,
        atmEndptPercUtil          INTEGER,
        atmEndptCBS               INTEGER,
        atmEndptIBS               INTEGER,
        atmEndptMFS               INTEGER,
        atmEndptCCDV              INTEGER,
        atmEndptHiCLP             INTEGER,
        atmEndptLoCLP             INTEGER,

        atmEndptOeMIR             INTEGER,
        atmEndptOeCIR             INTEGER,
        atmEndptOeVcQSize         INTEGER,
        atmEndptOePIR             INTEGER,
        atmEndptOeEfciQSize       INTEGER,
        atmEndptOeQIR             INTEGER,
        atmEndptOePercUtil        INTEGER,
        atmEndptOeCBS             INTEGER,
        atmEndptOeIBS             INTEGER,
        atmEndptOeMFS             INTEGER,
        atmEndptOeCCDV            INTEGER,
        atmEndptOeHiCLP           INTEGER,
        atmEndptOeLoCLP           INTEGER,

        atmEndptCLPTagging        INTEGER,
        atmEndptUPC               INTEGER,
        atmEndptEnableFST         INTEGER,
        atmEndptRateUpICA         INTEGER,
        atmEndptRateDnICA         INTEGER,
        atmEndptFastDnICA         INTEGER,
        atmEndptToQIR             INTEGER,
        atmEndptMinAdjustICA      INTEGER,

        atmEndptGroupFlag         INTEGER,
        atmEndptOamStatus         INTEGER,
        atmEndptBCM               INTEGER,
        atmEndptFGCRA             INTEGER,
 
        atmEndptLocLpbkState      INTEGER,
        atmEndptLpbkStatus        INTEGER,
        atmEndptTestType          INTEGER,
        atmEndptRtdTestDelay      INTEGER,
        atmEndptOeBCM             INTEGER,
        atmEndptOeFGCRA           INTEGER,
        atmEndptGroupDesc         DisplayString,
        atmEndptLocRmtLpbkState   INTEGER,

        atmEndptScrPlc            INTEGER,
        atmEndptOeScrPlc          INTEGER,
        atmEndptPCR0              INTEGER,
        atmEndptOePCR0            INTEGER,
        atmEndptCDVT0             INTEGER,
        atmEndptOeCDVT0           INTEGER,
        atmEndptNRM               INTEGER,
        atmEndptFRTT              INTEGER,
        atmEndptTBE               INTEGER,
        atmEndptVSVD              INTEGER,
        atmEndptPolicing          INTEGER,
        
        atmEndptPCR               INTEGER,
        atmEndptOePCR             INTEGER,
        atmEndptSCR               INTEGER,
        atmEndptOeSCR             INTEGER,
        atmEndptMCR               INTEGER,
        atmEndptOeMCR             INTEGER,
        atmEndptCellRouting       INTEGER        
    }

atmEndptIndex OBJECT-TYPE
    SYNTAX      INTEGER (0..9999)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Index into table for this  end-point. Although
                 only 5000  endpoints may exist on a node, 10000
                 possible index values exist to support DAX (intra-node)
                 connections."
        ::= { atmEndptEntry 1  }

atmEndptDesc OBJECT-TYPE
    SYNTAX      DisplayString
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "String describing this  end-point.  Contains
                 information about the domain, nodename, slot, port,
                 vpi, and vci for the end-point.  For example,
                 D1.Node1.12.1.100.200, is a valid description.  Domain
                 and nodename need not be given but slot, port,
                 VPI and VCI values must exist; 12.1.100.200 is valid.
                 A virtual path connection endpoint of the form
                 12.1.100.* is also valid. A virtual path tunneling dax
                 connection, with one end point as VP and other as VC
                 of the form 12.1.100.* Node1.12.2.100.200, is a valid
                 description. For a basis port the last
                 4 bits of the VPI must be between 3 and 14."
        ::= { atmEndptEntry 2  }

atmOtherEndptIndex OBJECT-TYPE
    SYNTAX      INTEGER (0..9999)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Index into remote node's atmEndptTable for this 
                 end-point.  For DAX (intra-node) connections, this index is 
                 associated with the local node and will be in the
                 range of 5000 to 9999."
        ::= { atmEndptEntry 3  }

atmOtherEndptDesc OBJECT-TYPE
    SYNTAX      DisplayString
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "String describing the remote PVC end-point.  Contains
                 information about the domain, nodename, slot, port,
                 vpi, and vci for the end-point.  For example,
                 D2.Node2.10.1.100.200, is a valid description. Nodename,
                 slot, port, VPI and VCI values must exist. A virtual
                 path connection endpoint of the form D2.Node2.10.1.100.*
                 is also valid. A virtual path tunneling dax connection,
                 with one end point as VC and other as VP of the form
                 12.1.100.100 Node1.12.2.100.*, is a valid description.
                 For a basis port the last 4 bits of the
                 VPI must be between 3 and 14."
        ::= { atmEndptEntry 4  }

atmEndptAdminStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                create(1),
                delete(2),
                modify(3),
                test(4),
                writeOnly(5)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "User requested state for end-point table row.  A user can
                 create this VC or delete this VC by setting this object
                 appropriately.  If the end-point is to be
                 modified, set this object identifier to be modify."
        ::= { atmEndptEntry 5  }

atmEndptOperStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                ok(1),
                okPendingDown(2),
                down(3),
                failed(4),
                inTest(5),
                okPendingRoute(6),
                okPendingDelete(7),
                looped(8),
                unknown(9)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Actual state of the end-point.  If the state is failed,
                 then look to the objects atmNoRouteFoundFailure,
                 atmBumpFailure, atmEndPointFailure, and atmTestFailure
                 to determine reason for failure."
        ::= { atmEndptEntry 6  }

atmNoRouteFoundFailure OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "End-point is failed is because no route to the
                 remote end-point could be found."
        ::= { atmEndptEntry 7  }

atmBumpFailure OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "End-point is failed because of insufficient bandwidth
                 to route to the remote end-point.  This may have also
                 been caused because a higher priority connection took
                 this end-point's bandwidth.  A higher priority connection
                 is one with the lowest class of service (COS)."
        ::= { atmEndptEntry 8  }

atmEndPointFailure OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "End-point is failed because of a remote end-point failure.
                 The remote end-point is on a node that resides in another
                 domain making the connection an inter-domain connection."
        ::= { atmEndptEntry 9  }

atmTestFailure OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "End-point is failed because of the failure of a
                 connection test if true(2)."
        ::= { atmEndptEntry 10  }

atmConnPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Pointer to general connection information.  Using this
                 pointer the user can obtain connection status, and
                 routing information. Specifically, this is an object
                 identifier specifying the first column of the appropriate
                 row in the connTable."
        ::= { atmEndptEntry 11  }

atmNextPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      deprecated
    DESCRIPTION "Pointer to next end-point information.  This allows
                 logical sets of end-points to be linked up.  For example,
                 the end-points associated with a bundle or group.
                 Specifically, this is an object identifier specifying the
                 first column of the appropriate row in the atmEndptTable."
        ::= { atmEndptEntry 12  }

atmNextOnPortPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Pointer to next end-point information for the port 
                 associated with this end-point.  For example, using 
                 this pointer all atm end-points on a given 
                 slot.port can be determined.  Specifically, this is
                 an object identifier specifying the first column of the
                 appropriate row in the atmEndptTable."
        ::= { atmEndptEntry 13  }

atmEndptConnDesc OBJECT-TYPE
    SYNTAX      DisplayString (SIZE (0..20))
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "A string that has been defined for the connection to
                 give a more descriptive name.  Connections can be given
                 clear text names in order to make them more human readable.
                 This object has been changed to not-accessible because
                 it is no longer supported as of release 8.4."
        ::= { atmEndptEntry 14  }

atmEndptTrkAvoidType OBJECT-TYPE
    SYNTAX      INTEGER {
                none(1),
                satellite(2),
                terrestrial(3)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "User selectable types of trunks to avoid for the
                 transfer of ATM data.  Current choices are to avoid
                 satellite links, terrestrial links, or to not avoid
                 any specific type of link. This object is optional
                 during the creation of an endpoint."
        ::= { atmEndptEntry 15  }

atmEndptTrkAvoidZCS OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Flag to force the connection to avoid trunks with zero
                 code suppression (ZCS). This object is optional during
                 the creation of an endpoint."
        ::= { atmEndptEntry 16  }

atmEndptSubType OBJECT-TYPE
    SYNTAX      INTEGER {
                atf(1),
                vbr(2),
                cbr(3),
                unknown(4),
                abrstd(5),
                atfst(6),
                atft(7),
                atftfst(8),
                atfx(9),
                atfxfst(10),
                ubr(11),
                abrfst(12),
                rtvbr(13)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "ATM endpoint subtype object.
                atf   - Interworking conn (without Foresight)
                vbr   - Variable Bit Rate Conn (No ForeSight)
                cbr   - Constant Bit Rate Conn (No ForeSight)
                abrstd- Standard Available Bit Rate Conn
                abrfst- Available Bit Rate Conn with ForeSight      
                ubr   -   Unspecified Bit Rate Conn (No ForeSight).
                        UBR.1 = ubr + atmEndptCLPTagging(disable)
                        UBR.2 = ubr + atmEndptCLPTagging(enable) 
                atft  - Service Interworking Conn Transparent Mode(No ForeSight)
                atftfst - Service Interworking Conn Transparent Mode 
                          (with ForeSight) 
                atfx  - Service Interworking Conn Translation Mode(No ForeSight) 
                atfxfst - Service Interworking Conn Translation Mode 
                          (with ForeSight).
                rtvbr - Real Time Variable Bit Rate Conn (No ForeSight)" 
        ::= { atmEndptEntry 17  }

atmEndptBWClass OBJECT-TYPE
    SYNTAX      INTEGER (1..10)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "User selectable connection class which defines the
                 operating parameters for the connection.  Any or
                 all of these parameters can be overridden by
                 specifying the bandwidth parameters directly. This
                 object is required during the creation of an
                 endpoint."
        ::= { atmEndptEntry 18  }
 
atmEndptMIR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmEndptEntry 19 }

atmEndptCIR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmEndptEntry 20 }

atmEndptVcQSize OBJECT-TYPE
    SYNTAX      INTEGER (1..64000)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Maximum VC queue depth.
                 . Units: cells
                 . Applicable connection types: 
                   standard ABR, ABR FST, ATFR, and ATFST.
                 . Default: 16000
                 . Range:
                     UXM/BXM:       0..61000
                     ASI/BNI T3/E3: 1..64000
                     ATFR:          1..1366
                 . Dependency: VSVD = enable(1)
                " 
        ::= { atmEndptEntry 21 }

atmEndptPIR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmEndptEntry 22 }

atmEndptEfciQSize OBJECT-TYPE
    SYNTAX      INTEGER (1..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The threshold setting used by the explicit congestion
                 notification feature for this end-point's
                 transmit queue.                  
                 . Units: percentage
                 . Applicable connection types: 
                   standard ABR, ABR FST, ATFR, ATFST
                 . Default:
                     CBR/VBR:  35%
                     ABR/UBR:  20%
                 "
        ::= { atmEndptEntry 23 }

atmEndptQIR OBJECT-TYPE
    SYNTAX      INTEGER (50..1412832)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The transmit quiescent information rate (QIR) parameter.
                 Also known as Initial Cell Rate (ICR), the rate at which
                 a source should send initially and after an idle period.
                 . Units: cells per second
                 . Applicable connection types: 
                   standard ABR, ABR FST, ATFST
                 . Range: MCR-PCR
                 . Default: 50 or MCR
                 . Dependency: ICR >= MCR, VSVD = enable(1)
                " 
        ::= { atmEndptEntry 24 }

atmEndptPercUtil OBJECT-TYPE
    SYNTAX      INTEGER (0..127)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Channel Percentage of Bandwidth Utilization.
                 Bandwidth allocation based on %Util depends on the
                 connection types.
                 . Units: %, percentage.
                 . Valid range:
                   BXM/UXM:  0-127 (may be over 100 if CAC enabled)
                   Others:   0-100
                 . Applicable connection types:
                   UBR: default = 1%
                   CBR: default = 100% 
                        bandwidth allocation = PCR(0+1) * %Util
                   VBR, ATFR:
                        default = 100%
                        bandwidth allocation = PCR(0+1) * %Util
                   ABR, ABRFST, ATFST:
                        default = 100%
                        bandwidth allocation = MCR * %Util
                "
        ::= { atmEndptEntry 25  }

atmEndptCBS OBJECT-TYPE
    SYNTAX      INTEGER (1..5000000) 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Compliant Burst Size (CBS). Also known as Maximum Burst 
                 Size (MBS). Maximum number of cells which may burst at
                 PCR but still be compliant.
                 . Units: cells
                 . Applicable connection types: 
                   . VBR, ATFR, ABRSTD (VSVD=enable), ABRFST, ATFST
                 . Default: 1000
                 . Range:
                     BXM/BME/UXM   :  1-5000000
                     ASI/BNI T3/E3 : 10-24000
                     ASI/BNI OC3   : 10-1000
                "
        ::= { atmEndptEntry 26 }

atmEndptIBS OBJECT-TYPE
    SYNTAX      INTEGER (0..24000) 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Initial Burst Size (IBS). 
                 . Units: cells
                 . Applicable connection types: ATFR, ATFST
                 . Default: 0 
                "
        ::= { atmEndptEntry 27 }

atmEndptMFS OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmEndptEntry 28 }

atmEndptCCDV OBJECT-TYPE
    SYNTAX      INTEGER (0..5000000) 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Compliant Cell Delay Variation. Also known as
                 CDVT(0+1), Cell Delay Variation Tolerance, which
                 specifies the maximum time period for accumulated
                 violations of cell-arrival time parameters. This object
                 applies to the First Leaky bucket for cells with Cell
                 Loss Priority of 0 or 1.
                 . Units: microseconds.
                 . Applicable connection types:
                   UBR, CBR, VBR, ATFR, standard ABR, ABR FST, ATFST
                 . Defaults: 
                   CBR:    10000
                   Others: 250000
                 . Dependency: This object is not allowed for 
                   BPX->IPX atf/atfst connections.
                "
        ::= { atmEndptEntry 29 }

atmEndptHiCLP OBJECT-TYPE
    SYNTAX      INTEGER (1..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "CLP (Cell Loss Priority) tagging activation threshold.
                 . Units: % of VCQ Size
                 . Applicable connections:
                   standard ABR, ABR FST, ATFST
                 . Default: 80%
                 . Dependency: VSVD = enable(1)
                 "
        ::= { atmEndptEntry 30 }

atmEndptLoCLP OBJECT-TYPE
    SYNTAX      INTEGER (1..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "CLP (Cell Loss Priority) tagging deactivation threshold.
                 . Units: % of VCQ Size
                 . Applicable connections:
                   standard ABR, ABR FST, ATFST
                 . Default: 60%
                 . Dependency: VSVD = enable(1)
                 "
        ::= { atmEndptEntry 31 }

atmEndptOeMIR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmEndptEntry 32 }

atmEndptOeCIR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmEndptEntry 33 }

atmEndptOeVcQSize OBJECT-TYPE
    SYNTAX      INTEGER (1..64000)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Other end Maximum VC queue depth.
                 . Units: cells
                 . Applicable connection types: 
                   ATFR, standard ABR,  ABR FST, ATFR, ATFST
                 . Default: 16000
                 . Range:
                     UXM/BXM:       0..61000
                     ASI/BNI T3/E3: 1..64000
                     ATFR:          1..1366
                 . Dependency: 
                   . VSVD = enable(1)
                " 
        ::= { atmEndptEntry 34 }

atmEndptOePIR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmEndptEntry 35 }

atmEndptOeEfciQSize OBJECT-TYPE
    SYNTAX      INTEGER (1..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The threshold setting used by the explicit congestion
                 notification feature for the other end-point's
                 transmit queue                 
                 . Units: percentage
                 . Applicable connection types: 
                   standard ABR, ABR FST, ATFR, ATFST
                 . Default: 30%
                     CBR/VBR:  35%
                     ABR/UBR:  20%
                 "
        ::= { atmEndptEntry 36 }

atmEndptOeQIR OBJECT-TYPE
    SYNTAX      INTEGER (50..1412832)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The transmit quiescent information rate (QIR) parameter
                 of the the other end. Also known as Initial Cell Rate 
                 (ICR), the rate at which a source should send initially 
                 and after an idle period.
                 . Units: cells per second
                 . Applicable connection types: 
                   standard ABR, ABR FST, ATFST
                 . Default: 1000
                 . Range:
                   . BXM/UXM:         62 - 8000
                   . ASI/BNI T3/E3: 1000 - 255000
                   . ASI/BNI OC3:   not applicable
                 . Dependency: ICR >= MCR, VSVD = enable(1)
                " 
        ::= { atmEndptEntry 37 }

atmEndptOePercUtil OBJECT-TYPE
    SYNTAX      INTEGER (0..127)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Other end Channel Percentage of bandwidth Utilization.
                 Bandwidth allocation based on %Util depends on the
                 connection types.
                 . Units: %, percentage.
                 . Valid range:
                   BXM/UXM:  0-127 (may be over 100 if CAC enabled)
                   Others:   1-100
                 . Applicable connection types:
                   UBR: default = 1%
                   CBR: default = 100% 
                        bandwidth allocation = PCR(0+1) * %Util
                   VBR, ATFR:
                        default = 100%
                        bandwidth allocation = PCR(0+1) * %Util
                   ABR, ABRFST, ATFST:
                        default = 100%
                        bandwidth allocation = MCR * %Util
                "
        ::= { atmEndptEntry 38 }

atmEndptOeCBS OBJECT-TYPE
    SYNTAX      INTEGER (1..5000000) 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Other end Compliant Burst Size (CBS). Also known as
                 Maximum Burst Size (MBS). Maximum number of cells
                 which may burst at PCR but still be compliant.
                 . Units: cells
                 . Applicable connection types: 
                   . VBR, ATFR, ABRSTD (VSVD=enable), ABRFST, ATFST
                 . Default: 1000
                 . Range:
                   BXM/BME/UXM   :  1-5000000
                   ASI/BNI T3/E3 : 10-24000
                   ASI/BNI OC3   : 10-1000
                "
        ::= { atmEndptEntry 39 }

atmEndptOeIBS OBJECT-TYPE
    SYNTAX      INTEGER (0..24000) 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Other end Initial Burst Size.
                 . Units: cells
                 . Applicable connection types: ATFR, ATFST
                 . Default: 0 
                "
        ::= { atmEndptEntry 40 }

atmEndptOeMFS OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmEndptEntry 41 }

atmEndptOeCCDV OBJECT-TYPE
    SYNTAX      INTEGER (0..5000000) 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Compliant Cell Delay Variation. Also known as
                 CDVT(0+1), Cell Delay Variation Tolerance, which
                 specifies the maximum time period for accumulated
                 violations of cell-arrival time parameters. This object
                 applies to the First Leaky bucket for cells with Cell
                 Loss Priority of 0 or 1.
                 . Units: microseconds.
                 . Applicable connection types:
                   UBR, CBR, VBR, ATFR, standard ABR, ABR FST, ATFST
                 . Default: 
                     CBR:     10000
                     Others: 250000
                 . Range:
                     BXM/UXM:       0..5000000
                     ASI/BNI OC3:   0..10000
                     ASI/BNI T3/E3: 1..250000
                 . Dependency: This object is not allowed for 
                   BPX->IPX atf/atfst connections.
                "
        ::= { atmEndptEntry 42 }

atmEndptOeHiCLP OBJECT-TYPE
    SYNTAX      INTEGER (1..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Other end CLP (Cell Loss Priority) tagging activation 
                 threshold.
                 . Units: % of VCQ Size
                 . Applicable connections:
                   standard ABR, ABR FST, ATFST
                 . Default: 80%
                 . Dependency: VSVD = enable(1)
                 "
        ::= { atmEndptEntry 43 }

atmEndptOeLoCLP OBJECT-TYPE
    SYNTAX      INTEGER (1..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Other end CLP (Cell Loss Priority) tagging deactivation 
                 threshold.
                 . Units: % of VCQ Size
                 . Applicable connections:
                   standard ABR, ABR FST, ATFST
                 . Default: 35%
                 . Dependency: VSVD = enable(1)
                 "
        ::= { atmEndptEntry 44 }

atmEndptCLPTagging OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "CLP (Cell Loss Priority) tagging for handling non-compliant
                 cells. When enabled the CLP bit is set on non-compliant 
                 cells. When disabled non-compliant cells are discarded. 
                 (A.k.a. CLP Setting)
                 . Applicable connection types: UBR
                 . Default: enable(1)
                "
        ::= { atmEndptEntry 45 }

atmEndptUPC OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmEndptEntry 46 }
 
atmEndptEnableFST OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "ForeSight (FST) flow control mechanism."
        ::= { atmEndptEntry 47 }

atmEndptRateUpICA OBJECT-TYPE
    SYNTAX      INTEGER (0..1412832)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "ABR rate adjustment up. Also known as RIF, Rate Increase
                 Factor, which controls the amount by which the cell
                 transmission rate may increase upon receipt of an RM-cell.
                 . Units: 
                   . For standard ABR connections, this object should be
                     in 2^n, where n = 0 - 15. (1, 2, 4, ..., 32768)
                   . For FST connections, this object should
                     be in absolute values of cells per second up to the 
                     PCR.
                   . A new value should always be given for this object
                     when a connection is changed from one type to the 
                     other, since they require different units.
                 . Applicable connection types:
                   standard ABR, ABR FST, ATFST
                 . Dependency: VSVD = enable(1)
                " 
        ::= { atmEndptEntry 48 }

atmEndptRateDnICA OBJECT-TYPE
    SYNTAX      INTEGER (0..32768)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "ABR rate adjustment down. Also known as RDF, Rate Decrease
                 Factor, which controls the amount by which the cell
                 transmission rate may decrease upon receipt of an RM-cell.
                 . Units: 
                   . For standard ABR connections, this object should be
                     in 2^n, where n = 0 - 15. (1, 2, 4, ..., 32768)
                   . For FST connections, this objects should be
                     in percentage (0%-100%). 
                 . Applicable connection types:
                   standard ABR, ABR FST, ATFST
                 . Dependency: VSVD = enable(1)
                " 
        ::= { atmEndptEntry 49 }

atmEndptFastDnICA OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmEndptEntry 50 }

atmEndptToQIR OBJECT-TYPE
    SYNTAX      INTEGER (62..255000) 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "QIR timeout value. Also known as ACR Decrease Time
                 Factor (ADTF), which is the time permitted between
                 sending RM-clls before the rate is decreased to ICR.
                 . Unit: milliseconds.
                 . Applicable connection types:
                   standard ABR, ABR FST, ATFST: VSVD = enable(1)
                 . Default: 1000
                 . Range:
                   . BXM/UXM:         62 - 8000
                   . ASI/BNI T3/E3: 1000 - 255000
                   . ASI/BNI OC3:   not applicable
                 "
        ::= { atmEndptEntry 51 }

atmEndptMinAdjustICA  OBJECT-TYPE
    SYNTAX      INTEGER (1..255) 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "ForeSight minimum adjustment period. Also known as TRM,
                 which provides an upper bound on the time between
                 forward RM-cells for an active source.
                 . Units: milliseconds.
                 . Applicable connection types:
                   ABRSTD, ABRFST, ATFST: VSVD = enable(1)
                 . Default: 100
                 . Range:
                   . ASI/BNI T3/E3:         20-250 msec (ABRFST/ATFST)
                   . BXM/UXM:                3-255 msec (ABRFST/ATFST)
                   . BXM/UXM, ASI/BNI T3/E3: 1-100 msec (ABRSTD)
                 . Applicable cards: BXM, UXM, and ASI/BNI-T3/E3.
                "
        ::= { atmEndptEntry 52 }

atmEndptGroupFlag OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      deprecated
    DESCRIPTION "Specifies whether this is a grouped connection. Note 
                 that MIB object connGroupFlag provides grouping 
                 information about all the connections using that
                 connTable entry whereas this object provides same 
                 information for this end point."
        ::= { atmEndptEntry 53 }

atmEndptOamStatus  OBJECT-TYPE
    SYNTAX      INTEGER {
                unknown(1),
                clear(2),
                aisDetected(3),
                ferfDetected(4)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The end to end OAM state."
        ::= { atmEndptEntry 54 }
 
atmEndptBCM OBJECT-TYPE
    SYNTAX      INTEGER {
                enable (1),
                disable (2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The value of this object enables the generation
                 of RM cells when congestion is detected in this
                 connection. (Flow Control External Segment)
                 . Applicable connection types:
                   standard ABR, ABR FST, ATFST
                 . Default: disable(2)
                "
        ::= { atmEndptEntry 55 }
 
atmEndptFGCRA OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "FGCRA (Frame-based Generic Rate Control Algorithm),
                 applicable with AAL-5 traffic only, so it
                 is also known as AAL5 Frame-based Traffic Control (FBTC).
                 . Applicable connection types:
                   . UBR, VBR, standard ABR, ABRFST, ATFR, ATFST.
                 . Default:
                   . Conn Type      Default     Set permission
                   . ============================================
                   . ABR/ABRFST     enable(1)     Yes
                   . ATFR/ATFST     enable(1)     No
                   . CBR           disable(2)     No
                   . UBR           disable(2)     Yes
                   . VBR           disable(2)     Yes
                   . All VPCs      disable(2)     No
                "
        ::= { atmEndptEntry 56 }
 
atmEndptLocLpbkState OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Specifies the Local Loopback State the user would
                 like to set for the endpoint."
        ::= { atmEndptEntry 57 }
 
atmEndptLpbkStatus OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Specifies the current Loopback State of the endpoint.
                 The value returned from this object is a bitmap
                 of the current loopback states which the endpoint
                 has configured.  There currently are 16 loopback
                 states an endpoint may have configured. The bitmap
                 is defined as follows from LSB to MSB:
                 Remote nodes remote muxbus loopback
                 Remote nodes tstcon loopback
                 Local  nodes remote muxbus loopback
                 Local  nodes tstcon loopback
                 Local  nodes local muxbus loopback
                 Local  nodes port loopback
                 Local  nodes port test loopback
                 Remote nodes local muxbus loopback
                 Remote nodes port loopback
                 Remote nodes port test looback
                 Local  DDS network requested CSU loopback
                 Remote DDS network requested CSU loopback
                 Local  DDS network requested DSU loopback
                 Remote DDS network requested DSU loopback
                 Local  DDS external loopback
                 Remote DDS external loopback
                 "
        ::= { atmEndptEntry 58 }
 
atmEndptTestType OBJECT-TYPE
    SYNTAX      INTEGER {
                testDelay(1),
                writeOnly(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Specifies the type of test the user would like to
                 conduct on this endpoint.  Only testDelay is currently
                 defined. TestDelay calculates the delay incurred on
                 the connection.  The result of the TestDelay may then
                 be accessed through the atmEndptRtdTestDelay object.
                 This is a non-disruptive test."
        ::= { atmEndptEntry 59 }
 
atmEndptRtdTestDelay OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is the calculated round
                 trip delay (measured in milliseconds) for an OAM
                 cell that is sent across the network to the remote
                 node where it is looped back and returned to this
                 node.
                 A delay test is invoked through setting the
                 the atmEndptTestType object to TestDelay."
        ::= { atmEndptEntry 60 }
  
atmEndptOeBCM OBJECT-TYPE
    SYNTAX      INTEGER {
                enable (1),
                disable (2)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equivalent to atmEndptBCM."
        ::= { atmEndptEntry 61 }
 
atmEndptOeFGCRA OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equivalent to atmEndptFGCRA."
        ::= { atmEndptEntry 62 }

atmEndptGroupDesc OBJECT-TYPE
    SYNTAX      DisplayString
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "String describing the group this endpoint is
                 associated with.  The format of the group text
                 description is domain.node.grp_number (Example,
                 D2.node1.1). This object will be blocked as of release 8.4, 
                 since Connection Groups are no longer supported."
        ::= { atmEndptEntry 63 }

atmEndptLocRmtLpbkState OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Specifies the Local-Remote Loopback State the user
                 would like to set for the endpoint."
        ::= { atmEndptEntry 64 }
 
atmEndptScrPlc OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmEndptEntry 65 }
 
atmEndptOeScrPlc OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmEndptEntry 66 }

atmEndptPCR0 OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmEndptEntry 67 }
 
atmEndptOePCR0 OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmEndptEntry 68 }
 
atmEndptCDVT0 OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmEndptEntry 69 }
 
atmEndptOeCDVT0 OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmEndptEntry 70 }
 
atmEndptNRM OBJECT-TYPE
    SYNTAX      INTEGER (2..256)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "NRM is the maximum number of cells a source may send
                 for each forward RM-cell.
                 . Units: cells
                 . Applicable connection types: standard ABR only
                 . Default: 32
                 . Dependency: VSVD = enable(1)
                 "
        ::= { atmEndptEntry 71 }
 
atmEndptFRTT OBJECT-TYPE
    SYNTAX      INTEGER (0..16700)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The Fixed Round-Trip Time (FRTT) is the sum of the fixed
                 and propagation delays from the source to a destination 
                 and back.
                 . Units: milliseconds.
                 . Applicable connection types: standard ABR only
                 . Default: 0
                 . Dependency: VSVD = enable(1)
                 "
        ::= { atmEndptEntry 72 }
 
atmEndptTBE OBJECT-TYPE
    SYNTAX      INTEGER (0..1048320)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Transient Buffer Exposure (TBE) is the negotiated number
                 of cells that the network would like to limit the source 
                 to sending during startup periods, before the first 
                 RM-cell returns.
                 . Units: cells
                 . Applicable connection types: standard ABR only
                 . Default: 1048320
                 . Dependency: VSVD = enable(1)
                 "
        ::= { atmEndptEntry 73 }
        
atmEndptVSVD OBJECT-TYPE
    SYNTAX      INTEGER {
                enable (1),
                disable (2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Virtual Source/Virtual Destination (VS/VD) is used to 
                 divide an ABR connection into two or more separately 
                 controlled ABR segment. This flag indicates whether
                 the ATM end points (both ends) will serve as VS/VD
                 or not.                 
                 . Applicable connection types:
                   . standard ABR
                   . ABRFST: Cannot be set, but always enable(1). 
                   . ATFST  : Cannot be set, but always enable(1).
                 . Dependency:
                   . The object CANNOT be MODIFIED after the first set!
                     All Subsequent sets will be rejected!
                     The object can be set  when only add ABRSTD connection.
                    ============================================
                    ABRSTD VSVD option     ABRSTD  ABRFST  ATFST
                    =============================================
                    available                Both   (Yes)  (Yes)
                    unavalable               No     (Yes)  (Yes)
                    Note:
                     . Yes  = Has to be set to enable(1) 
                       No   = Has to be set to disable(2)
                       Both = can be set to either enable(1) or disable(2)
                      (Yes) = Always enabled and cannot be set.
                      (No)  = Always disabled and cannot be set.
                 . Default: disable(2)
                 "
        ::= { atmEndptEntry 74 }
  
atmEndptPolicing OBJECT-TYPE
    SYNTAX      INTEGER {
                vbr1 (1),
                vbr2 (2),
                vbr3 (3),
                pcrplc(4),
                none  (5)
   }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Specifies the traffic policing for this end point.
                 --------------- ---------- ----------  
                  Policing Type  1st Bucket 2nd Bucket 
                 --------------- ---------- ----------
                   vbr.1          CLP(0+1)   CLP(0+1)            
                   vbr.2          CLP(0+1)   CLP(0)     
                   vbr.3          CLP(0+1)   CLP(0) with CLP Tagging
                   pcrplc         CLP(0+1)   none
                   none           none       none
                   
                 . Applicable connection types:
                   . CBR (only pcrplc(4) or none(5)), VBR, ATFR, 
                   . standard ABR, ABR FST, ATFST: VSVD = enable(1)
                 . Default: vbr3(3)
                 . Dependency: Not allowed for standard ABR without VSVD.
                               In this case, it is set to pcrplc(4).
                 "
        ::= { atmEndptEntry 75 }

atmEndptPCR   OBJECT-TYPE
    SYNTAX      INTEGER (50..1412832)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "PCR(0+1), Peak Cell Rate, specifies an upper bound on
                 rate at which traffic can be submitted on an ATM
                 connection. This object applies to the First Leaky
                 Bucket for leaving cells with Cell Loss Priority of 0 or 1.
                 . Units: cells per second.
                 . Applicable connection types:
                   UBR, CBR, VBR, ATFR, standard ABR, ABR FST, ATFST
                 . Default: 50 or MCR
                 . Ranges:
                   T3  : MCR-96000
                   E3  : MCR-80000
                   OC3 : MCR-353208
                   OC12: MCR-1412832
                   . BXM with HEC line formating
                     T3_HEC: MCR-104268
                "
        ::= { atmEndptEntry 76 }

atmEndptOePCR OBJECT-TYPE
    SYNTAX      INTEGER (50..1412832)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Other end PCR(0+1), Peak Cell Rate, specifies an upper 
                 bound on rate at which traffic can be submitted on an ATM
                 connection. This object applies to the First Leaky
                 Bucket for leaving cells with Cell Loss Priority of 0 or 1.
                 . Units: cells per second.
                 . Applicable connection types:
                   UBR, CBR, VBR, ATFR, standard ABR, ABR FST, ATFST
                 . Default: 50 or OeMCR
                 . Ranges:
                   T3  : MCR-96000
                   E3  : MCR-80000
                   OC3 : MCR-353208
                   OC12: MCR-1412832
                   . BXM with HEC line formating
                     T3_HEC: MCR-104268
                "
        ::= { atmEndptEntry 77 }

atmEndptSCR OBJECT-TYPE
    SYNTAX      INTEGER (7..1412832)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "SCR, Sustainable Cell Rate, is an upper bound on the
                 conforming average rate of an ATM connection, over
                 time scales which are long relative to those for which
                 the PCR is defined. Enforcement of this bound by the UPC
                 could allow the network to allocate sufficient resources,
                 but less than thos based on the PCR, and still ensure
                 that the performance objectives (e.g., Cell Loss Ration)
                 can be achieved.
                 . Units: cell per second.
                 . Applicable connection types:
                   . VBR, ATFR
                   . standard ABR, ABR FST, ATFST: VSVD = enable(1)
                 . Ranges: 
                   . ASI/BNI
                     T3  :  7-96000
                     E3  :  7-80000
                     OC3 :  7-353208
                   . BXM/UXM
                     T3  :  50-96000
                     E3  :  50-80000
                     OC3 :  50-353208
                     OC12:  50-1412832          
                 . Default: 50
                 . For ASI-T3 and E3 interfaces only multiples of 10
                   are used internally. 
                 .For ASI-OC3 interfaces only values in the following 
                   set are used internally:
                      11, 17, 23, 34, 45, 68, 90, 136, 181,
                      271, 362, 543, 723, 1085, 1447, 2170,
                      2894, 4340, 5787, 8681, 11574, 17361,
                      23148, 34722, 46296, 69444, 92593,
                      138889, 185185, 277778.
                   Values between 277778 and 353208 are all valid
                   for ASI-OC3 interfaces.
                   All values in the valid range for a given 
                   interface will be accepted, but they will be
                   internally rounded up to the closest higher
                   value valid for that interface.
                 . For Monarch OC3 and OC12, no rounding will be applied.
                 "
        ::= { atmEndptEntry 78 }

atmEndptOeSCR OBJECT-TYPE
    SYNTAX      INTEGER (7..1412832)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Other end SCR, Sustainable Cell Rate, is an upper bound on
                 the conforming average rate of an ATM connection, over
                 time scales which are long relative to those for which
                 the PCR is defined. Enforcement of this bound by the UPC
                 could allow the network to allocate sufficient resources,
                 but less than thos based on the PCR, and still ensure
                 that the performance objectives (e.g., Cell Loss Ration)
                 can be achieved.
                 . Units: cell per second.
                 . Applicable connection types:
                   . VBR, ATFR
                   . standard ABR, ABR FST, ATFST: VSVD = enable(1)
                 . Ranges: 
                   . ASI/BNI
                     T3  :  7-96000
                     E3  :  7-80000
                     OC3 :  7-353208
                   . BXM/UXM
                     T3  :  50-96000
                     E3  :  50-80000
                     OC3 :  50-353208
                     OC12:  50-1412832                     
                 . Default: 50
                 . For ASI-T3 and E3 interfaces only multiples of 10
                   are used internally. 
                 .For ASI-OC3 interfaces only values in the following 
                   set are used internally:
                      11, 17, 23, 34, 45, 68, 90, 136, 181,
                      271, 362, 543, 723, 1085, 1447, 2170,
                      2894, 4340, 5787, 8681, 11574, 17361,
                      23148, 34722, 46296, 69444, 92593,
                      138889, 185185, 277778.
                   Values between 277778 and 353208 are all valid
                   for ASI-OC3 interfaces.
                   All values in the valid range for a given 
                   interface will be accepted, but they will be
                   internally rounded up to the closest higher
                   value valid for that interface.
                 . For Monarch OC3 and OC12, no rounding will be applied.
                 "
        ::= { atmEndptEntry 79 }

atmEndptMCR OBJECT-TYPE
    SYNTAX      INTEGER (0..1412832)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "MCR, Minimum Cell Rate, specifies the rate at which 
                 the source is always allowed to send. The value of
                 the object must be within the ranges of both
                 connection ends. E.g., the minimum value is 6 if
                 a connection is from an ASI port to a BXM port.
                 . Units: cells per second.
                 . Applicable connection types:
                   standard ABR, ABR FST, ATFST
                 . Range:
                   . ASI/BNI
                     T3  :  0-96000
                     E3  :  0-80000
                     OC3 :  0-353208
                   . BXM/UXM
                     T3  :  6-96000
                     E3  :  6-80000
                     OC3 :  6-353208
                     OC12:  6-1412832
                   . ALM-B(BTM)
                     T3/E3 : 10-24000
                 . Default: 50 or SCR
                 "
        ::= { atmEndptEntry 80 }
        

atmEndptOeMCR OBJECT-TYPE
    SYNTAX      INTEGER (0..1412832)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Other end MCR, Minimum Cell Rate, specifies the rate 
                 at which the source is always allowed to send.
                 For details see atmEndptMCR.
                 "
        ::= { atmEndptEntry 81 }

atmEndptCellRouting OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This Object specifies whether a Cell routing trunk will be
                 used for this connection or not. If it is enabled(1) then
                 this connection is routed only on the cell routing trunks.If
                 disabled(2), then this connection can be routed on any
                 available trunk. SNMP agent blocks setting of cell routing
                 flag for any local connection. Possible settings are listed
                 below  for non-local connections:

                           CELL ROUTING       CELL ROUTING
                              ENABLE             DISABLE

                     ATM CON   A                   A
                 NON-ATM CON   B                   A

                 A - Accecpts the object
                 B - Blocks the PDU 
                 ATM connections are of types VBR, CBR, ABR, or UBR.
 
                 The following setting cannot be changed:
                   1. Path con             enable(1)
                   2. ALM-A ATM con        disabled(1)
                   3. All non ATM con      disable(2)
                "
        ::= { atmEndptEntry 82 }



-- This table describes ATM bandwith classes available on 
-- the switch. In order to avoid specifying all the bandwidth parameters
-- while creating an ATM connection, the user can specify an
-- ATM bandwidth class by number (available as index into
-- this table). 
--
atmBwClassTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF AtmBwClassEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The ATM Bandwidth Class table."
    --DEFAULT   test-function   test_atmbwclasstable
    --DEFAULT   next-function   next_atmbwclasstable
    --DEFAULT   get-function    get_atmbwclasstable_%t
    --DEFAULT   view-mask       BPX_VIEW | IGX_VIEW
        ::= { switchConnection 9  }
 
atmBwClassEntry OBJECT-TYPE
    SYNTAX      AtmBwClassEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the ATM Bandwidth Class table."
    INDEX   { atmBwClassIndex }
        ::= { atmBwClassTable 1  }
 
AtmBwClassEntry ::=
    SEQUENCE {
        atmBwClassIndex          INTEGER,

        atmBwClassMIR            INTEGER,
        atmBwClassCIR            INTEGER,
        atmBwClassVcQSize        INTEGER,
        atmBwClassPIR            INTEGER,
        atmBwClassEfciQSize      INTEGER,
        atmBwClassQIR            INTEGER,
        atmBwClassPercUtil       INTEGER,
        atmBwClassCBS            INTEGER,
        atmBwClassIBS            INTEGER,
        atmBwClassMFS            INTEGER,
        atmBwClassCCDV           INTEGER,
        atmBwClassHiCLP          INTEGER,
        atmBwClassLoCLP          INTEGER,

        atmBwClassOeMIR          INTEGER,
        atmBwClassOeCIR          INTEGER,
        atmBwClassOeVcQSize      INTEGER,
        atmBwClassOePIR          INTEGER,
        atmBwClassOeEfciQSize    INTEGER,
        atmBwClassOeQIR          INTEGER,
        atmBwClassOePercUtil     INTEGER,
        atmBwClassOeCBS          INTEGER,
        atmBwClassOeIBS          INTEGER,
        atmBwClassOeMFS          INTEGER,
        atmBwClassOeCCDV         INTEGER,
        atmBwClassOeHiCLP        INTEGER,
        atmBwClassOeLoCLP        INTEGER,

        atmBwClassCLPTagging     INTEGER,
        atmBwClassUPC            INTEGER,
        atmBwClassEnableFST      INTEGER,
        atmBwClassRateUpICA      INTEGER,
        atmBwClassRateDnICA      INTEGER,
        atmBwClassFastDnICA      INTEGER,
        atmBwClassToQIR          INTEGER,
        atmBwClassMinAdjustICA   INTEGER,
        atmBwClassDescription    DisplayString,

        atmBwClassBCM            INTEGER,
        atmBwClassOeBCM          INTEGER,
        atmBwClassOeFGCRA        INTEGER,
        atmBwClassFGCRA          INTEGER,
        atmBwClassConType        INTEGER,

        atmBwClassScrPlc         INTEGER,
        atmBwClassOeScrPlc       INTEGER,
        atmBwClassPCR0           INTEGER,
        atmBwClassOePCR0         INTEGER,
        atmBwClassCDVT0          INTEGER,
        atmBwClassOeCDVT0        INTEGER,
        atmBWClassNRM            INTEGER,
        atmBWClassFRTT           INTEGER,
        atmBWClassTBE            INTEGER,
        atmBWClassVSVD           INTEGER,
        atmBWClassPolicing       INTEGER,
        
        atmBWClassPCR            INTEGER,
        atmBWClassOePCR          INTEGER,
        atmBWClassSCR            INTEGER,
        atmBWClassOeSCR          INTEGER,
        atmBWClassMCR            INTEGER,
        atmBWClassOeMCR          INTEGER
    }

atmBwClassIndex OBJECT-TYPE
    SYNTAX      INTEGER (1..10)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Index into atmBwClassTable. This index identifies the
                 ATM bandwidth class."
        ::= { atmBwClassEntry 1  }

atmBwClassMIR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmBwClassEntry 2  }

atmBwClassCIR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmBwClassEntry 3  }

atmBwClassVcQSize OBJECT-TYPE
    SYNTAX      INTEGER (1..64000)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is the maximum queue depth
                 (in cells) for this end-point."
        ::= { atmBwClassEntry 4  }

atmBwClassPIR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmBwClassEntry 5  }

atmBwClassEfciQSize OBJECT-TYPE
    SYNTAX      INTEGER (1..100)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The threshold setting used by the explicit congestion
                 notification feature for this end-point's
                 transmit queue.  This value is a percentage."
        ::= { atmBwClassEntry 6  }

atmBwClassQIR OBJECT-TYPE
    SYNTAX      INTEGER (0..96000)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The transmit quiescent information rate (QIR) parameter
                 (in cells per second) for this end-point.
                 This value can range between the MIR and PIR values
                 and must be between 0 and 96000.  This parameter
                 has meaning only for Foresight connections.
                 This object corresponds to the Initial Cell Rate (ICR)."
        ::= { atmBwClassEntry 7  }

atmBwClassPercUtil OBJECT-TYPE
    SYNTAX      INTEGER (1..100)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the channel
                 percentage utilization setting for this end-point.
                 This is the expected long-term utilization of the
                 channel by this end-point."
        ::= { atmBwClassEntry 8  }

atmBwClassCBS OBJECT-TYPE
    SYNTAX      INTEGER (1..24000) 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the Compliant
                 Burst Size in cells for this end-point.
                 This object corresponds to the Maximum Burst Size
                 (MBS) defined by ATM standard documents."
        ::= { atmBwClassEntry 9  }

atmBwClassIBS OBJECT-TYPE
    SYNTAX      INTEGER (0..24000) 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the Initial 
                 Burst Size in cells for this end-point."
        ::= { atmBwClassEntry 10  }

atmBwClassMFS OBJECT-TYPE
    SYNTAX      INTEGER (1..200) 
    ACCESS      read-only
    STATUS      deprecated
    DESCRIPTION "This object is not used by the new UPC algorithm,
                 and its value is meaningless."
        ::= { atmBwClassEntry 11  }

atmBwClassCCDV OBJECT-TYPE
    SYNTAX      INTEGER (0..250000) 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the Compliant
                 Cell Delay Variation for this end-point.
                 It corresponds to the CDVT(0+1) parameter defined
                 by the ATM standard documents."
        ::= { atmBwClassEntry 12  }

atmBwClassHiCLP OBJECT-TYPE
    SYNTAX      INTEGER (1..100) 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the CLP (Cell
                 Loss Priority) tagging activation threshold for
                 this end-point."
        ::= { atmBwClassEntry 13  }

atmBwClassLoCLP OBJECT-TYPE
    SYNTAX      INTEGER (1..100) 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the CLP (Cell
                 Loss Priority) tagging deactivation threshold for
                 this end-point."
        ::= { atmBwClassEntry 14  }

atmBwClassOeMIR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmBwClassEntry 15  }

atmBwClassOeCIR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmBwClassEntry 16  }

atmBwClassOeVcQSize OBJECT-TYPE
    SYNTAX      INTEGER (1..64000)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is the maximum queue depth
                 (in cells) for the other end-point."
        ::= { atmBwClassEntry 17  }

atmBwClassOePIR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmBwClassEntry 18  }

atmBwClassOeEfciQSize OBJECT-TYPE
    SYNTAX      INTEGER (1..100)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The threshold setting used by the explicit congestion
                 notification feature for the other end-point's
                 transmit queue."
        ::= { atmBwClassEntry 19  }

atmBwClassOeQIR OBJECT-TYPE
    SYNTAX      INTEGER (0..96000)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The transmit quiescent information rate (QIR) parameter
                 (in cells bits per second) for the other end-point.
                 This value can range between the MIR and PIR values
                 and must be between 0 and 96000.  This parameter
                 has meaning only for Foresight connections.
                 This object corresponds to the Initial Cell Rate (ICR)."
        ::= { atmBwClassEntry 20  }

atmBwClassOePercUtil OBJECT-TYPE
    SYNTAX      INTEGER (1..100)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the channel
                 percentage utilization setting for the other end-point.
                 This is the expected long-term utilization of the
                 channel by the other end-point."
        ::= { atmBwClassEntry 21  }

atmBwClassOeCBS OBJECT-TYPE
    SYNTAX      INTEGER (1..24000) 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the Compliant
                 Burst Size in cells for the other end-point.
                 This object corresponds to the Maximum Burst Size
                 (MBS) defined by ATM standard documents."
        ::= { atmBwClassEntry 22  }

atmBwClassOeIBS OBJECT-TYPE
    SYNTAX      INTEGER (0..24000) 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the Initial 
                 Burst Size in cells for the other end-point."
        ::= { atmBwClassEntry 23  }

atmBwClassOeMFS OBJECT-TYPE
    SYNTAX      INTEGER (1..200) 
    ACCESS      read-only
    STATUS      deprecated
    DESCRIPTION "This object is not used by the new UPC algorithm,
                 and its value is meaningless."
        ::= { atmBwClassEntry 24  }

atmBwClassOeCCDV OBJECT-TYPE
    SYNTAX      INTEGER (0..250000) 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the Compliant
                 Cell Delay Variation for the other end-point.
                 It corresponds to the CDVT(0+1) parameter defined
                 by the ATM standard documents."
        ::= { atmBwClassEntry 25  }

atmBwClassOeHiCLP OBJECT-TYPE
    SYNTAX      INTEGER (1..100) 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the CLP (Cell
                 Loss Priority) tagging activation threshold for the
                 other end-point."
        ::= { atmBwClassEntry 26 }

atmBwClassOeLoCLP OBJECT-TYPE
    SYNTAX      INTEGER (1..100) 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the CLP (Cell
                 Loss Priority) tagging deactivation threshold for
                 the other end-point."
        ::= { atmBwClassEntry 27 }

atmBwClassCLPTagging OBJECT-TYPE
    SYNTAX      INTEGER {
                enabled(1),
                disabled(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object enables the CLP (Cell
                 Loss Priority) tagging for handling non-compliant
                 cells. When enabled the CLP bit is set on non-
                 compliant cells. When disabled non-compliant
                 cells are discarded."
        ::= { atmBwClassEntry 28 }

atmBwClassUPC OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoletedand is no longer accessible."
        ::= { atmBwClassEntry 29 }

atmBwClassEnableFST OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object determines whether or not the
                 ForeSight option is being used for this .  If set
                 to false, then ForeSight is not used, and if true then
                 ForeSight will be used."
        ::= { atmBwClassEntry 30 }

atmBwClassRateUpICA OBJECT-TYPE
    SYNTAX      INTEGER (10..96000)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the ForeSight
                 Rate Up value in cells per second per adjust for
                 this end point." 
        ::= { atmBwClassEntry 31 }

atmBwClassRateDnICA OBJECT-TYPE
    SYNTAX      INTEGER (1..100)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the ForeSight
                 Rate Down value expressed as percentage of MCR." 
        ::= { atmBwClassEntry 32 }

atmBwClassFastDnICA OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmBwClassEntry 33 }

atmBwClassToQIR OBJECT-TYPE
    SYNTAX      INTEGER (1..255)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the QIR timeout
                 value. This object corresponds to the Initial Cell
                 Rate (ICR) timeout."
        ::= { atmBwClassEntry 34 }

atmBwClassMinAdjustICA  OBJECT-TYPE
    SYNTAX      INTEGER (20..250) 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object is equal to the ForeSight 
                 minimum adjustment period."
        ::= { atmBwClassEntry 35 }

atmBwClassDescription  OBJECT-TYPE
    SYNTAX      DisplayString (SIZE (0..24))
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This MIB object contains a textual description of this
                 frame relay bandwidth class."
        ::= { atmBwClassEntry 36 }

atmBwClassBCM OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object enables the generation
                 of RM cells when congestion is detected in the
                 connection."
        ::= { atmBwClassEntry 37 }
 
atmBwClassFGCRA OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object enables FGCRA.
                 FGCRA (Frame-based Generic Rate Control Algorithm)
                 is applicable with AAL-5 traffic only."
        ::= { atmBwClassEntry 38 }
 
atmBwClassOeBCM OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object enables the generation
                 of RM cells when congestion is detected in the
                 connection. This is the other endpoint view."
        ::= { atmBwClassEntry 39 }
 
atmBwClassOeFGCRA OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object enables FGCRA.
                 FGCRA (Frame-based Generic Rate Control Algorithm)
                 is applicable with AAL-5 traffic only. This is the 
                 other endpoint view."
        ::= { atmBwClassEntry 40 }

atmBwClassConType OBJECT-TYPE
    SYNTAX      INTEGER {
                atf(1),
                vbr(2),
                cbr(3),
                unknown(4),
                abr(5),
                atft(6),
                atfx(7),
                rtvbr(8)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value of this object defines the connection
                 type associated with this class." 
        ::= { atmBwClassEntry 41 }

atmBwClassScrPlc OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmBwClassEntry 42 }
 
atmBwClassOeScrPlc OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmBwClassEntry 43 }
 
atmBwClassPCR0 OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmBwClassEntry 44 }
 
atmBwClassOePCR0 OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmBwClassEntry 45 }
 
atmBwClassCDVT0 OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmBwClassEntry 46 }
 
atmBwClassOeCDVT0 OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "This object has been obsoleted and is no longer accessible."
        ::= { atmBwClassEntry 47 }
 
atmBWClassNRM OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "NRM is the maximum number of cells a source may send
                 for each forward RM-cell. This object applies only to
                 ABR without ForeSight."
        ::= { atmBwClassEntry 48 }
 
atmBWClassFRTT OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Fixed Round-Trip Time (FRTT) is the sum of the fixed
                 and propagation delays from the source to a destination 
                 and back. This object applies only to ABR without 
                 ForeSight."
        ::= { atmBwClassEntry 49 }
 
atmBWClassTBE OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Transient Buffer Exposure (TBE) is the negotiated number
                 of cells that the network would like to limit the source 
                 to sending during startup periods, before the first 
                 RM-cell returns. This object applies only to ABR without
                 ForeSight."
        ::= { atmBwClassEntry 50 }
        
atmBWClassVSVD OBJECT-TYPE
    SYNTAX      INTEGER {
                enable (1),
                disable (2)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Virtual Source/Virtual Destination (VS/VD) is used to 
                 divide an ABR connection into two or more separately 
                 controlled ABR segment. This flag indicates whether
                 the ATM end points (both ends) will serve as VS/VD
                 or not. This object applies only to ABR without
                 ForeSight."
        ::= { atmBwClassEntry 51 }

atmBWClassPolicing OBJECT-TYPE
    SYNTAX      INTEGER {
                vbr1 (1),
                vbr2 (2),
                vbr3 (3),
                pcrplc(4),
                none  (5)
   }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Specifies the traffic policing for this end point.
                 --------------- ---------- ----------  
                  Policing Type  1st Bucket 2nd Bucket 
                 --------------- ---------- ----------
                   vbr.1          CLP(0+1)   CLP(0+1)            
                   vbr.2          CLP(0+1)   CLP(0)     
                   vbr.3          CLP(0+1)   CLP(0) with CLP Tagging
                   pcrplc         CLP(0+1)   none
                   none           none       none
                 "
        ::= { atmBwClassEntry 52 }

atmBWClassPCR   OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "PCR(0+1), Peak Cell Rate, specifies an upper bound on
                 rate at which traffic can be submitted on an ATM
                 connection. This object applies to the First Leaky
                 Bucket for leaving cells with Cell Loss Priority of 0 or 1.
                "
        ::= { atmBwClassEntry 53 }

atmBWClassOePCR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Other end PCR(0+1), Peak Cell Rate, specifies an upper 
                 bound on rate at which traffic can be submitted on an ATM
                 connection. This object applies to the First Leaky
                 Bucket for leaving cells with Cell Loss Priority of 0 or 1.
                "
        ::= { atmBwClassEntry 54 }

atmBWClassSCR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "SCR, Sustainable Cell Rate, is an upper bound on the
                 conforming average rate of an ATM connection, over
                 time scales which are long relative to those for which
                 the PCR is defined. Enforcement of this bound by the UPC
                 could allow the network to allocate sufficient resources,
                 but less than thos based on the PCR, and still ensure
                 that the performance objectives (e.g., Cell Loss Ration)
                 can be achieved.
                 "
        ::= { atmBwClassEntry 55 }

atmBWClassOeSCR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Other end SCR, Sustainable Cell Rate, is an upper bound on
                 the conforming average rate of an ATM connection, over
                 time scales which are long relative to those for which
                 the PCR is defined. Enforcement of this bound by the UPC
                 could allow the network to allocate sufficient resources,
                 but less than thos based on the PCR, and still ensure
                 that the performance objectives (e.g., Cell Loss Ration)
                 can be achieved.
                 "
        ::= { atmBwClassEntry 56 }

atmBWClassMCR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "MCR, Minimum Cell Rate, specifies the rate at which 
                 the source is always allowed to send.
                 "
        ::= { atmBwClassEntry 57 }
        

atmBWClassOeMCR OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Other end MCR, Minimum Cell Rate, specifies the rate 
                 at which the source is always allowed to send.
                 "
        ::= { atmBwClassEntry 58 }

-- This table describes a mapping between Frame Relay endpoints 
-- described by slot.port.dlci and corresponding object identifier
-- pointers into connTable and the service specific endptTable.
-- This table allows the user to determine the table indeces associated
-- with the connection defined by the physical attributes of slot, port,
-- and dlci.  
--
frEndptMapTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF FrEndptMapEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The Frame Relay Endpoint-Connection Mapping table."
    --DEFAULT   test-function   test_frendptmaptable
    --DEFAULT   next-function   next_frendptmaptable
    --DEFAULT   get-function    get_frendptmaptable_%t
    --DEFAULT   view-mask       IPX_VIEW 
        ::= { switchConnection 10  }
 
frEndptMapEntry OBJECT-TYPE
    SYNTAX      FrEndptMapEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the Frame Relay Endpoint Connection Mapping 
                 table."
    INDEX   { frEndptMapSlot,
              frEndptMapPort,
              frEndptMapDlci }
        ::= { frEndptMapTable 1  }
 
FrEndptMapEntry ::=
    SEQUENCE {
        frEndptMapSlot          INTEGER,
        frEndptMapPort          INTEGER,
        frEndptMapDlci          INTEGER,
        frEndptMapEndptPtr      OBJECT IDENTIFIER,          
        frEndptMapConnPtr       OBJECT IDENTIFIER           
    }

frEndptMapSlot OBJECT-TYPE
    SYNTAX      INTEGER (1..32)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This MIB object contains the slot number associated
                 with the requested connection endpoint."
        ::= { frEndptMapEntry 1  }
 
frEndptMapPort OBJECT-TYPE
    SYNTAX      INTEGER (1..32)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This MIB object contains the port number associated
                 with the requested connection endpoint."
        ::= { frEndptMapEntry 2  }

frEndptMapDlci OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This MIB object contains the Frame Relay DLCI 
                 associated with the requested connection endpoint.
                 For Frame Forwarding connections, this object is
                 16383."
        ::= { frEndptMapEntry 3  }

frEndptMapEndptPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This MIB object contains a pointer to first column of row
                 in the service specific EndptTable which corresponds to 
                 the slot, port, and dlci specified in the columns above."
        ::= { frEndptMapEntry 4  }

frEndptMapConnPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This MIB object contains a pointer to first column of row
                 in connTable which corresponds to the slot, port, and
                 dlci specified in the columns above."
        ::= { frEndptMapEntry 5  }



-- This table describes a mapping between ATM endpoints 
-- described by slot.port.vpi.vci and corresponding object identifier
-- pointers into connTable and the service specific endptTable.
-- This table allows the user to determine the table indeces associated
-- with the connection defined by the physical attributes of slot, port,
-- vpi, and vci.  
--
atmEndptMapTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF AtmEndptMapEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The ATM Endpoint-Connection Mapping table."
    --DEFAULT   test-function   test_atmendptmaptable
    --DEFAULT   next-function   next_atmendptmaptable
    --DEFAULT   get-function    get_atmendptmaptable_%t
        ::= { switchConnection 11  }
 
atmEndptMapEntry OBJECT-TYPE
    SYNTAX      AtmEndptMapEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the ATM Endpoint Connection Mapping table."
    INDEX   { atmEndptMapSlot,
              atmEndptMapPort,
              atmEndptMapVpi,
              atmEndptMapVci }
        ::= { atmEndptMapTable 1  }
 
AtmEndptMapEntry ::=
    SEQUENCE {
        atmEndptMapSlot          INTEGER,
        atmEndptMapPort          INTEGER,
        atmEndptMapVpi           INTEGER,
        atmEndptMapVci           INTEGER,
        atmEndptMapEndptPtr      OBJECT IDENTIFIER,          
        atmEndptMapConnPtr       OBJECT IDENTIFIER           
    }

atmEndptMapSlot OBJECT-TYPE
    SYNTAX      INTEGER (1..32)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This MIB object contains the slot number associated
                 with the requested connection endpoint."
        ::= { atmEndptMapEntry 1  }
 
atmEndptMapPort OBJECT-TYPE
    SYNTAX      INTEGER (1..32)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This MIB object contains the port number associated
                 with the requested connection endpoint."
        ::= { atmEndptMapEntry 2  }

atmEndptMapVpi OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This MIB object contains the ATM endpoint VPI 
                 associated with the requested connection endpoint."
        ::= { atmEndptMapEntry 3  }

atmEndptMapVci OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This MIB object contains the ATM endpoint VCI 
                 associated with the requested connection endpoint.
                 For Virtual Path Connections, this object will be 
                 65537."
        ::= { atmEndptMapEntry 4  }

atmEndptMapEndptPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This MIB object contains a pointer to first column of row
                 in the service specific EndptTable which corresponds to 
                 the slot, port, vpi, and vci specified in the columns above."
        ::= { atmEndptMapEntry 5  }

atmEndptMapConnPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This MIB object contains a pointer to first column of row
                 in connTable which corresponds to the slot, port, vpi,
                 and vci specified in the columns above."
        ::= { atmEndptMapEntry 6  }

--
-- This table defines the ATM connection end-point statistics 
-- Statistics are not supported on OC3 end points. The value for
-- objects in this table for OC3 end points is zero.
--

atmEndptStatTable OBJECT-TYPE 
    SYNTAX      SEQUENCE OF AtmEndptStatEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The ATM End-Point Statistics table." 
    --DEFAULT   test-function   test_atmendptstattable 
    --DEFAULT   next-function   next_atmendptstattable
    --DEFAULT   get-function    get_atmendptstattable_%t
    --DEFAULT   view-mask       BPX_VIEW | IGX_VIEW
        ::= { switchConnection 12  }

atmEndptStatEntry OBJECT-TYPE
    SYNTAX      AtmEndptStatEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the ATM End-point Statistics table."
    INDEX   { atmEndptIndex }
        ::= { atmEndptStatTable 1  }

AtmEndptStatEntry ::=
    SEQUENCE {
        atmCellsRxPorts          Counter,
        atmFramesRxPorts         Counter,
        atmCellsTxNets           Counter,
        atmClpRxs                Counter,
        atmViolRxs               Counter,
        atmDiscardVcqClpThs      Counter,
        atmDiscardVcqFulls       Counter,
        atmEfciRxs               Counter,
        atmNonCompRxs            Counter,
        atmDiscardFails          Counter,
        atmAvgVcqDepths          Counter,
        atmDiscardRsrcOflows     Counter,
        atmDiscardSbinFulls      Counter,
        atmBcmRxs                Counter,
        atmBcmTxs                Counter,
        atmOamTxs                Counter,
        atmDiscardQbinFulls      Counter,
        atmDiscardQbinClpThs     Counter,
        atmCellsRxNets           Counter,
        atmClpTxs                Counter,
        atmEfciTxs               Counter,
        atmCellsTxPorts          Counter,
        atmAisRxs                Counter,
        atmFerfRxs               Counter
    }

atmCellsRxPorts  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of cells delivered to the port
                 from the line interface."
        ::= { atmEndptStatEntry 1  }

atmFramesRxPorts  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of frames delivered to the port
                 from the line interface."
        ::= { atmEndptStatEntry 2  }

atmCellsTxNets  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of received cells delivered to
                 the network."
        ::= { atmEndptStatEntry 3  }

atmClpRxs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of cells delivered to the port
                 from the line interface which had their
                 CLP bit set."
        ::= { atmEndptStatEntry 4  }

atmViolRxs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of cells that violated UPC."
        ::= { atmEndptStatEntry 5  }

atmDiscardVcqClpThs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of cells with CLP set that were
                 discarded due to VC queue exceeding CLP
                 thresholds."
        ::= { atmEndptStatEntry 6  }

atmDiscardVcqFulls  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of received cells that were 
                 discarded due to the VC queue being
                 full."
        ::= { atmEndptStatEntry 7  }

atmEfciRxs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of cells received with EFCI set."
        ::= { atmEndptStatEntry 8  }

atmNonCompRxs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of non-compliant cells received."
        ::= { atmEndptStatEntry 9  }

atmDiscardFails  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of received cells discarded due
                 to the connection being in failed state."
        ::= { atmEndptStatEntry 10 }

atmAvgVcqDepths  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The average queue depth of the VC queue."
        ::= { atmEndptStatEntry 11 }

atmDiscardRsrcOflows  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of received cells discarded due to
                 a resource overflow (e.g. cell buffer full)."
        ::= { atmEndptStatEntry 12 }

atmDiscardSbinFulls  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of cells discarded on receipt from
                 from the port due to Sbin full."
        ::= { atmEndptStatEntry 13 }

atmBcmRxs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of BCM cells received from the port.
                 This object only applies to NNI ports. For UNI
                 ports returns 0."
        ::= { atmEndptStatEntry 14 }

atmBcmTxs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of BCM cells transmitted to the
                 network. This object only applies to NNI ports.
                 For UNI ports returns 0."
        ::= { atmEndptStatEntry 15 }

atmOamTxs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of OAM cells transmitted to the
                 network."
        ::= { atmEndptStatEntry 16 }

atmDiscardQbinFulls  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of cells discarded due to the egress
                 Qbin being full."
        ::= { atmEndptStatEntry 17 }

atmDiscardQbinClpThs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of cells with CLP set that are
                 discarded due to the egress Qbin exceeding 
                 CLP thresholds."
        ::= { atmEndptStatEntry 18 }

atmCellsRxNets  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of cells received from the network."
        ::= { atmEndptStatEntry 19 }

atmClpTxs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of cells transmitted to the port
                 that had their CLP bit set."
        ::= { atmEndptStatEntry 20 }

atmEfciTxs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of cells transmitted by the port
                 to the line interface that had EFCI set."
        ::= { atmEndptStatEntry 21 }

atmCellsTxPorts  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of cells transmitted to the port
                 interface."
        ::= { atmEndptStatEntry 22 }

atmAisRxs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of received AIS cells."
        ::= { atmEndptStatEntry 23 }

atmFerfRxs  OBJECT-TYPE
    SYNTAX      Counter 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of received FERF cells."
        ::= { atmEndptStatEntry 24 }





--
-- The following describes the MIB variables for voice type connections.
--
-- voiceEndptTable contains information for the connection Endpoint.
-- 
-- lineChanTable contains configuration for each voice Channel.
-- 
-- voiceStatTable contain voice endpoint related statistics.


voiceEndptTable  OBJECT-TYPE 
    SYNTAX      SEQUENCE OF VoiceEndptEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The voice channel connection table has Channel Connection
                 information. This table contains parameters which are 
                 used to create a Voice connection and configure the channel."

    --DEFAULT   test-function   test_voendpttable
    --DEFAULT   next-function   next_voendpttable
    --DEFAULT   get-function    get_voendpttable_%t
    --DEFAULT   view-mask       IPX_VIEW 
        ::= { switchConnection 13  }

voiceEndptEntry OBJECT-TYPE
    SYNTAX      VoiceEndptEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the voice Endpoint Channel Connection table."
    INDEX   { voiceEndptIndex  }
        ::= { voiceEndptTable 1  }

VoiceEndptEntry ::=
    SEQUENCE {

    voiceEndptIndex              INTEGER,
    voiceOtherEndptIndex         INTEGER,
    voiceEndptDesc               DisplayString,
    voiceOtherEndptDesc          DisplayString,
    voiceEndptConnDesc           DisplayString,
    voiceEndptAdminStatus        INTEGER,
    voiceEndptOperStatus         INTEGER,
    voiceEndptRateType           INTEGER,
    voiceEndPointFailure         INTEGER,
    voiceNoRouteFoundFailure     INTEGER,
    voiceBumpFailure             INTEGER,
    voiceTestFailure             INTEGER,
    voiceEndptTestType           INTEGER,
    voiceEndptLpbkStatus         INTEGER,
    voiceConnPtr                 OBJECT IDENTIFIER,
    voiceChannelPtr              OBJECT IDENTIFIER,
    voiceEndptTrkAvoidType       INTEGER,
    voiceEndptAvoidZCS           INTEGER,
    voiceEndptState              INTEGER,
    voiceEndptAdv                INTEGER,
    voiceOtherEndptAdv           INTEGER,
    voiceEndptEncoding           INTEGER,
    voiceOtherEndptEncoding      INTEGER,
    voiceEndptEndptType          INTEGER,
    voiceEndptLocLpbkState       INTEGER,
    voiceEndptSvcId              INTEGER,
    voiceEndptIsSVC              INTEGER,
    voiceEndptFaxModem           INTEGER,
    voiceEndptLocRmtLpbk         INTEGER
}

voiceEndptIndex     OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The index  into voiceEndptTable for this Voice Connection."
        ::= { voiceEndptEntry 1  }

voiceOtherEndptIndex OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Index into remote node's voiceEndptTable for this channel
                 end-point."
        ::= { voiceEndptEntry 2  }

voiceEndptDesc  OBJECT-TYPE
    SYNTAX      DisplayString
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "String describing this voice Channel. Contains information 
                 about the domain, nodename, slot, channel, for the 
                 connection. For example, D1.Node1.12.1, is a valid 
                 description.  Domain and nodename need not be given 
                 but slot, channel values must exist; 12.1 is valid. 
                 This variable value has to specified for a Creating 
                 an voiceEndptEntry."
        ::= { voiceEndptEntry 3  }

voiceOtherEndptDesc     OBJECT-TYPE
    SYNTAX      DisplayString
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "String describing the remote channel.  Contains
                 information about the domain, nodename, slot, channel,
                 for the connection.  For example, D2.Node2.10.5, is a valid 
                 description. Nodename, slot, channel values must exist; 
                 Node2.10.5  is valid. This variable value has to be 
                 specified for creating an voiceEndptEntry."
        ::= { voiceEndptEntry 4  }

voiceEndptConnDesc OBJECT-TYPE
    SYNTAX      DisplayString (SIZE (0..20))
    ACCESS      not-accessible
    STATUS      obsolete
    DESCRIPTION "A string that has been defined for the connection to
                 give a more descriptive name.  Connections can be given
                 clear text names in order to make them more human readable.
                 This object has been changed to not-accessible because
                 it is no longer supported as of release 8.4."
        ::= { voiceEndptEntry 5  }

voiceEndptAdminStatus     OBJECT-TYPE
    SYNTAX      INTEGER {
                create(1),
                delete(2),
                modify(3),
                test(4),
                writeOnly(5)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION  "User requested state for voice endpoint table row.
                  A user can create / delete / modify this voice channel 
                  connection by setting this object appropriately.  
                  The user also has the capability to test a particular 
                  object.  For this capability, the user must set this 
                  value to test."
        ::= { voiceEndptEntry 6  }

voiceEndptOperStatus          OBJECT-TYPE
    SYNTAX      INTEGER {
                ok(1),
                okPendingDown(2),
                down(3),
                failed(4),
                inTest(5),
                okPendingRoute(6),
                okPendingDelete(7),
                looped(8),
                unknown(9)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Actual state of the voice channel.If the state is failed,
                 then look to the objects voiceNoRouteFoundFailure, 
                 voiceBumpFailure, and voiceTestFailure to determine reason 
                 for failure."
        ::= { voiceEndptEntry 7  }

voiceEndptRateType   OBJECT-TYPE
    SYNTAX      INTEGER {
                a32(1),
                a24(2),
                a16(3),
                a16z(4),
                a32d(5),
                c32(6),
                c24(7),
                c16(8),
                c16z(9),
                c32d(10),
                p(11),
                t(12),
                v(13),
                l16(14),
                l16v(15),
                g729r8(16),
                g729r8v(17),
                g729ar8(18),
                g729ar8v(19),
                td(20)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Represents the type of voice connection, described below:

        Type    Description

        a32    Uses ADPCM only. Can select 32/24/16 Kbps
        a24    compression.
        a16

        a16z    Standard 16Kbps ADPCM only. compressed code can have 
                strings of zeros and should not be used on ZCS trunks.

        c32     Uses both ADPCM and Voice Activity detection (VAD).
        c24     Can select 32/24/16 Kbps ADPCM compression.
        c16
        
        c16z    Standard 16Kbps ADPCM and Voice Activity detection.
                Similar to 16z. Do not use on ZCS trunks.
        
        p       64Kbps connection,  A-law or m-law encoding, no compression.

        t      Transparent, Clear Channel 64Kbps connection, no compression.

        v      voice Activity Detection (VAD) without compression.

        l16    LDCELP type, 16Kbps.
        l16v   LDCELP type, 16Kbps, with Voice Activity Detection.

        g729r8   CS-ACELP type, 8Kbps.
        g729r8v  CS-ACELP type, 8Kbps with Voice Activity Detection.
        g729ar8  CS-ACELP type, 8Kbps.
        g729ar8v CS-ACELP type, 8Kbps with Voice Activity Detection.

        td     Transparent, with D-Channel compression

        This variable value has to be specified for creating an 
        voiceEndptEntry."
        ::= { voiceEndptEntry 8  }

voiceEndPointFailure OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "End-point is failed because of a remote end-point failure.
                 The remote end-point is on a node that resides in another
                 domain making the connection an inter-domain connection."
        ::= { voiceEndptEntry 9  }

voiceNoRouteFoundFailure OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Channel connection is failed is because no route to the
                 remote Channel  could be found."
        ::= { voiceEndptEntry 10 }

voiceBumpFailure OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Channel Connection is failed because of insufficient bandwidth
                 to route to the remote Channel.  This may have also
                 been caused because a higher priority connection took
                 this channel's bandwidth.  A higher priority connection
                 is one with the lowest class of service (COS)."
        ::= { voiceEndptEntry 11 }

voiceTestFailure OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Channel is failed because of the failure of a connection
                 test if true(2)."
        ::= { voiceEndptEntry 12 }

voiceEndptTestType OBJECT-TYPE
    SYNTAX      INTEGER {
                testCon(1),
                testNoLoop(3),
                writeOnly(5)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Specifies the type of test the user would like to
                 conduct on this endpoint.  Only testCon is currently
                 defined. TestCon performs a test of voice  path 
                 integrity in the connection. Only write is allowed on this 
                 object."
        ::= { voiceEndptEntry 13 }


voiceEndptLpbkStatus OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Specifies the current Loopback State of the endpoint.
                 The value returned from this object is a bitmap
                 of the current loopback states associated with this
                 end point. The bitmap is defined below:
         LP_RMT_RMT   0 /* Remote nodes remote muxbus loopback   */
         LP_RMT_TST   1 /* Remote nodes tstcon loopback          */
         LP_LOC_RMT   2 /* Local  nodes remote muxbus loopback   */
         LP_LOC_TST   3 /* Local  nodes tstcon loopback          */
         LP_LOC_LOC   4 /* Local  nodes local muxbus loopback    */
         LP_LOC_PORT  5 /* Local  nodes port loopback            */
         LP_LOC_TPORT 6 /* Local  nodes port test loopback       */
         LP_RMT_LOC   7 /* Remote nodes local muxbus loopback    */
         LP_RMT_PORT  8 /* Remote nodes port loopback            */
         LP_RMT_TPORT 9 /* Remote nodes port test looback        */
         LP_LOC_CSU 10 /* Local  DDS network requested CSU loopback */
         LP_RMT_CSU 11 /* Remote DDS network requested CSU loopback */
         LP_LOC_DSU 12 /* Local  DDS network requested DSU loopback */
         LP_RMT_DSU 13 /* Remote DDS network requested DSU loopback */
         LP_LOC_EXT 14 /* Local  DDS external loopback          */
         LP_RMT_EXT 15 /* Remote DDS external loopback          */
         "
        ::= { voiceEndptEntry 14 }

voiceConnPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Pointer to general connection information.  Using this
                 pointer the user can obtain connection status, and
                 routing information. Specifically, this is an object
                 identifier specifying the first column of the appropriate
                 row in the connTable."
        ::= { voiceEndptEntry 15 }

voiceChannelPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Pointer to channel configuration information.  Using this
                 pointer the user can obtain all channel configuration 
                 information. Specifically, this is an object
                 identifier specifying the first column of the appropriate
                 row in the voiceChannelTable. "
        ::= { voiceEndptEntry 16 }

voiceEndptTrkAvoidType OBJECT-TYPE
    SYNTAX      INTEGER {
                none(1),
                satellite(2),
                terrestrial(3)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "User selectable types of trunks to avoid for the
                 transfer of  voice channel data.  Current choices are to 
                 avoid satellite links, terrestrial links, or to not avoid
                 any specific type of link. This object is optional
                 during the creation of the endpoint."
        ::= { voiceEndptEntry 17 }

voiceEndptAvoidZCS OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Flag to force the connection to avoid trunks with zero
                 code suppression (ZCS). This object is optional during
                 the creation of the endpoint."
        ::= { voiceEndptEntry 18 }

voiceEndptState OBJECT-TYPE
    SYNTAX      INTEGER {
                offhook (1),
                onhook(2),
                slowmodem(3),
                fastmodem(4),
                notConnected(5)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "It gives the state of the connection end point."
        ::= { voiceEndptEntry 19 }

voiceEndptAdv OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "It represents if the endpoint supports Adaptve voice 
                 capability."
        ::= { voiceEndptEntry 20 }

voiceOtherEndptAdv  OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "It represents if the other endpoint supports Adaptve voice 
                 capability."
        ::= { voiceEndptEntry 21 }

voiceEndptEncoding    OBJECT-TYPE
    SYNTAX      INTEGER {
                alaw(1),
                ulaw(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "It represents the type of Encoding used at this Endpoint.
                 The read-write access is provided to allow verification of
                 the line encoding when a voice connection is added."
        ::= { voiceEndptEntry 22 }

voiceOtherEndptEncoding  OBJECT-TYPE
    SYNTAX      INTEGER {
                alaw(1),
                ulaw(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "It represents the type of Encoding used at the other Endpoint.
                 The read-write access is provided to allow encoding for a remote
                 endpoint to be set in Tiered Networks."
        ::= { voiceEndptEntry 23 }

voiceEndptEndptType  OBJECT-TYPE
    SYNTAX      INTEGER {
                pcm(1),
                adpcm(2),
                adpno(3),
                transp(4),
                unknown(5),
                ldcelp(6)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "It represents the end point type"
        ::= { voiceEndptEntry 24 }
 
voiceEndptLocLpbkState OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Specifies the Local Loopback State the user would
                 like to set for the endpoint. When read, it shows if
                 channel is looped back or not."
        ::= { voiceEndptEntry 25 }

voiceEndptSvcId OBJECT-TYPE
    SYNTAX      INTEGER (0..2147483647)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Specifies the 32 bit identifier associated with this
                 switched virtual circuit (SVC)."
        ::= { voiceEndptEntry 26 }
 
voiceEndptIsSVC OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Specifies whether the 32 bit identifier associated
                 with a switched virtual circuit (SVC) or a permanent
                 virtual circuit (PVC)."
        ::= { voiceEndptEntry 27 }

voiceEndptFaxModem  OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This represents the selection of a channel for FAX/modem 
                 detection. By default it is disabled. This feature must be
                 configured at both ends of the channel."
        ::= { voiceEndptEntry 28 }

voiceEndptLocRmtLpbk OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Specifies the Local Remote Loopback State the user would
                 like to set for the endpoint. When read, it shows if
                 channel is looped back or not."
        ::= { voiceEndptEntry 29 }

--
-- Voice End Point Statistics Table 
--
voiceStatTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF VoiceStatEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The voice Statistics Table."
    --DEFAULT   test-function   test_voicestatstable
    --DEFAULT   next-function   next_voicestatstable
    --DEFAULT   get-function    get_voicestatstable_%t
    --DEFAULT   view-mask       IPX_VIEW
        ::= { switchConnection 14  }

voiceStatEntry OBJECT-TYPE
    SYNTAX      VoiceStatEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the voice channel statistics table."
    INDEX  { voiceEndptIndex  }
        ::= { voiceStatTable 1  }

VoiceStatEntry ::=
    SEQUENCE {
    voiceStatPktsRxs         Counter, 
    voiceStatPktsXmits       Counter, 
    voiceStatRxPktsDscds     Counter, 
    voiceStatSprvPktsXmits   Counter, 
    voiceStatSprvPktsRcvs    Counter, 
    voiceStatV25ModemOns     Counter, 
    voiceStatDsiOns          Counter, 
    voiceStatOffhks          Counter, 
    voiceStatInservices      Counter
    }

voiceStatPktsRxs  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of packets received from the muxbus by the local
                 port card."
        ::= { voiceStatEntry 1  }

voiceStatPktsXmits  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of packets transmitted from the local port card
                 onto the Mux Bus."
        ::= { voiceStatEntry 2  }

voiceStatRxPktsDscds  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of packets received from the muxbus by the local
                 port card which are discarded before being transmitted out
                 to the port."
        ::= { voiceStatEntry 3  }

voiceStatSprvPktsXmits     OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of supervisory packets transmitted from the local
                 port onto the Muxbus. Supervisory packets reflect signalling
                 bit transitions for voice connections."
        ::= { voiceStatEntry 4  }

voiceStatSprvPktsRcvs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of supervisory packets received from Muxbus 
                 associated with a connection."
        ::= { voiceStatEntry 5  }

voiceStatV25ModemOns  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of seconds the V.25 modem is detected and the
                 connection is upgraded to PCM."
        ::= { voiceStatEntry 6  }

voiceStatDsiOns    OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of seconds that a connection is performing 
                 Digital  speech interpolation (DSI)."
        ::= { voiceStatEntry 7  }

voiceStatOffhks    OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of seconds that a connection is offhook. The 
                 onhook state is determined by onhook A/B/C/D bits defined
                 by variables in the voiceEndpttable. A connection which 
                 is not onhook is treated as offhook."
        ::= { voiceStatEntry 8  }

voiceStatInservices OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of seconds a connection is inservice. A 
                 connection is said to be in-service if its endpoints are 
                 not in alarm, the cards required to support this connection
                 are present, and the connection is routed."        
        ::= { voiceStatEntry 9  }



-- The voiceEndptMapTable Table is replaced by voiceEndptConnMapTable
-- voiceEndptMapTable  OBJECT-TYPE   ::= { switchConnection 15 }
--  

voiceEndptConnMapTable  OBJECT-TYPE
    SYNTAX      SEQUENCE OF VoiceEndptConnMapEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The Voice Endpoint-Connection Mapping table."
    --DEFAULT   test-function   test_voendptmaptable
    --DEFAULT   next-function   next_voendptmaptable
    --DEFAULT   get-function    get_voendptmaptable_%t
    --DEFAULT   view-mask       IPX_VIEW
        ::= { switchConnection 16 }
 
voiceEndptConnMapEntry OBJECT-TYPE
    SYNTAX      VoiceEndptConnMapEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the Voice Endpoint Connection Mapping table."
    INDEX   { switchIfIndex,
              voiceEndptConnMapChannel }
        ::= { voiceEndptConnMapTable 1  }
 
VoiceEndptConnMapEntry ::=
    SEQUENCE {
        voiceEndptConnMapChannel       INTEGER,
        voiceEndptConnMapEndptPtr      OBJECT IDENTIFIER,
        voiceEndptConnMapConnPtr       OBJECT IDENTIFIER
    }
 
voiceEndptConnMapChannel OBJECT-TYPE
    SYNTAX      INTEGER (1..31)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This MIB object contains the channel number associated
                 with the requested connection endpoint."
        ::= { voiceEndptConnMapEntry 1  }
 
voiceEndptConnMapEndptPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This MIB object contains a pointer to first column of row
                 in the service specific EndptTable which corresponds to
                 the slot and channel specified in the columns above."
        ::= { voiceEndptConnMapEntry 2  }
 
voiceEndptConnMapConnPtr OBJECT-TYPE
    SYNTAX      OBJECT IDENTIFIER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This MIB object contains a pointer to first column of row
                 in connTable which corresponds to the slot and channel
                 specified in the columns above."
        ::= { voiceEndptConnMapEntry 3  }

 

-- The following objects are associated with the switchShelf
-- configuration branch.  These objects are scalar variables 
-- utilized by the network manager to manage the switch shelf
-- wide configuration.
 
shelfCnfgStatMaster  OBJECT-TYPE
    SYNTAX      IpAddress 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This object provides the network manager the
                 IP address of the master statistics collection
                 management workstation."
    --DEFAULT   get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 1  }

shelfCnfgStatCollIntvl  OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This object provides the network manager the
                 current TFTP statistics collection file interval 
                 configured on the switch in minutes."
    --DEFAULT   get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 2  }

shelfCnfgStatBcktIntvl  OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This object provides the network manager the
                 current TFTP statistics collection bucket interval 
                 configured on the switch in minutes."
    --DEFAULT   get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 3  }

shelfCnfgStatTimeSync  OBJECT-TYPE
    SYNTAX      DisplayString 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This object provides the network manager the
                 current time for TFTP statistics collection. 
                 This object replaces the functionality originally
                 supplied by the daytime handler application."
    --DEFAULT   get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 4  }

shelfCnfgSwError  OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This object notifies the network manager that a
                 switch software error has has been logged on this
                 shelf."
    --DEFAULT   get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 5  }

shelfCnfgCardError  OBJECT-TYPE
    SYNTAX      INTEGER {
                false(1),
                true(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This object notifies the network manager that a
                 switch card error has has been logged on this
                 shelf."
    --DEFAULT   get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 6  }

shelfCnfgEthIPAddr  OBJECT-TYPE
    SYNTAX      IpAddress 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Switch Ethernet Interface IP Address"
    --DEFAULT   get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 7  }
 
shelfCnfgEthIPMask  OBJECT-TYPE
    SYNTAX      IpAddress 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Switch Ethernet Interface IP Address Mask"
    --DEFAULT   get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 8  }
 
shelfCnfgEthMacAddr  OBJECT-TYPE
    SYNTAX      OCTET STRING
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Switch Ethernet Interface Mac Address"
    --DEFAULT   get-function get_shelfcnfg_physaddr
        ::= { shelfCnfgObjects 9  }
 
shelfCnfgEthGWAddr  OBJECT-TYPE
    SYNTAX      IpAddress 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Switch Ethernet Interface Gateway Address"
    --DEFAULT   get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 10  }
 
shelfCnfgNwIPAddr  OBJECT-TYPE
    SYNTAX      IpAddress 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Switch Network Interface IP Address"
    --DEFAULT   get-function get_shelfcnfg_%t
       ::= { shelfCnfgObjects 11  }

shelfCnfgNwIPMask  OBJECT-TYPE
    SYNTAX      IpAddress 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Switch Network Interface IP Address Mask"
    --DEFAULT  get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 12  }

shelfCnfgNodeName  OBJECT-TYPE
    SYNTAX      DisplayString 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Switch Network Node Name"
    --DEFAULT   get-function get_sysname
        ::= { shelfCnfgObjects 13  }

shelfCnfgNodeNumber  OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Switch Network Node Number"
    --DEFAULT   get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 14  }

shelfCnfgDomainNumber  OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Switch Network Domain Number"
    --DEFAULT   get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 15  }

shelfCnfgNodeType  OBJECT-TYPE
    SYNTAX      INTEGER{
                ipx(1),
                bpx(2),
                igx(3),
                igx8450(16)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Switch Network Node Type. Enumeration igx8450(16)
                 is obsolete."
    --DEFAULT   get-function get_shelfcnfg_%t
       ::= { shelfCnfgObjects 16  }

shelfCnfgAlarmStatus  OBJECT-TYPE
    SYNTAX      INTEGER{
                clear(1),
                minor(2),
                major(3)
    } 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Switch alarm status"
    --DEFAULT   get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 17  }

shelfCnfgPrimSwRevision  OBJECT-TYPE
    SYNTAX      DisplayString 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Switch Primary Software Revision (e.g. 8.1.A.1)"
    --DEFAULT   get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 18  }

shelfCnfgSecSwRevision  OBJECT-TYPE
    SYNTAX      DisplayString 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Switch Secondary Software Revision (e.g. 8.1.A.1)"
    --DEFAULT   get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 19  }

shelfCnfgTimeZone  OBJECT-TYPE
    SYNTAX      INTEGER {
                gplus12(1),
                gplus11(2),
                gplus10(3),
                gplus09(4),
                gplus08(5),
                gplus07(6),
                gplus06(7),
                gplus05(8),
                gplus04(9),
                gplus03(10),
                gplus02(11),
                gplus01(12),
                gmt (13),
                gminus01(14),
                gminus02(15),
                gminus04(16),
                gminus05(17),
                est (18),
                cst (19),
                pdt (20),
                pst (21),
                yst (22),
                gminus10(23),
                gminus11(24),
                gminus12(25)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Switch Configured Timezone."
    --DEFAULT   get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 20  }

shelfCnfgTrapSeverity  OBJECT-TYPE
    SYNTAX      INTEGER{
                minor(1),
                major(2),
                info(3),
                notReadable(4)
    } 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Severity of the trap generated. 
                 1,2 or 3 are used to send a trap to NMS.
                 The variable is used for notification only.
                 Get function of the object always returns
                 notReadable(4). ACCESS attribute is changed
                 from not-accessible to read-only so switch
                 MIB can be compiled with smic(NG)."
    --DEFAULT   get-function get_shelfcnfg_%t
         ::= { shelfCnfgObjects 21  }

shelfCnfgRebuildStatus OBJECT-TYPE
    SYNTAX      INTEGER{
                rebuild(1),
                active(2)
    } 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This object is utilized by the INS to determine if the 
                 switch shelf has
                 experienced a rebuild. This object also serves as the 
                 heartbeat mechanism"
    --DEFAULT   test-function test_shelfcnfg
    --DEFAULT   get-function get_shelfcnfg_%t
    ::= { shelfCnfgObjects 22  }


shelfCnfgJunctNode OBJECT-TYPE
    SYNTAX      INTEGER{
                false(1),
                true(2)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The flag indicating whether the node is a junction node"
    --DEFAULT   get-function get_shelfcnfg_%t
    ::= { shelfCnfgObjects 23  }


shelfCnfgVcPollRate OBJECT-TYPE
    SYNTAX      INTEGER (5..15)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "VC Polling Rate (in minutes). This system-wide 
                 object, which can be configured via CLI command 
                 cnfsysparm, are used to specify the period for
                 the switch to poll connection statistics."
    --DEFAULT   get-function get_shelfcnfg_%t
    ::= { shelfCnfgObjects 24  }

shelfCnfgInternalFdrEthIPAddr OBJECT-TYPE
    SYNTAX      IpAddress 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Internal feeder Ethernet interface
                 IP Address. It returns 0 if the internal
                 feeder is not provisioned."
    --DEFAULT   get-function get_shelfcnfg_%t
        ::= { shelfCnfgObjects 25  }

shelfCnfgInternalFdrNwIPAddr  OBJECT-TYPE
    SYNTAX      IpAddress 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Internal feeder Network Interface IP Address.
                 The address is for IP relay. It returns 0
                 if the internal feeder is not provisioned."
    --DEFAULT   get-function get_shelfcnfg_%t
       ::= { shelfCnfgObjects 26  }

shelfCnfgAverageIdle OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The average idle time (in %).  This system-wide
                 object, which is maintained at all time after
                 boot, is the average idle time of the switch
                 to be used to see how busy the switch is."
    --DEFAULT   get-function get_shelfcnfg_%t
    ::= { shelfCnfgObjects 27  }

shelfCnfgFBTC OBJECT-TYPE
    SYNTAX      INTEGER{
                none(1),
                fbtc(2),
                fbtcPPDPolicing(3)
     }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "fbtc           - FBTC on CLP thresholds.
                fbtcPPDPolicing - FBTC on the thresholds and policing.
                FBTC (Frame Based Traffic Control) is a method of
                discarding whole or partial AAL5 frames. The node-level
                configuration is applicable for the BXM cards only. 
                fbtcPPDPolicing is available for the BXM cards
                which support PPD (Partial Packet Discard) on policing.
                FBTC is always on thresholds only for the BXM cards
                which do not support the feature regardless of
                which option is selected on the node.
                The FBTC flag (object atmEndptFGCRA) of an AAL5
                connection can overwrite the node-level option.
                E.g., setting atmEndptFGCRA to disable, will deactivate
                all of the FBTC algorithms on the connection. However,
                the cell policing will be still applied to the connection.
                When atmEndptFGCRA is enabled on the BXM connection, FBTC 
                will be based on the option set on the node."
    --DEFAULT   get-function get_shelfcnfg_%t
    ::= { shelfCnfgObjects 28  }

shelfCnfgSerialLeadTypeIndex OBJECT-TYPE
    SYNTAX      INTEGER (1..12)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The index represents the possible lead types of a serial port
                 in the HDM and LDM cards. The lead types having the same
                 index is monitored on the LDM and HDM cards for lead state
                 change. This object is valid for IGX, not for BPX.
                 A value of -1 is returned for BPX.
                 Following table shows the possible input lead lead types on
                 HDM and LDM and the corresponding indices:
================================================================================
|      |       LDM       |  HDM/SDI-RS232  |  HDM/SDI-RS449  |   HDM/SDI-V35   |
|      |=======================================================================|
|index |   DCE  |   DTE  |   DCE  |   DTE  |   DCE  |   DTE  |   DCE  |   DTE  |
|======|========|========|========|========|========|========|========|========|
|   1  |        |        |        |TST/25  |IS/28   |SB/36   |        |        |
|   2  |        |        |LL/18   |RI/22   |LL/10   |IC/15   |        |RI/J    |
|   3  |DTR/20  |DSR/6   |DTR/20  |DSR/6   |TR/12&30|DM/11&29|DTR/H   |DSR/E   |
|   4  |RTS/4   |CTS/5   |RTS/4   |CTS/5   |RS/7&25 |CS/9&27 |RTS/C   |CTS/D   |
|   5  |        |        |STxD/14 |SRxD/16 |        |        |        |        |
|   6  |        |        |RL/21   |        |RL/14   |TM/18   |        |TM/K    |
|   7  |        |DCD/8   |        |DCD/8   |NS/34   |RR/13&31|        |DCD/F   |
|   8  |        |        |SRTS/19 |SCTS/13 |        |        |        |        |
|   9  |        |        |        |SDCD/12 |        |        |        |        |
|   10 |        |        |SF/23   |SI/23   |SF/16   |SI/2    |        |        |
|   11 |        |        |        |        |        |SQ/33   |        |        |
|   12 |        |        |***/11  |QM/11   |SS/32   |        |        |        |
================================================================================
                 Based on the card type (LDM, HDM RS232, HDM RS449 or HDM V35),
                 and the role of the port (DTE or DCE), for a given index
                 actual lead types may be different from port to port.
                 For example, for a 4-port LDM, if port 1 is DCE and index = 3,
                 firmware is  monitoring DTR (pin 20). If port 2 is DTE,
                 firmware is monitoring DSR (pin 6). If the lead type is space,
                 no lead is monitored on the card.
                "
    --DEFAULT   get-function get_shelfcnfg_%t
    ::= { shelfCnfgObjects 29  }

shelfCnfgSerialLeadMonitorTimer OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The value indicates the interval for the firmwre in HDM and 
                 LDM to monitor the lead state change. The default
                 value is 5 seconds. The valid values to monitor the lead
                 are 5 to 255 seconds. A value of 0 indicates that the lead
                 is not monitored.  The physical lead on each port is base
                 on the front card type, backcard type and the
                 shelfCnfgSerialLeadTypeIndex object."
    --DEFAULT   get-function get_shelfcnfg_%t
    ::= { shelfCnfgObjects 30  }

shelfCnfgSystemTime  OBJECT-TYPE
    SYNTAX      DisplayString (SIZE (19))
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This object provides the system date and time.
                 The Network Manager can set the system time, using
                 this object.  Reading this object returns the system
                 date and time in the format MM/DD/YY HH:MM:SS.  If
                 the system date or time is not set or invalid,
                 the string Date/Time Not Set is returned."
    --DEFAULT   get-function get_shelfcnfg_%t
    --DEFAULT   test-function test_shelfcnfg
        ::= { shelfCnfgObjects 31  }

--
-- The following objects are associated with the switchShelf
-- information branch.  These objects are tabular variables
-- utilized by the network manager to manage the switch shelf
-- card cage information. The table is indexed by slot.
-- The objects in this table can be grouped into five categories:
-- a. Card Y-redundancy information
-- b. Card status
-- c. Front card information
-- d. Back card information
-- e. Processor card-specific information (applicable only to processor cards)
--

shelfSlotInfoTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF ShelfSlotInfoEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "Switch slot information."
    --DEFAULT   test-function   test_shelfslottable
    --DEFAULT   next-function   next_shelfslottable
    --DEFAULT   get-function    get_shelfslottable_%t
        ::= { shelfInfoObjects 1  }
 
shelfSlotInfoEntry OBJECT-TYPE
    SYNTAX      ShelfSlotInfoEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A general slot information entry."
    INDEX   { slotIndex }
        ::= { shelfSlotInfoTable 1  }
 
ShelfSlotInfoEntry ::=
    SEQUENCE {
        slotIndex           INTEGER,
        slotCardYred        INTEGER,
        slotCardYredSlot    INTEGER,
        slotCardStatus      INTEGER,
        slotCardFail        INTEGER,
        slotCardFailInt     INTEGER,
        slotCardStFail      INTEGER,
        slotCardStFailInt   INTEGER,
        slotCardBusFail     INTEGER,
        slotFrontType       INTEGER,
        slotFrontSerial     DisplayString,
        slotBackInstalled   INTEGER,
        slotBackType        INTEGER,
        slotBackSerial      DisplayString,
        slotCardRAMId       DisplayString,
        slotCardROMId       DisplayString,
        slotCardBRAMId      DisplayString,
        slotCardBOOTId      DisplayString,
        slotCardRAMSize     INTEGER,
        slotCardFEPROMSize  INTEGER,
        slotCardBRAMSize    INTEGER,
        slotCardFrontRev    DisplayString,
        slotCardBackRev     DisplayString,
        slotCardActivateTime INTEGER,
        
        slotFrontNumPort    INTEGER,
        slotFrontQueue      INTEGER,
        slotFrontLnFormat   INTEGER,
        slotFrontChCount    INTEGER,
        
        slotBackNumPort     INTEGER,
        slotBackLnFormat    INTEGER,
        slotBackSonetMode   INTEGER,
        
        slotFSTSupport      INTEGER,
        slotCardMuxBusUtil  INTEGER,
        slotCardFrontName   DisplayString,

        slotCardMinReqBusBWCell    INTEGER,
        slotCardMaxPortBusBW       INTEGER,
        slotCardAvgUsedBusBWCell   INTEGER,
        slotCardUsedPeakBusBWCell  INTEGER,
        slotCardAllocBusUBU        INTEGER,
        slotCardTrunkPorts         INTEGER,
        slotCardMinBusUBU          INTEGER,
        slotCardMinReqBusBWFpkt    INTEGER,
        slotCardAvgUsedBusBWFpkt   INTEGER,
        slotCardUsedPeakBusBWFpkt  INTEGER
    }


slotIndex OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The slot number." 
        ::= { shelfSlotInfoEntry 1  }

slotCardYred OBJECT-TYPE
    SYNTAX      INTEGER {
                primary   (1),
                secondary (2),
                null      (3)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The card Y-redundancy status." 
        ::= { shelfSlotInfoEntry 2  }

slotCardYredSlot OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The associated slot for this card's Y-redundancy. 
                 This object is
                 1. Secondary slot index - if the slot is a primary slot.
                 2. Primary slot index - if the slot is a secondary slot.
                 3. Ignored - if the slot is null." 
        ::= { shelfSlotInfoEntry 3  }

slotCardStatus OBJECT-TYPE
    SYNTAX      INTEGER{
                empty         (1),
                disabled      (2),
                standby       (3),
                active        (4),
                failed        (5),
                stbypccupdt   (6),
                ucstatus      (7),
                unavailable   (8),
                downloading   (9),
                downloader   (10),
                downloaded   (11),
                frozen       (12),
                mismatch     (13),
                fwdnldfailed (14),
                program      (15),
                upgrading    (16),
                upgraded     (17),
                hwerr        (18),
                testcard     (19),
                backcardmissing(60)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The current card status. If a front card is active but
                 its back card is removed, backcardmissing(60) is returned.
                 In case of BCC, and NPM cards, active(4) is returned 
                 regardless of their back card status." 
        ::= { shelfSlotInfoEntry 4  }

slotCardFail OBJECT-TYPE
    SYNTAX      INTEGER{
                false(1),
                true(2)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The card failed flag." 
        ::= { shelfSlotInfoEntry 5  }

slotCardFailInt OBJECT-TYPE
    SYNTAX      INTEGER{
                false(1),
                true(2)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The card failed intermittently flag." 
        ::= { shelfSlotInfoEntry 6  }

slotCardStFail OBJECT-TYPE
    SYNTAX      INTEGER{
                false(1),
                true(2)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The card self-test failed flag."
        ::= { shelfSlotInfoEntry 7  }
 
slotCardStFailInt OBJECT-TYPE
    SYNTAX      INTEGER{
                false(1),
                true(2)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The card self-test failed intermittently 
                 flag."
        ::= { shelfSlotInfoEntry 8  }

slotCardBusFail OBJECT-TYPE
    SYNTAX      INTEGER{
                false(1),
                true(2)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION  "The card bus failed flag."
        ::= { shelfSlotInfoEntry 9  }

slotFrontType OBJECT-TYPE
    SYNTAX      INTEGER{
                empty    (1),
                pcc      (2),
                vdp      (3),
                txr      (4),
                pic      (5),
                vcd      (6),
                vdpvcd   (7),
                powerSupplyMonitor(8),
                powersupply(9),
                sdp      (10),
                ipxBslot (11),
                mt3T3    (12),
                adpSDI   (13),
                txr2     (14),
                xdp      (15),
                ldp      (16),
                xdpsdi   (17),
                ldpldi   (18),
                sdi      (19),
                ldi      (20),
                fdp      (21),
                cip      (22),
                ntc      (23),
                uback    (24),
                uni      (25),
                frp      (26),
                fri      (27),
                frpFRI   (28),
                mt3      (29),
                cdp      (30),
                e1T1     (31),
                atm      (32),
                npc      (33),
                arc      (34),
                ait      (35),
                ftc      (36),
                fpc      (37),
                ufm1     (38),
                ufm1U    (39),
                btmHP    (40),
                uvm      (41),
                uxm      (42),
                bcc      (102),
                asm      (103),
                bniT3    (104),
                bniE3    (105),
                mfrp     (106),
                asiT3    (107),
                asiE3    (108),
                asi0T3   (109),
                asi0E3   (110),
                bniOC3   (111),
                asiOC3   (112),
                bslot    (113),
                bcc3     (114),
                bxm      (118),
                hdm      (201),
                hdmHDI   (202),
                ldm      (203),
                ldmLDI   (204),
                hdi      (205),
                ntm      (206),
                frm      (207),
                frmFRI   (208),
                cvm      (209),
                npm      (210),
                arm      (211),
                btm      (212),
                ftm      (213),
                unknown  (256)
        } 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The front card type."
        ::= { shelfSlotInfoEntry 10  }
        
slotFrontSerial OBJECT-TYPE
    SYNTAX      DisplayString 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The front card serial number."
        ::= { shelfSlotInfoEntry 11  }

slotBackInstalled OBJECT-TYPE
    SYNTAX      INTEGER{
                false(1),
                true(2)
    } 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The flag indicating if the back card is installed."
        ::= { shelfSlotInfoEntry 12  }

slotBackType OBJECT-TYPE
    SYNTAX      INTEGER{
                empty     (1),
                rs232     (2),
                rs449     (3),
                v35       (4),
                rs232D    (5),
                rs2328    (6),
                rs2324    (7),
                friV35    (8),
                e1        (9),
                t1        (10),
                pccb      (11),
                dds4      (12),
                dds8      (13),
                sr        (14),
                mt3       (15),
                friE1     (16),
                friT1     (17),
                j1        (18),
                y1        (19),
                t3        (20),
                e3        (21),
                friX21    (22),
                ari       (23),
                aitT3     (24),
                aitE3     (25),
                fpcV35    (26),
                fpcX21    (27),
                fpcE1     (28),
                fpcT1     (29),
                aitE2     (30),
                aitHSSI   (31),
                ufm1T1DB15(32),
                ufm1E1DB15(33),
                ufm1E1BNC (34),
                ufm1UHSSI (35),
                ufm1UV35  (36),
                ufm1UX21  (37),
                uai1T3    (38),
                uai1E3    (39),
                t1-2      (40),
                e1-2      (41),
                j1-2      (42),
                uaiT1     (43),
                uaiE1     (44),
                uaiOC3    (45),
                btiE1     (46),
                uaiT3     (47),
                uaiE3     (48),
                lmBCC     (102),
                lmAS      (103),
                t33       (104),
                e33       (105),
                t32       (106),
                e32       (107),
                smf2      (108),
                mmf2      (109),
                bcclm2    (110),
                stm1      (111),
                utp       (112),
                stp       (113),
                lmbxm     (114),
                smflr     (115),
                unknown   (116),
                init      (117),
                btmT3     (201),
                btmE3     (202),
                btmE2     (203),
                btmHSSI   (204),
                uaiE1BNC  (205)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The back card type.
                 ALM-A/B:  uai1T3 or uai1E3
                 UXM:      uaiT1,uaiE1,uaiT3,uaiE3, or uaiOC3.
                           Note: uaiE1 or uaiT1 is used for DB15 type of
                                 connectors. uaiE1BNC is for BNC type of 
                                 connectors."
        ::= { shelfSlotInfoEntry 13  }

slotBackSerial OBJECT-TYPE
    SYNTAX      DisplayString 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The back card serial number."
        ::= { shelfSlotInfoEntry 14  }

slotCardRAMId OBJECT-TYPE
    SYNTAX      DisplayString 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The RAM version ID of the processor card. Since this object 
                 is applicable only to processor cards, for other card types 
                 a null string will be returned."
        ::= { shelfSlotInfoEntry 15  }

slotCardROMId OBJECT-TYPE
    SYNTAX      DisplayString 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The ROM version ID of the processor card. Since this object 
                 is applicable only to processor cards, for other card types 
                 a null string will be returned."
        ::= { shelfSlotInfoEntry 16  }

slotCardBRAMId OBJECT-TYPE
    SYNTAX      DisplayString 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The BRAM version ID of the processor card. Since this object 
                 is applicable only to processor cards, for other card types 
                 a null string will be returned."
        ::= { shelfSlotInfoEntry 17  }

slotCardBOOTId OBJECT-TYPE
    SYNTAX      DisplayString 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The BOOT ID of the processor card. Since this object 
                 is applicable only to processor cards, for other card types
                 a null string will be returned."
        ::= { shelfSlotInfoEntry 18  }

slotCardRAMSize OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The RAM size of the processor card in Mbytes. Since this 
                 object is applicable only to processor cards, for other 
                 card types -1 will be returned."
        ::= { shelfSlotInfoEntry 19  }

slotCardFEPROMSize OBJECT-TYPE
    SYNTAX      INTEGER{
                meg4   (1),
                meg3   (2),
                meg2   (3),
                unknown(4),
                meg8   (5)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Flash EPROM size of the processor card in Mbytes. Since 
                 this object is applicable only to processor cards, for 
                 other card types -1 will be returned."
        ::= { shelfSlotInfoEntry 20  }

slotCardBRAMSize OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The BRAM size of the processor card in Mbytes. Since this 
                 object is applicable only to processor cards, for other 
                 card types -1 will be returned."
        ::= { shelfSlotInfoEntry 21  }

slotCardFrontRev OBJECT-TYPE
    SYNTAX      DisplayString 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The hardware and firmware revision of the front card."
        ::= { shelfSlotInfoEntry 22  }

slotCardBackRev OBJECT-TYPE
    SYNTAX      DisplayString 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The hardware revision of the back card."
        ::= { shelfSlotInfoEntry 23  }

slotCardActivateTime  OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This gives the timestamp of the last time the card was reset."
        ::= { shelfSlotInfoEntry 24 }

slotFrontNumPort OBJECT-TYPE
    SYNTAX      INTEGER (0..12)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Number of ports supported by the front card. 
                 . Dependency:
                   . This object is for BXM only. 0 is returned for 
                     other card types.
                "
        ::= { shelfSlotInfoEntry 25  }

slotFrontQueue OBJECT-TYPE
    SYNTAX      INTEGER (1..256000) 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Size of the Egress/Ingress Queue memory available on the card.
                 . Unit: bytes
                 . Dependency:
                   . This object is for BXM and UXM only. Please disregard 
                     it for other card types.
                "
        ::= { shelfSlotInfoEntry 26  }

slotFrontLnFormat OBJECT-TYPE
    SYNTAX      INTEGER{
                null    (1),
                e1      (2),
                t1      (3),
                subrate (4),
                t3      (5),
                e3      (6),
                oc3     (7),
                oc12    (8),
                t1frp   (9),
                e2     (10),
                hssi   (11),
                j1     (12)
                }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Front card line format.
                 . Dependency:
                   . This object is for BXM only. Please disregard it for 
                     other card types.
                "
        ::= { shelfSlotInfoEntry 27  }

slotFrontChCount OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Number of Channels supported by the front card. 
                 . Dependency:
                   . This object is for BXM and UXM only. Please disregard it for 
                     other card types.
                "
        ::= { shelfSlotInfoEntry 28  }
        
slotBackNumPort OBJECT-TYPE
    SYNTAX      INTEGER (1..12)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Number of ports supported by the back card. 
                "
        ::= { shelfSlotInfoEntry 29  }
        
slotBackLnFormat OBJECT-TYPE
    SYNTAX      INTEGER{
                null    (1),
                e1      (2),
                t1      (3),
                subrate (4),
                t3      (5),
                e3      (6),
                oc3     (7),
                oc12    (8),
                bxmt3e3 (9),
                e2      (10),
                hssi    (11)
                } 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Backcard line format"
        ::= { shelfSlotInfoEntry 30  }

slotBackSonetMode OBJECT-TYPE
    SYNTAX      INTEGER{
                smf  (1),
                mmf  (2),
                smflr(3),
                null (4),
                snm  (5),
                stm1e(6),
                xlr  (7)
                } 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Sonet mode, where
                 smf   - single-mode format
                 mmf   - multi-mode format
                 smflr - single-mode format long reach
                 snm   - single and multi-mode format
                 stm1e - stm1 electrical
                 xlr   - extra long reach format
                 . For non - sonet mode back cards, value is null (4)
                "
        ::= { shelfSlotInfoEntry 31  }
        
slotFSTSupport OBJECT-TYPE
    SYNTAX      INTEGER{
                no   (1),
                yes  (2)
                } 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "If the card support ForeSight. Line card only."
        ::= { shelfSlotInfoEntry 32  }

slotCardMuxBusUtil  OBJECT-TYPE
    SYNTAX      INTEGER (-1..250)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The percentage of the Mux bus utilization. This object is defined
                 for FRP, FRM and UFM module on IPX/IGX only. For the other cards,
                 the utilization percentage is -1."
    --DEFAULT   view-mask       IPX_VIEW
    --DEFAULT   test-function   test_muxbusutil
    --DEFAULT   get-function    get_muxbusutil
        ::= { shelfSlotInfoEntry 33 }

slotCardFrontName OBJECT-TYPE
    SYNTAX      DisplayString
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The front card name in ascii string format."
        ::= { shelfSlotInfoEntry 34  }

slotCardMinReqBusBWCell  OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Minimum Required Cell Bus Bandwidth."
        ::= { shelfSlotInfoEntry 35  }

slotCardMaxPortBusBW  OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The Maximum PortBus Bandwidth. This depends
                 * on the type of back card. "
        ::= { shelfSlotInfoEntry 36  }

slotCardAvgUsedBusBWCell   OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Average Used Cell Bus Bandwidth."
        ::= { shelfSlotInfoEntry 37  }

slotCardUsedPeakBusBWCell OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Used Cell Peak Bus Bandwidth."
        ::= { shelfSlotInfoEntry 38  }

slotCardAllocBusUBU  OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The Allocated Bus UBUs."
    --DEFAULT   test-function   test_cardallocbusbw
        ::= { shelfSlotInfoEntry 39  }

slotCardTrunkPorts     OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The # of Trunks supported on this card.
                * This is supported only on UXM cards."
    --DEFAULT   test-function   test_cardtrunkports
        ::= { shelfSlotInfoEntry 40  }

slotCardMinBusUBU  OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The Minimum Required Bus UBUs."
    --DEFAULT   test-function   test_cardallocbusbw
        ::= { shelfSlotInfoEntry 41  }

slotCardMinReqBusBWFpkt  OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Minimum Required FastPacket Bus Bandwidth."
        ::= { shelfSlotInfoEntry 42  }

slotCardAvgUsedBusBWFpkt   OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Average Used FastPacket Bus Bandwidth."
        ::= { shelfSlotInfoEntry 43  }

slotCardUsedPeakBusBWFpkt OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Used FastPacket Peak Bus Bandwidth."
        ::= { shelfSlotInfoEntry 44  }

-- The following describes the MIB variables for the ds1LineTable. 
-- This table provides the manager a view of the ds1 interfaces 
-- on the switch. 
  
ds1LineTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF Ds1LineEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A list of ds1 interfaces"
    --DEFAULT   test-function test_ds1linetable
    --DEFAULT   next-function next_ds1linetable
    --DEFAULT   get-function  get_ds1linetable_%t
    --DEFAULT   view-mask       IPX_VIEW
        ::= { switchMedia 1  }
  
ds1LineEntry OBJECT-TYPE
    SYNTAX      Ds1LineEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A interface entry"
    INDEX       { switchIfIndex }
        ::= { ds1LineTable 1  }
  
Ds1LineEntry ::=
    SEQUENCE {
        ds1LineStatus       INTEGER,
        ds1LineAlmType      INTEGER,
        ds1LineType         INTEGER,
        ds1LineCode         INTEGER,
        ds1ClkSource        INTEGER
        }

ds1LineStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                clear(1),
                minor(2),
                major(3),
                down(4),
                deact(5)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Alarms state for logical interface table row."
        ::= { ds1LineEntry 1  }
 
ds1LineAlmType OBJECT-TYPE
    SYNTAX     INTEGER {
               lineAlmTypeOTHER   (1),   -- Unused/unknown alarm type 
               lineAlmTypeOK      (2),   -- Line OK 
               lineAlmTypeDEACT   (3),   -- Line Deactivated 
               lineAlmTypeACT     (4),   -- Line Activated
               lineAlmTypeBPV     (5),   -- BPV Alarm 
               lineAlmTypeFS      (6),   -- FS Alarm 
               lineAlmTypeFER     (7),   -- FER Alarm 
               lineAlmTypePKOOF   (8),   -- Packet OOF Alarm 
               lineAlmTypeOOF     (9),   -- OOF Alarm 
               lineAlmTypeLOS     (10),  -- LOS Alarm 
               lineAlmTypeBADCLK  (11),  -- BAD CLK Alarm 
               lineAlmTypeCRC     (12),  -- CRC Alarm 
               lineAlmTypePKCRC   (13),  -- HE Alarm (Packet CRC Errors) 
               lineAlmTypeOOM     (14),  -- OOM Alarm 
               lineAlmTypeAIS     (15),  -- AIS Alarm 
               lineAlmTypeLCV     (16),  -- Line Code Violation Alarm 
               lineAlmTypePCVL    (17),  -- P-bit Parity Code Violations 
               lineAlmTypePCVP    (18),  -- C-bit Parity Code Violations 
               lineAlmTypeBCV     (19),  -- PLCP BIP-8 Code Violations 
               lineAlmTypeATMCRC  (20),  -- ATM Cell Header CRC Errors 
               lineAlmTypePLCPOOF (21),  -- PLCP OOF 
               lineAlmTypeCDMISS  (22),  -- Card Missing 
               lineAlmTypeNET     (23)   -- Network Failure
               }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This object contains alarm status information for 
                 the alarm state of a trunk or line."
        ::= { ds1LineEntry 2  }
 
ds1LineType OBJECT-TYPE
    SYNTAX      INTEGER {
                other(1),
                ds1ESF(2),
                ds1D4(3),
                ds1E1(4),
                ds1E1CRC(5)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The type of interface. This object is used to
                 provide information about the ds1 type: T1, E1.
                 Values are from the ds1 MIB in rfc1406."
        ::= { ds1LineEntry 3  }
 
ds1LineCode OBJECT-TYPE
    SYNTAX      INTEGER {
                ds1JBZS(1),
                ds1B8ZS(2),
                ds1HDB3(3),
                ds1ZBTSI(4),
                ds1AMI(5),
                other(6),
                ds1ZCS(7)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Line coding for logical interface table row.
                 Most values are from the ds1 MIB in rfc1406."
        ::= { ds1LineEntry 4  }
 
ds1ClkSource OBJECT-TYPE
    SYNTAX      INTEGER {
                loopTiming(1),
                localTiming(2),
                throughTiming(3)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Trnansmit clock source for logical interface table row.
                 Values are from the ds1 MIB in rfc1406."
        ::= { ds1LineEntry 5  }
 
--
-- The following describes the MIB variables for the ds3LineTable. 
-- This table provides the manager a view of the ds3 interfaces 
-- on the switch and supports Set functions equivalent to CLI commands 
-- . addlnloclp
-- . addlnlocrmtlp
-- . dellnlp 
-- on T3/E3 lines or trunks. Described below are the objects and correct 
-- values to be given for each case:
--
--. addlnloclp
--    . ds3LineLclLpbk = enabled(1)
--  
--. addlnlocrmtlp 
--    . ds3LineLclRmtLpbk = enabled(1)
--    
--. dellnlp  
--    . Local loop
--      . ds3LineLclLpbk    = disabled(2) 
--    . Local remote loop
--      . ds3LineLclRmtLpbk = disabled(2)
--  

ds3LineTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF Ds3LineEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A list of ds3 interfaces"
    --DEFAULT   test-function test_ds3linetable
    --DEFAULT   next-function next_ds3linetable
    --DEFAULT   get-function  get_ds3linetable_%t
        ::= { switchMedia 2  }
  
ds3LineEntry OBJECT-TYPE
    SYNTAX      Ds3LineEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A interface entry"
    INDEX       { switchIfIndex }
        ::= { ds3LineTable 1  }
  
Ds3LineEntry ::=
    SEQUENCE {
        ds3LineStatus       INTEGER,
        ds3LineAlmType      INTEGER,
        ds3LineType         INTEGER,
        ds3LineCode         INTEGER,
        ds3ClkSource        INTEGER,
        ds3LineLclLpbk      INTEGER,
        ds3LineLclRmtLpbk   INTEGER
        }

ds3LineStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                clear(1),
                minor(2),
                major(3),
                down(4),
                deact(5)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Alarms state for logical interface table row."
        ::= { ds3LineEntry 1  }
 
ds3LineAlmType OBJECT-TYPE
    SYNTAX     INTEGER {
               lineAlmTypeOTHER   (1),   -- Unused/unknown alarm type 
               lineAlmTypeOK      (2),   -- Line OK 
               lineAlmTypeDEACT   (3),   -- Line Activated  
               lineAlmTypeACT     (4),   -- Line Deactivated 
               lineAlmTypeBPV     (5),   -- BPV Alarm 
               lineAlmTypeFS      (6),   -- FS Alarm 
               lineAlmTypeFER     (7),   -- FER Alarm 
               lineAlmTypePKOOF   (8),   -- Packet OOF Alarm 
               lineAlmTypeOOF     (9),   -- OOF Alarm 
               lineAlmTypeLOS     (10),  -- LOS Alarm 
               lineAlmTypeBADCLK  (11),  -- BAD CLK Alarm 
               lineAlmTypeCRC     (12),  -- CRC Alarm 
               lineAlmTypePKCRC   (13),  -- HE Alarm (Packet CRC Errors) 
               lineAlmTypeOOM     (14),  -- OOM Alarm 
               lineAlmTypeAIS     (15),  -- AIS Alarm 
               lineAlmTypeLCV     (16),  -- Line Code Violation Alarm 
               lineAlmTypePCVL    (17),  -- P-bit Parity Code Violations 
               lineAlmTypePCVP    (18),  -- C-bit Parity Code Violations 
               lineAlmTypeBCV     (19),  -- PLCP BIP-8 Code Violations 
               lineAlmTypeATMCRC  (20),  -- ATM Cell Header CRC Errors 
               lineAlmTypePLCPOOF (21),  -- PLCP OOF 
               lineAlmTypeCDMISS  (22),  -- Card Missing 
               lineAlmTypeNET     (23)   -- Network Failure
               }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This object contains alarm status information for 
                 the alarm state of a trunk or line."
        ::= { ds3LineEntry 2  }
 
ds3LineType OBJECT-TYPE
    SYNTAX      INTEGER {
                ds3other(1),
                ds3M23(2),
                ds3SYNTRAN(3),
                ds3CbitPar(4),
                ds3ClearChan(5),
                e3other(6),
                e3Framed(7),
                e3Plcp(8)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The type of interface. This object is used to
                 provide information about the ds3 type: T3, E3.
                 Values are from the ds3 MIB in rfc1407."
        ::= { ds3LineEntry 3  }
 
ds3LineCode OBJECT-TYPE
    SYNTAX      INTEGER {
                ds3Other(1),
                ds3B3ZS(2),
                e3HDB3(3)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The type of ZCS coding used on this ds3 line.
                 Values are from the ds3 MIB in rfc1407."
        ::= { ds3LineEntry 4  }

ds3ClkSource OBJECT-TYPE
    SYNTAX      INTEGER {
                loopTiming(1),
                localTiming(2),
                throughTiming(3)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Clock source for logical interface table row.
                 Values are from the ds3 MIB in rfc1407."
        ::= { ds3LineEntry 5  }
 
  ds3LineLclLpbk OBJECT-TYPE
      SYNTAX      INTEGER {
                  enable(1),
                  disable(2)
          }
      ACCESS      read-write
      STATUS      mandatory
      DESCRIPTION "Line local loopback.
                   Get - show the current local loopback status.
                   Set - enable or disable the local loopback. 
                   Note that ds3LineLclLpbk and  ds3LineLclRmtLpbk
                   cannot be enabled at the same time."
      --DEFAULT   test-function test_line_lpbk
          ::= { ds3LineEntry 6  }
 
  ds3LineLclRmtLpbk OBJECT-TYPE
      SYNTAX      INTEGER {
                  enable(1),
                  disable(2)
          }
      ACCESS      read-write
      STATUS      mandatory
      DESCRIPTION "Line local remote loopback.
                   Get - show the current local remote loopback status.
                   Set - enable or disable the remote loopback. 
                   Note that ds3LineLclLpbk and  ds3LineLclRmtLpbk
                   cannot be enabled at the same time."
      --DEFAULT   test-function test_line_lpbk
          ::= { ds3LineEntry 7  }
 

--
-- The following describes the MIB variables for the sonetIfTable. 
-- This table supports Set functions equivalent to CLI commands 
-- addlnloclp, addlnlocrmtlp, and dellnlp on sonet lines or trunks
-- and supports Set functions equivalent to CLI commands 
-- . addlnloclp
-- . addlnlocrmtlp
-- . dellnlp 
-- on OC3/12 lines or trunks. Described below are the objects and correct 
-- values to be given for each case:
--
--. addlnloclp
--    . sonetIfLclLpbk = enabled(1)
--  
--. addlnlocrmtlp 
--    . sonetIfLclRmtLpbk = enabled(1)
--    
--. dellnlp  
--    . Local loop
--      . sonetIfLclLpbk    = disabled(2) 
--    . Local remote loop
--      . sonetIfLclRmtLpbk = disabled(2)
--  

sonetIfTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF SonetIfEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A list of sonet interfaces"
    --DEFAULT   test-function test_sonetiftable
    --DEFAULT   next-function next_sonetiftable
    --DEFAULT   get-function get_sonetiftable_int
    --DEFAULT   view-mask       BPX_VIEW | IGX_VIEW
        ::= { switchMedia 3  }
  
sonetIfEntry OBJECT-TYPE
    SYNTAX      SonetIfEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A interface entry"
    INDEX       { switchIfIndex }
        ::= { sonetIfTable 1  }
  
SonetIfEntry ::=
    SEQUENCE {
        sonetIfStatus       INTEGER,
        sonetIfAlmType      INTEGER,
        sonetIfType         INTEGER,
        sonetIfFrame        INTEGER,
        sonetIfHiSpeed      INTEGER,
        sonetIfClkSource    INTEGER,
        sonetIfLclLpbk      INTEGER,
        sonetIfLclRmtLpbk   INTEGER
    }

sonetIfStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                clear(1),
                minor(2),
                major(3),
                down(4),
                deact(5)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Alarms state for logical interface table row."
        ::= { sonetIfEntry 1  }
 
sonetIfAlmType OBJECT-TYPE
    SYNTAX     INTEGER {
               lineAlmTypeOTHER   (1),   -- Unused/unknown alarm type 
               lineAlmTypeOK      (2),   -- Line OK 
               lineAlmTypeDEACT   (3),   -- Line Activated  
               lineAlmTypeACT     (4),   -- Line Deactivated 
               lineAlmTypeBPV     (5),   -- BPV Alarm 
               lineAlmTypeFS      (6),   -- FS Alarm 
               lineAlmTypeFER     (7),   -- FER Alarm 
               lineAlmTypePKOOF   (8),   -- Packet OOF Alarm 
               lineAlmTypeOOF     (9),   -- OOF Alarm 
               lineAlmTypeLOS     (10),  -- LOS Alarm 
               lineAlmTypeBADCLK  (11),  -- BAD CLK Alarm 
               lineAlmTypeCRC     (12),  -- CRC Alarm 
               lineAlmTypePKCRC   (13),  -- HE Alarm (Packet CRC Errors) 
               lineAlmTypeOOM     (14),  -- OOM Alarm 
               lineAlmTypeAIS     (15),  -- AIS Alarm 
               lineAlmTypeLCV     (16),  -- Line Code Violation Alarm 
               lineAlmTypePCVL    (17),  -- P-bit Parity Code Violations 
               lineAlmTypePCVP    (18),  -- C-bit Parity Code Violations 
               lineAlmTypeBCV     (19),  -- PLCP BIP-8 Code Violations 
               lineAlmTypeATMCRC  (20),  -- ATM Cell Header CRC Errors 
               lineAlmTypePLCPOOF (21),  -- PLCP OOF 
               lineAlmTypeCDMISS  (22),  -- Card Missing 
               lineAlmTypeNET     (23)   -- Network Failure
               }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This object contains alarm status information for 
                 the alarm state of a trunk or line."
        ::= { sonetIfEntry 2  }
 
sonetIfType OBJECT-TYPE
    SYNTAX      INTEGER {
                sonetOther(1),
                sonetShortSingleMode(2),
                sonetLongSingleMode(3),
                sonetMultiMode(4),
                sonetCoax(5),
                sonetUTP(6),
                sonetXLongSingleMode(7)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "This variable describes the line type for
                 this interface. The line types are
                 Short and Long Range.
                 Values (1 - 6) are from object sonetMediumLineType
                 in the SONET MIB in rfc1595. The value of 7 is
                 defined for eXtra Long Range Sonet mode"

        ::= { sonetIfEntry 3  }
 
sonetIfFrame OBJECT-TYPE
    SYNTAX      INTEGER {
                sonetOther(1),
                sonetSTS-3C(2),
                sonetSTM-1(3)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Line Framing standard for logical interface table row."
        ::= { sonetIfEntry 4  }
 
sonetIfHiSpeed OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Line speed for logical interface table row
                 in units of Megabits per second."
        ::= { sonetIfEntry 5  }

sonetIfClkSource OBJECT-TYPE
    SYNTAX      INTEGER {
                loopTiming(1),
                localTiming(2),
                throughTiming(3)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Clock source for logical interface table row.
                 Values are from the ds3 MIB in rfc1407."
        ::= { sonetIfEntry 6  }

  sonetIfLclLpbk OBJECT-TYPE
      SYNTAX      INTEGER {
                  enable(1),
                  disable(2)
          }
      ACCESS      read-write
      STATUS      mandatory
      DESCRIPTION "Line local loopback.
                   Get - show the current local loopback status.
                   Set - enable or disable the local loopback.
                   Note that sonetIfLclLpbk and  sonetIfLclRmtLpbk
                   cannot be enabled at the same time."
      --DEFAULT   test-function test_line_lpbk
         ::= { sonetIfEntry 7  }
 
  sonetIfLclRmtLpbk OBJECT-TYPE
      SYNTAX      INTEGER {
                  enable(1),
                  disable(2)
          }
      ACCESS      read-write
      STATUS      mandatory
      DESCRIPTION "Line local remote loopback.
                   Get - show the current local remote loopback status.
                   Set - enable or disable the local remote loopback. 
                   Note that sonetIfLclLpbk and  sonetIfLclRmtLpbk
                   cannot be enabled at the same time."
      --DEFAULT   test-function test_line_lpbk
          ::= { sonetIfEntry 8  }
          
--
-- The following describes the MIB variables for the ds1LineStatsTable. 
--

ds1LineStatsTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF Ds1LineStatsEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A list of DS1 line statistics objects."
    --DEFAULT   test-function test_ds1linestatstable
    --DEFAULT   next-function next_ds1linestatstable
    --DEFAULT   get-function  get_ds1linestatstable_%t
    --DEFAULT   view-mask     IPX_VIEW 
        ::= { switchMedia 4  }
  
ds1LineStatsEntry OBJECT-TYPE
    SYNTAX      Ds1LineStatsEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A interface entry"
    INDEX       { switchIfIndex }
        ::= { ds1LineStatsTable 1  }
  
Ds1LineStatsEntry ::=
    SEQUENCE {
        ds1StatsBpvs       Counter,
        ds1StatsFs         Counter,
        ds1StatsOofs       Counter,
        ds1StatsLoss       Counter,
        ds1StatsFers       Counter,
        ds1StatsCrcs       Counter,
        ds1StatsOoms       Counter,
        ds1StatsAis16s     Counter
    }

ds1StatsBpvs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Bipolar Violations. This statistics is 
                 not applicable for E1 lines." 
        ::= { ds1LineStatsEntry 1  }

ds1StatsFs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Frame Slip errors." 
        ::= { ds1LineStatsEntry 2  }

ds1StatsOofs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Out of frame errors." 
        ::= { ds1LineStatsEntry 3  }

ds1StatsLoss OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Loss of Signals errors." 
        ::= { ds1LineStatsEntry 4  }

ds1StatsFers OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Frame Bit errors." 
        ::= { ds1LineStatsEntry 5  }

ds1StatsCrcs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of line detection CRC errors." 
        ::= { ds1LineStatsEntry 6  }

ds1StatsOoms OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Out of Multi-Frames errors." 
        ::= { ds1LineStatsEntry 7  }

ds1StatsAis16s OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of All One in Time Slot 16 errors." 
        ::= { ds1LineStatsEntry 8  }


--
-- The following describes the MIB variables for the ds3LineStatsTable. 
--

ds3LineStatsTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF Ds3LineStatsEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A list of DS1 line statistics objects."
    --DEFAULT   test-function test_ds3linestatstable
    --DEFAULT   next-function next_ds3linestatstable
    --DEFAULT   get-function get_ds3linestatstable_%t
        ::= { switchMedia 5  }
  
ds3LineStatsEntry OBJECT-TYPE
    SYNTAX      Ds3LineStatsEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A interface entry"
    INDEX       { switchIfIndex }
        ::= { ds3LineStatsTable 1  }
  
Ds3LineStatsEntry ::=
    SEQUENCE {
        ds3StatsOofs      Counter,
        ds3StatsLoss      Counter,
        ds3StatsLcvs      Counter,
        ds3StatsCPcvs     Counter,
        ds3StatsPPcvs     Counter,
        ds3StatsPlcpBcvs  Counter,
        ds3StatsAtmCrcs   Counter,
        ds3StatsPktCrcs   Counter,
        ds3StatsPlcpOofs  Counter
    }

ds3StatsOofs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Out of frame errors." 
        ::= { ds3LineStatsEntry 1  }

ds3StatsLoss OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Loss of Signals errors." 
        ::= { ds3LineStatsEntry 2  }

ds3StatsLcvs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Line Code Violations." 
        ::= { ds3LineStatsEntry 3  }

ds3StatsCPcvs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of C-bit Parity Code Violations." 
        ::= { ds3LineStatsEntry 4  }

ds3StatsPPcvs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of P-bit Parity Code  Violations." 
        ::= { ds3LineStatsEntry 5  }

ds3StatsPlcpBcvs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of PLCP BIP-8 Code Violations." 
        ::= { ds3LineStatsEntry 6  }

ds3StatsAtmCrcs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of ATM Cell Header Checksum Errors." 
        ::= { ds3LineStatsEntry 7  }

ds3StatsPktCrcs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Packet Header CRC errors. This object
                 is not applicable (0) to BPX."
        ::= { ds3LineStatsEntry 8  }

ds3StatsPlcpOofs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of PLCP Out of Frame errors." 
        ::= { ds3LineStatsEntry 9  }

--
-- The following describes the MIB variables for the sonetStatsTable. 
--

sonetStatsTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF SonetStatsEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A list of Sonet line statistics objects."
    --DEFAULT   test-function test_sonetstatstable
    --DEFAULT   next-function next_sonetstatstable
    --DEFAULT   get-function get_sonetstatstable_%t
    --DEFAULT   view-mask       BPX_VIEW | IGX_VIEW
        ::= { switchMedia 6  }
  
sonetStatsEntry OBJECT-TYPE
    SYNTAX      SonetStatsEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A interface entry"
    INDEX       { switchIfIndex }
        ::= { sonetStatsTable 1  }
  
SonetStatsEntry ::=
    SEQUENCE {

        sonetStatsOofs          Counter,
        sonetStatsLoss          Counter,
        sonetStatsAtmCrcs       Counter,
        sonetStatsYelTcs        Counter,
        sonetStatsAisTcs        Counter,
        sonetStatsLocs          Counter,
        sonetStatsLops          Counter,
        sonetStatsPthAis        Counter,
        sonetStatsPthYels       Counter,
        sonetStatsSecBip8s      Counter,
        sonetStatsLnBip24s      Counter,
        sonetStatsLnFebes       Counter,
        sonetStatsPthBip8s      Counter,
        sonetStatsPthFebes      Counter,
        sonetStatsSecBip8Es     Counter,
        sonetStatsLnBip24Es     Counter,
        sonetStatsLnFebeEs      Counter,
        sonetStatsPthBip8Es     Counter,
        sonetStatsPthFebeEs     Counter,
        sonetStatsSecBip8Ses    Counter,
        sonetStatsSecSefs       Counter,
        sonetStatsLnBip24Ses    Counter,
        sonetStatsLnFebeSes     Counter,
        sonetStatsPthBip8Ses    Counter,
        sonetStatsPthFebeSes    Counter,
        sonetStatsLnUas         Counter,
        sonetStatsLnFarendUas   Counter,
        sonetStatsPthUas        Counter,
        sonetStatsPthFarendUas  Counter,
        sonetStatsHcsCrtblErrEs Counter
         
    }

sonetStatsOofs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Out of frame errors." 
        ::= { sonetStatsEntry 1  }

sonetStatsLoss OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Loss of Signals errors." 
        ::= { sonetStatsEntry 2  }

sonetStatsAtmCrcs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of ATM Cell Header Checksum Errors. This
                 object is not applicable (0) to BXM. " 
        ::= { sonetStatsEntry 3  }

sonetStatsYelTcs OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Yellow Transition counts. This is available for
                 BXM only."
        ::= { sonetStatsEntry 4}


sonetStatsAisTcs  OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of AIS Transition counts. This is available 
                 to BXM only."
        ::= { sonetStatsEntry 5}

sonetStatsLocs   OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Loss of Cell Delineation This is availale
                 to BXM only."
        ::= { sonetStatsEntry 6}

sonetStatsLops   OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Loss of Pointer. This is available 
                 for BXM cards only."
        ::= { sonetStatsEntry 7}

sonetStatsPthAis OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of OC3 Path AIS. This is available for 
                 BXM cards only"
        ::= { sonetStatsEntry 8}

sonetStatsPthYels OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of OC3 Path YEL. This is available for
                 BXM only."
        ::= { sonetStatsEntry 9}

sonetStatsSecBip8s OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Section BIP8. This is available for
                 BXM only."
        ::= { sonetStatsEntry 10}

sonetStatsLnBip24s OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Line BIP24. This is available for
                 BXM only."
        ::= { sonetStatsEntry 11}

sonetStatsLnFebes OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Line FEBE. This is available for
                 BXM only."
        ::= { sonetStatsEntry 12}

sonetStatsPthBip8s OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Section BIP8 errors on the line. This
                 is available for BXM only."
        ::= { sonetStatsEntry 13}


sonetStatsPthFebes OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Path FEBE. This is available for
                 BXM only."
        ::= { sonetStatsEntry 14}

sonetStatsSecBip8Es OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Section BIP8 Err. Secs. This available for
                 BXM only."
        ::= { sonetStatsEntry 15}

sonetStatsLnBip24Es OBJECT-TYPE
    SYNTAX     Counter
    ACCESS     read-only
    STATUS     mandatory
    DESCRIPTION "The number of Line BIP24 Err. Secs. This
                 is available for BXM only."
        ::= { sonetStatsEntry 16}


sonetStatsLnFebeEs OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Line FEBE Err. Secs.. This is available for
                 BXM only."
        ::= { sonetStatsEntry 17}

sonetStatsPthBip8Es  OBJECT-TYPE
    SYNTAX     Counter
    ACCESS     read-only
    STATUS     mandatory
    DESCRIPTION "The number of Path BIP8 Err. Secs. This
                 is available for BXM only."
        ::= { sonetStatsEntry 18}

sonetStatsPthFebeEs OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Line Unavailable Secs. This is available for
                 BXM only."
        ::= { sonetStatsEntry 19}

sonetStatsSecBip8Ses OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Line Unavailable Secs. This is available for
                 BXM only."
        ::= { sonetStatsEntry 20}

sonetStatsSecSefs OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " Section Sev. Err. Framing Secs. This is available for 
                  BXM cards only."
        ::= { sonetStatsEntry 21}

sonetStatsLnBip24Ses OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Line BIP24 Severely Err. Secs. This is available for
                 BXM only."
        ::= { sonetStatsEntry 22}

sonetStatsLnFebeSes OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Line FEBE Severely Err. Secs.. This is available for
                 BXM only."
        ::= { sonetStatsEntry 23}

sonetStatsPthBip8Ses OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Path BIP8 Severely Err. Secs. This is available for 
                 BXM only."
        ::= { sonetStatsEntry 24}

sonetStatsPthFebeSes OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Path FEBE Severely Err. Secs.. This is available for
                 BXM only."
        ::= { sonetStatsEntry 25}

sonetStatsLnUas OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Line Unavailable Secs. This is available for
                 BXM only."
        ::= { sonetStatsEntry 26}

sonetStatsLnFarendUas OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Line Farend Unavailable Secs. This is available for
                 BXM only."
        ::= { sonetStatsEntry 27}

sonetStatsPthUas OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Line Unavailable Secs. This is available for
                 BXM only."
        ::= { sonetStatsEntry 28}

sonetStatsPthFarendUas OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Path Unavailable Secs. This is available for
                 BXM only."
        ::= { sonetStatsEntry 29}

sonetStatsHcsCrtblErrEs OBJECT-TYPE
    SYNTAX     Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of HCS Correctable Error ES. This is available for
                 BXM only."
        ::= { sonetStatsEntry 30}


-- The following describes the MIB variables for the fpRoutingTrunks table. 

fpRoutingTrunks OBJECT-TYPE
    SYNTAX      SEQUENCE OF FpRteTrkEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A list of fpRoutingTrunks interfaces"
    --DEFAULT   test-function test_fprtetrktable
    --DEFAULT   next-function next_fprtetrktable
    --DEFAULT   get-function  get_fprtetrktable_%t
    --DEFAULT   view-mask       IPX_VIEW 
        ::= { trunkServiceObjects 1  }
  
fpRteTrkEntry OBJECT-TYPE
    SYNTAX      FpRteTrkEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A interface entry"
    INDEX       { switchIfIndex }
        ::= { fpRoutingTrunks 1  }
  
FpRteTrkEntry ::=
    SEQUENCE {
        fpRteTrkStatus    INTEGER,
        fpRteTrkAlmEnable INTEGER,
        fpRteTrkComStatus INTEGER,
        fpRteTrkTrnsCap   INTEGER,
        fpRteTrkTrnsLoad  INTEGER,
        fpRteTrkRcvCap    INTEGER,
        fpRteTrkRcvLoad   INTEGER,
        fpRteTrkOeNdType  INTEGER,
        fpRteTrkOeName    DisplayString,
        fpRteTrkOeIpAddr  IpAddress,
        fpRteTrkOeIfIndex INTEGER,
        fpRteTrkOeDomain  INTEGER,

        fpRteTrkXmitRate      INTEGER,
        fpRteTrkPassSync      INTEGER,
        fpRteTrkStatRes       INTEGER,
        fpRteTrkLoopClock     INTEGER,
        fpRteTrkBdataBTxQlen  INTEGER,       
        fpRteTrkBdataBTxEfcn  INTEGER,
        fpRteTrkBdataBTxHiClp INTEGER,
        fpRteTrkBdataBTxLoClp INTEGER,
        fpRteTrkLinkType      INTEGER
    }
           
fpRteTrkStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                clear(1),
                minor(2),
                major(3),
                down(4),
                deact(5)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Alarms state for logical interface table row."
        ::= { fpRteTrkEntry 1  }
 
fpRteTrkAlmEnable OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "A writable object to disable a trunk alarm."
    --DEFAULT   test-function test_trkalmenable
        ::= { fpRteTrkEntry 2  }
 
fpRteTrkComStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                commOK(1),
                commFAIL(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The communication status of the protocol on this trunk."
        ::= { fpRteTrkEntry 3  }
 
fpRteTrkTrnsCap OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The Transmit Capacity on this trunk in packets per second."
        ::= { fpRteTrkEntry 4  }

fpRteTrkTrnsLoad OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The Transmit Load on this trunk in packets per second."
        ::= { fpRteTrkEntry 5  }

fpRteTrkRcvCap OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The Receive Capacity on this trunk in packets per second."
        ::= { fpRteTrkEntry 6  }

fpRteTrkRcvLoad OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The Receive Load on this trunk in packets per second."
        ::= { fpRteTrkEntry 7  }

fpRteTrkOeNdType OBJECT-TYPE
    SYNTAX      INTEGER {
                ndTypeOther(1),
                ndTypeIPX(2),
                ndTypeBPX(3),
                ndTypeIPXAF(4),
                ndTypeAXIS(5),
                ndTypeIGX(6),
                ndTypeIGXAF(7),
                ndTypeESP(8),
                ndTypePAR(9),
                ndType8450(16)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The type of node or shelf at the other end of this trunk.
                Enumeratioin ndType8450 is obsolete"
        ::= { fpRteTrkEntry 8  }
 
fpRteTrkOeName OBJECT-TYPE
    SYNTAX      DisplayString 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The name of shelf at the other end of this trunk."
        ::= { fpRteTrkEntry 9  }
 

fpRteTrkOeIpAddr OBJECT-TYPE
    SYNTAX      IpAddress 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The network IP address of the shelf at the other
                  end of this trunk."
        ::= { fpRteTrkEntry 10  }


fpRteTrkOeIfIndex OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The switchIfIndex at the other end of this trunk.
                  If the other end does not exist, 0 is returned."
        ::= { fpRteTrkEntry 11  }
 

fpRteTrkOeDomain OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The domain of the shelf at the other end of this trunk."
        ::= { fpRteTrkEntry 12  }
 
fpRteTrkXmitRate OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The trunk transmission rate in unit of packets per second."
        ::= { fpRteTrkEntry 13 }

fpRteTrkPassSync  OBJECT-TYPE
    SYNTAX      INTEGER {
                yes (1),
                no(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The selection of this trunk to pass synchronization to the
                 network clock. Exceptions are:
                 a> X.21 subrate trunk cannot pass sync.
                 b> V.35 and MIL-188 PLNs can only pass sync if the date rate 
                    is 256, 512, or 1024 kbps, since these are the only rates 
                    for which the NTC-SR accepts clock from the SCC.
                 The default value for this object is no(2).
                 This object can be set with other writable objects in this table
                 except fpRteTrkAlmEnable, fpRteTrkBdataBTxQlen, fpRteTrkBdataBTxEfcn, 
                 fpRteTrkBdataBTxHiClp, fpRteTrkBdataBTxLoClp.
                "
        ::= { fpRteTrkEntry 14 }

fpRteTrkStatRes OBJECT-TYPE
    SYNTAX      INTEGER (0..10666)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The Statistical Reserve in packets per second for this trunk.
                 The default value for this object is 600 cps.
                 This object can be set with other writable objects in this table
                 except, fpRteTrkAlmEnable, fpRteTrkBdataBTxQlen, fpRteTrkBdataBTxEfcn, 
                 fpRteTrkBdataBTxHiClp, fpRteTrkBdataBTxLoClp.
                "
        ::= { fpRteTrkEntry 15 }

fpRteTrkLoopClock  OBJECT-TYPE
    SYNTAX      INTEGER {
                yes (1),
                no(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This object indicates if this trunk has been configured to
                 loop receive clock back to transmit. 
                 The default value for this object is no(2).
                 If local end is configured to pass sync, don't loop clock;
                 If the interface is X.21, loop clook is not supported.
                 This object can be set with other writable objects in this table
                 except fpRteTrkAlmEnable, fpRteTrkBdataBTxQlen, fpRteTrkBdataBTxEfcn, 
                 fpRteTrkBdataBTxHiClp, fpRteTrkBdataBTxLoClp.
                " 
        ::= { fpRteTrkEntry 16 }

fpRteTrkBdataBTxQlen  OBJECT-TYPE
    SYNTAX      INTEGER (0..8000) 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The depth of Bursty Data B transmission queue (in decimal)
                 of this trunk. 
                 The default value for this object is 8000.
                 This object can only be set together with fpRteTrkBdataBTxQlen,
                 fpRteTrkBdataBTxEfcn,fpRteTrkBdataBTxHiClp,
                 and fpRteTrkBdataBTxLoClp. 
                 "
    --DEFAULT   test-function  test_fprtetrkparms
        ::= { fpRteTrkEntry 17 }

fpRteTrkBdataBTxEfcn  OBJECT-TYPE
    SYNTAX      INTEGER (0..8000)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The transmission EFCN threshold (in decimal) for Bursty 
                 Data B traffic of this trunk.
                 The default value for this object is 8000.
                 This object can only be set together with 
                 fpRteTrkBdataBTxQlen, fpRteTrkBdataBTxEfcn,fpRteTrkBdataBTxHiClp,
                 and fpRteTrkBdataBTxLoClp. 
                 " 
    --DEFAULT   test-function  test_fprtetrkparms
        ::= { fpRteTrkEntry 18 }

fpRteTrkBdataBTxHiClp OBJECT-TYPE
    SYNTAX      INTEGER (0..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The transmission high CLP threshold (in percentage) for 
                 Bursty Data B traffic of this trunk.
                 The default value for this object is 75%.
                 This object can only be set 
                 together with fpRteTrkBdataBTxQlen, fpRteTrkBdataBTxEfcn,
                 fpRteTrkBdataBTxHiClp and fpRteTrkBdataBTxLoClp. 
                 "
    --DEFAULT   test-function  test_fprtetrkparms
        ::= { fpRteTrkEntry 19 }

fpRteTrkBdataBTxLoClp OBJECT-TYPE
    SYNTAX      INTEGER (0..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The transmission low CLP threshold (in percentage) for
                 Bursty Data B of this trunk.
                 The default value for this object is 25%.
                 This object can only be set together with fpRteTrkBdataBTxQlen,
                 fpRteTrkBdataBTxEfcn,fpRteTrkBdataBTxHiClp,
                 and fpRteTrkBdataBTxLoClp. 
                 "
    --DEFAULT   test-function  test_fprtetrkparms
        ::= { fpRteTrkEntry 20 }

fpRteTrkLinkType  OBJECT-TYPE
    SYNTAX      INTEGER {
                terrestrial(1),
                satellite(2)
                }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The physical link type of the trunk. The default value for
                 this object is terrestrial(1).
                 This object can be set with other writable objects in this 
                 table except fpRteTrkAlmEnable, fpRteTrkBdataBTxQlen, 
                 fpRteTrkBdataBTxEfcn, fpRteTrkBdataBTxHiClp and
                 fpRteTrkBdataBTxLoClp.
                "
        ::= { fpRteTrkEntry 21 }


-- The following describes the MIB variables for the atmTrunks table. 
--
-- --------------------------------------
--  Configuring a physical/virtual trunk:
-- --------------------------------------
-- -----------------------------------------------------------------------------
--                      |      Before addtrk       |      After addtrk         |
-- -----------------------------------------------------------------------------
--     Trunk Params     |   PHY TRK   |   VIR TRK  |   PHY TRK   |   VIR TRK   |
-- -----------------------------------------------------------------------------
--  atmTrkXmitRate      |     Yes     |    Yes     |     No      |      No     |
--  atmTrksResChans     |     No      |    Yes     |     No      |      Yes    |
--  atmTrkVPI           |     No      |    Yes     |     No      |      No     |
--  atmTrkType          |     No      |    Yes     |     No      |      No     |
--  atmTrkTrfCls        |     Yes     |    Yes     |     Yes     |      Yes    |
--  atmTrkPassSync      |     Yes     |    Yes     |     Yes     |      Yes    |
--  atmTrkStatRes       |     Yes     |    Yes     |     Yes     |      Yes    |
--  atmTrkLoopClock     |     Yes     |    Yes     |     Yes     |      Yes    |
--  atmTrkSvcChannels   |     Yes     |    No      |     No      |      No     |
--  atmTrkSvcBw         |     Yes     |    No      |     No      |      No     |
-- -----------------------------------------------------------------------------      
--      
-- Note: Above table lists ATM trunk parameters which can be configured before 
--       addtrk or after. This table can be refererence before adding a trunk 
--       or after adding a trunk. 
--      
--      

atmTrunks OBJECT-TYPE
    SYNTAX      SEQUENCE OF AtmTrkEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A list of atmTrk interfaces"
    --DEFAULT   test-function test_atmrtetrktable
    --DEFAULT   next-function next_atmrtetrktable
    --DEFAULT   get-function  get_atmrtetrktable_%t
        ::= { trunkServiceObjects 2  }
  
atmTrkEntry OBJECT-TYPE
    SYNTAX      AtmTrkEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A interface entry"
    INDEX       { switchIfIndex }
        ::= { atmTrunks 1  }
  
AtmTrkEntry ::=
    SEQUENCE {
        atmTrkStatus    INTEGER,
        atmTrkAlmEnable INTEGER,
        atmTrkComStatus INTEGER,
        atmTrkRcvRate   INTEGER,
        atmTrkTrnsCap   INTEGER,
        atmTrkTrnsLoad  INTEGER,
        atmTrkRcvCap    INTEGER,
        atmTrkRcvLoad   INTEGER,
        atmTrkType      INTEGER,
        atmTrkVPI       INTEGER,
        atmTrkResChans  INTEGER,
        atmTrkTrafCls   INTEGER,
        atmTrkOeNdType  INTEGER,
        atmTrkOeName    DisplayString,
        atmTrkOeIpAddr  IpAddress,
        atmTrkOeIfIndex INTEGER,
        atmTrkOeDomain  INTEGER,

        atmTrkSvcChannels INTEGER,
        atmTrkShareLcn    INTEGER,
        atmTrkSvcLcnLow   INTEGER,
        atmTrkSvcLcnHigh  INTEGER,
        atmTrkSvcVpiLow   INTEGER,
        atmTrkSvcVpiHigh  INTEGER,
        atmTrkSvcVciLow   INTEGER,
        atmTrkSvcVciHigh  INTEGER,
        atmTrkSvcQbinBitMap  OCTET STRING,
        atmTrkSvcQbinSz   INTEGER,
        atmTrkSvcBw       INTEGER,
        atmTrkSvcInUse    INTEGER,

        atmTrkXmitRate      INTEGER,
        atmTrkPassSync      INTEGER,
        atmTrkStatRes       INTEGER,
        atmTrkLoopClock     INTEGER,
        atmTrkBdataBTxQlen  INTEGER,       
        atmTrkBdataBRxQlen  INTEGER,
        atmTrkBdataBTxEfcn  INTEGER,
        atmTrkBdataBRxEfcn  INTEGER,
        atmTrkBdataBTxHiClp INTEGER,
        atmTrkBdataBRxHiClp INTEGER,
        atmTrkBdataBTxLoClp INTEGER,
        atmTrkBdataBRxLoClp INTEGER,
        atmTrkMaxChanPort   INTEGER,
        atmTrkLinkType      INTEGER,
        atmTrkDerouteDelayTimer INTEGER,
        atmTrkGtwyChCount   INTEGER,
        atmTrkRetainedLinks INTEGER,
        atmTrkImaWindowSize INTEGER,
        atmTrkImaTrnsCnts   INTEGER,
        atmTrkImaReenableTimer INTEGER,
        atmTrkIMAProtocolOption INTEGER,
        atmTrkIMADiffDelay  INTEGER,
        atmTrkIMAClockMode  INTEGER,
        atmTrkHdrType       INTEGER,
        atmTrkVcShaping     INTEGER
    }
           
atmTrkStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                clear(1),
                minor(2),
                major(3),
                down(4),
                deact(5)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Alarms state for logical interface table row."
        ::= { atmTrkEntry 1  }
 
atmTrkAlmEnable OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "A writable object to disable a trunk alarm."
    --DEFAULT   test-function test_trkalmenable
        ::= { atmTrkEntry 2  }
 
atmTrkComStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                commOK(1),
                commFAIL(2)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The communication status of the protocol on this trunk."
        ::= { atmTrkEntry 3  }

atmTrkRcvRate OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Unit of ATM Trunk Receive Rate is based on card types.
                 BNI,BXM,UXM,ALM-A: cells per second
                 Other cards:       1000 packets per second
                 "
        ::= { atmTrkEntry 4  }

atmTrkTrnsCap OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The Transmit Capacity on this trunk in cells per second."
        ::= { atmTrkEntry 5  }

atmTrkTrnsLoad OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The Transmit Load on this trunk in cells per second."
        ::= { atmTrkEntry 6  }

atmTrkRcvCap OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The Receive Capacity on this trunk in cells per second."
        ::= { atmTrkEntry 7  }

atmTrkRcvLoad OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The Receive Load on this trunk in cells per second."
        ::= { atmTrkEntry 8  }

atmTrkType OBJECT-TYPE
    SYNTAX      INTEGER {
                trkTypePHY(1),
                trkTypeCBR(2),
                trkTypeVBR(3),
                trkTypeABR(4),
                trkTypeIPXAF(5),
                trkTypeAXISAF(6),
                trkTypeESPAF(7),
                trkTypeIGXAF(8),
                trkTypeVSIAF(9),
                trkTypePARAF(10),
                trkTypeRTVBR(11) 
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION " The type this trunk. The values of trkTypeCBR(2),
                  trkTypeVBR(3), and trkTypeABR(4) are writable for virtual
                  trunks only. The trkTypePHY(1) value is returned for a
                  get-request on a physical trunk."
        ::= { atmTrkEntry 9  }
 
atmTrkVPI OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION " The VPI used on this virtual trunk. The maximum value 
                  is 255 for ds3 trunks, and 63 for OC3 trunks. The minimum
                  value for set-request PDUs is 1. This value must be unique
                  on a physical trunk port and also must match the value for
                  the path through the ATM cloud. The object cannot be
                  set in IPX/IGX.  This value cannot be modified if the 
                  partition is enabled."
        ::= { atmTrkEntry 10  }
 
atmTrkResChans OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION " The number of channels reserved for this trunk."
        ::= { atmTrkEntry 11  }
 
atmTrkTrafCls OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION " An integer containing bits representing the 
                  traffic classes of this trunk:
           bit0 Voice,
           bit1 Time Stamped,
           bit2 Non-Time Stamped,
           bit3 Frame Relay,
           bit4 not used,
           bit5 ForeSight,
           bit6 ATM CBR,
           bit7 ATM nrt-VBR,
           bit8 ATM ABR,
           bit9 ATM rt-VBR. "
        ::= { atmTrkEntry 12  }
 
atmTrkOeNdType OBJECT-TYPE
    SYNTAX      INTEGER {
                ndTypeOther(1),
                ndTypeIPX(2),
                ndTypeBPX(3),
                ndTypeIPXAF(4),
                ndTypeAXIS(5),
                ndTypeIGX(6),
                ndTypeIGXAF(7),
                ndTypeESP(8),
                ndTypePAR(9),
                ndType8450(16)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The type of node or shelf at the other end of this trunk.
                Enumeration ndType8450 is obsolete."
        ::= { atmTrkEntry 13  }
 
atmTrkOeName OBJECT-TYPE
    SYNTAX      DisplayString
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The name of shelf at the other end of this trunk."
        ::= { atmTrkEntry 14  }
 
atmTrkOeIpAddr OBJECT-TYPE
    SYNTAX      IpAddress
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The network IP address of the shelf at the other end of
                  this trunk."
        ::= { atmTrkEntry 15  }
 
atmTrkOeIfIndex OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The switchIfIndex at the other end of this trunk.
                  If the other end does not exist, 0 is returned."
        ::= { atmTrkEntry 16  }
 
atmTrkOeDomain OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION " The domain of the shelf at the other end of this trunk."
        ::= { atmTrkEntry 17 }

atmTrkSvcChannels OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of LCN's reserved for the SVC's on this trunk. The 
                  other SVC parms are valid if this object has a non-zero value."
    --DEFAULT   test-function test_atmsvcparm
        ::= { atmTrkEntry 18 }

atmTrkShareLcn OBJECT-TYPE
    SYNTAX      INTEGER {
                 portBased(1),
                 cardBased(2)
    }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Whether the LCN's are shared per port basis or per card basis."
    --DEFAULT   test-function test_atmsvcparm
        ::= { atmTrkEntry 19 }

atmTrkSvcLcnLow OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The lower limit of the LCN value which can be used on this trunk 
    --DEFAULT   test-function test_atmsvcparm
                 for SVC's."
        ::= { atmTrkEntry 20 }

atmTrkSvcLcnHigh OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Upper limit of the LCN value which can be used on this trunk 
                 for SVC's."
    --DEFAULT   test-function test_atmsvcparm
        ::= { atmTrkEntry 21 }

atmTrkSvcVpiLow OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "It stores the SVC VPI lower limit. The partitioning is based on 
                 the STI Header VC-format. The 16 bit concatenated VPI/VCI field 
                 is partitioned between PVC and SVC. On a physical trunk a range 
                 will be reserved for SVC's."
    --DEFAULT   test-function test_atmsvcparm
        ::= { atmTrkEntry 22 }


atmTrkSvcVpiHigh OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "It stores the SVC VPI Upper limit. The partitioning is based on 
                 the STI Header VC-format. The 16 bit concatenated VPI/VCI field 
                 is partitioned between PVC and SVC. On a physical trunk a range 
                 will be reserved for SVC's."
    --DEFAULT   test-function test_atmsvcparm
        ::= { atmTrkEntry 23 }

atmTrkSvcVciLow OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      deprecated
    DESCRIPTION "It stores the SVC VCI Lower limit."
    --DEFAULT   test-function test_atmsvcparm
        ::= { atmTrkEntry 24 }

atmTrkSvcVciHigh OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      not-accessible
    STATUS      deprecated
    DESCRIPTION "It stores the SVC VCI Upper limit."
    --DEFAULT   test-function test_atmsvcparm
        ::= { atmTrkEntry 25 }

atmTrkSvcQbinBitMap OBJECT-TYPE
    SYNTAX      OCTET STRING
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "A 32-bit Octet string which represents the queue bin allocation.
                 If the bit is set to 1, it is allocated to SVC's and if 0 it is 
                 allocated to PVC's. The bits are numbered in the BIG endian order,
                 the m.s bit corresponds to Qbin0 and the next m.s bit corresponds 
                 to Qbin 1 etc.For ex. atmTrkSvcQbinMap is set to a value 0x8fff0000
                 to indicate that queues 0 and 4 through 15 are allocated to SVC 's.
                 This object is valid if atmPortSvcChannels is non-zero."
    --DEFAULT   test-function test_atmsvcparm
        ::= { atmTrkEntry 26 }

atmTrkSvcQbinSz OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Egress Queue pool size."
    --DEFAULT   test-function test_atmsvcparm
        ::= { atmTrkEntry 27 }

atmTrkSvcBw OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The bandwidth partition available for SVC's."
    --DEFAULT   test-function test_atmsvcparm
        ::= { atmTrkEntry 28 }

atmTrkSvcInUse OBJECT-TYPE
    SYNTAX      INTEGER {
                inUse (1),
                notInUse(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This object is set by the INS to indicate that SVC partitioning
                 information is being used by INS. The initial value is notInUse.
                 This object is valid if atmPortSvcChannels is non-zero."
    --DEFAULT   test-function test_atmsvcparm
        ::= { atmTrkEntry 29 }

atmTrkXmitRate OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The trunk transmission rate in unit of cells per second.
                 * The default values for this object are,
                 ----------------------------------------------------
                   Back Card Type  |  Physical Trunk | Virtual Trunk
                 ----------------------------------------------------
                   T3              |  96000          | 3000
                   E3              |  80000          | 2500
                   OC3             |  353208         | 32109
                 ----------------------------------------------------
                 * This object can't be set if the routing trunk is added and the
                   trunk is a physical trunk. It can be set if this is a virtual
                   trunk no matter whether the routing trunk is established or not. 
                 * This object can be set with other writable objects in this table
                   except atmRteTrkAlmEnable, atmRteTrkBdataBTxQlen, 
                   atmRteTrkBdataBTxEfcn, atmRteTrkBdataBTxHiClp, 
                   atmRteTrkBdataBTxLoClp.
                "
        ::= { atmTrkEntry 30 }

atmTrkPassSync  OBJECT-TYPE
    SYNTAX      INTEGER {
                yes (1),
                no(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The selection of this trunk to pass synchronization to the
                 network clock.  
                 * The default value for this object is yes(1).
                 * X.21 subrate trunk cannot pass sync.
                 * V.35 and MIL-188 PLNs can only pass sync if the date rate 
                   is 256, 512, or 1024 kbps, since these are the only rates 
                   for which the NTC-SR accepts clock from the SCC.
                 * This object can be set with other writable objects in this table
                   except atmRteTrkAlmEnable, atmRteTrkBdataBTxQlen, 
                   atmRteTrkBdataBTxEfcn, atmRteTrkBdataBTxHiClp, 
                   atmRteTrkBdataBTxLoClp.
                "
        ::= { atmTrkEntry 31 }

atmTrkStatRes  OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The Statistical Reserve in
                  cells   per second for UXM/BNI/UXM cards and  
                  packets per second for other cards.
                 * The default value for this object is 1000.
                 * This can be set with other writable objects in this table
                   except atmRteTrkAlmEnable, atmRteTrkBdataBTxQlen, 
                   atmRteTrkBdataBTxEfcn, atmRteTrkBdataBTxHiClp, 
                   atmRteTrkBdataBTxLoClp.
                "
        ::= { atmTrkEntry 32 }

atmTrkLoopClock  OBJECT-TYPE
    SYNTAX      INTEGER {
                yes (1),
                no(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This object indicates if this trunk has been configured to
                 loop receive clock back to transmit.  
                 * If local end is configured to pass sync, don't loop clock;
                 * If the interface is X.21, loop clook is not supported.
                 * The default value for this object is no(2).
                 * This object can be set with other writable objects in this 
                   table except atmRteTrkAlmEnable, atmRteTrkBdataBTxQlen, 
                   atmRteTrkBdataBTxEfcn, atmRteTrkBdataBTxHiClp, 
                   atmRteTrkBdataBTxLoClp,atmRteTrkBdataBRxQlen, 
                   atmRteTrkBdataBRxEfcn, atmRteTrkBdataBRxHiClp 
                   and atmRteTrkBdataBRxLoClp.
                " 
        ::= { atmTrkEntry 33 }

atmTrkBdataBTxQlen  OBJECT-TYPE
    SYNTAX      INTEGER (-1..8000) 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The depth of Bursty Data B transmission queue (in decimal).
                 * This object is not applicable (-1) to IPX/IGX ATM trunks.
                 * The default value for this object is 8000.
                 * This object can only be set together with 
                   atmRteTrkBdataBTxEfcn,atmRteTrkBdataBTxHiClp and 
                   atmRteTrkBdataBTxLoClp on BPX ATM trunks.
                 "
    --DEFAULT   test-function  test_atmrtetrkparms
        ::= { atmTrkEntry 34 }

atmTrkBdataBRxQlen  OBJECT-TYPE
    SYNTAX      INTEGER (-1..8000)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The depth of Bursty Data B receiving queue (in decimal). 
                 * This object is not applicable (-1) to BPX ATM trunk (BNI or BXM).
                 * The default value for this object is 8000.
                 * This object can only be set together with
                   atmRteTrkBdataBRxEfcn, atmRteTrkBdataBRxHiClp and 
                   atmRteTrkBdataBRxLoClp on IPX ATM trunks 
                 "
    --DEFAULT   test-function  test_atmrtetrkparms
        ::= { atmTrkEntry 35 }

atmTrkBdataBTxEfcn  OBJECT-TYPE
    SYNTAX      INTEGER (-1..8000)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The transmission EFCN threshold (in decimal) for Bursty 
                 Data B of this trunk.
                 * This object is not applicable (-1) to IPX/IGX ATM trunks.
                 * The default value for this object is 8000.
                 * This object can only be set together with 
                   atmRteTrkBdataBTxQlen,atmRteTrkBdataBTxHiClp and 
                   atmRteTrkBdataBTxLoClp on BPX ATM trunks.
                 "
    --DEFAULT   test-function  test_atmrtetrkparms
        ::= { atmTrkEntry 36 }

atmTrkBdataBRxEfcn  OBJECT-TYPE
    SYNTAX      INTEGER (-1..8000)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The receiving EFCN threshold (in decimal) for Bursty Data 
                 B of this trunk.
                 * This object is not applicable (-1) to BPX ATM trunk (BNI or BXM). 
                 * The default value for this object is 8000.
                 * This object can only be set together with
                   atmRteTrkBdataBRxQlen, atmRteTrkBdataBRxHiClp and 
                   atmRteTrkBdataBRxLoClp on IPX ATM trunks. 
                 "
    --DEFAULT   test-function  test_atmrtetrkparms
        ::= { atmTrkEntry 37 }

atmTrkBdataBTxHiClp OBJECT-TYPE
    SYNTAX      INTEGER (-1..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The transmission high CLP threshold (in percentage) for 
                 Bursty Data B of this trunk. 
                 * The default value for this object is 75.
                 * This object is not applicable (-1) to IPX/IGX ATM trunks. 
                 * This object can only be set together with 
                   atmRteTrkBdataBTxEfcn,atmRteTrkBdataBTxQlen and 
                   atmRteTrkBdataBTxLoClp on BPX ATM trunks.
                 "
    --DEFAULT   test-function  test_atmrtetrkparms
        ::= { atmTrkEntry 38 }

atmTrkBdataBRxHiClp OBJECT-TYPE
    SYNTAX      INTEGER (-1..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The receiving high CLP threshold (in percentage) for Bursty Data
                 B of this trunk. This object is not applicable (-1) to BPX
                 ATM trunk (BNI or BXM).
                 * The default value for this object is 75.
                 * This object can only be set together with
                   atmRteTrkBdataBRxEfcn, atmRteTrkBdataBRxQlen and 
                   atmRteTrkBdataBRxLoClp on IPX ATM trunks 
                 "
    --DEFAULT   test-function  test_atmrtetrkparms
        ::= { atmTrkEntry 39 }

atmTrkBdataBTxLoClp OBJECT-TYPE
    SYNTAX      INTEGER (-1..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The transmission low CLP threshold (in percentage) for Burstry
                 Data B of this trunk.This object is not applicable (-1) to IPX
                 or IGX ATM trunks. 
                 * The default value for this object is 25.
                 * This object can only be set together with 
                   atmRteTrkBdataBTxEfcn,atmRteTrkBdataBTxHiClp and 
                   atmRteTrkBdataBTxQlen on BPX ATM trunks.
                 "
    --DEFAULT   test-function  test_atmrtetrkparms
        ::= { atmTrkEntry 40 }

atmTrkBdataBRxLoClp OBJECT-TYPE
    SYNTAX      INTEGER (-1..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The receiving low CLP threshold (in percentage ) for Bursty
                 Data B of this trunk. This object is not applicable (-1) to
                 BPX ATM trunk (BNI or BXM).
                 * The default value for this object is 25.
                 * This object can only be set together with
                   atmRteTrkBdataBRxEfcn, atmRteTrkBdataBRxHiClp and 
                   atmRteTrkBdataBRxQlen on IPX ATM trunks 
                 "
    --DEFAULT   test-function  test_atmrtetrkparms
        ::= { atmTrkEntry 41 }

atmTrkMaxChanPort OBJECT-TYPE
    SYNTAX      INTEGER (-1..16320)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The maximum number of channels a trunk port can support. 
                 This object is applicable to BXM/UXM trunk only.
                 * The default value for this object is 1484.
                 * This object can be set with other writable objects in this 
                   table except atmRteTrkAlmEnable, atmRteTrkBdataBTxQlen, 
                   atmRteTrkBdataBTxEfcn, atmRteTrkBdataBTxHiClp and
                   atmRteTrkBdataBTxLoClp.
                "
        ::= { atmTrkEntry 42 }

atmTrkLinkType  OBJECT-TYPE
    SYNTAX      INTEGER {
                terrestrial(1),
                satellite(2)
                }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The physical link type of the trunk. The default value for
                 this object is terrestrial(1).
                 * This object can be set with other writable objects in this 
                   table except atmRteTrkAlmEnable, atmRteTrkBdataBTxQlen, 
                   atmRteTrkBdataBTxEfcn, atmRteTrkBdataBTxHiClp and
                   atmRteTrkBdataBTxLoClp.
                "
        ::= { atmTrkEntry 43 }

atmTrkDerouteDelayTimer OBJECT-TYPE
    SYNTAX      INTEGER (0..300)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The deroute delay timer of the trunk in unit of second.
                 * The default value for this object is 0.
                 * This object can be set with other writable objects in this 
                   table except atmRteTrkAlmEnable, atmRteTrkBdataBTxQlen, 
                   atmRteTrkBdataBTxEfcn, atmRteTrkBdataBTxHiClp and
                   atmRteTrkBdataBTxLoClp.
                "
       ::= { atmTrkEntry 44 }
atmTrkGtwyChCount OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The Gateway Channel count for UXM cards. 
                 * This cannot exceed the total number channels per port.
                 A value of 0 will be returned for cards other than UXM E1/T1"
       ::= { atmTrkEntry 45 }

atmTrkRetainedLinks   OBJECT-TYPE
    SYNTAX      INTEGER (0..8)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "No of retained links, This is for UXM T1/E1-IMA mode only.
                 A value of 0 will be returned for cards other than UXM E1/T1"
       ::= { atmTrkEntry 46 }

atmTrkImaWindowSize OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "If this object which is the Window size is zero then 
                 additional information is not requested, which are the objects given below.  
                 This is for UXM E1/T1-IMA mode only.
                 A value of 0 will be returned for cards other than UXM E1/T1"
       ::= { atmTrkEntry 47 }

atmTrkImaTrnsCnts   OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION " This object can be set only if the Window Size is non-zero. 
                  This is Maximum transition counts/window.  This is for 
                  UXM E1/T1-IMA mode only.
                  A value of 0 will be returned for cards other than UXM E1/T1"
       ::= { atmTrkEntry 48 }

atmTrkImaReenableTimer OBJECT-TYPE
    SYNTAX      INTEGER 
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "This object can be set only if the Window Size is non-zero. 
                 This is re-enable timer. If 0 is disable else it is 
                 in 10min units. This is for UXM T1-IMA mode only.
                 A value of 0 will be returned for cards other than UXM E1/T1"
       ::= { atmTrkEntry 49 }

atmTrkIMAProtocolOption OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
                }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The IMA protocol option for the trunks with single physical 
                 line. A value of 2(i.e.disable) will be returned for cards 
                 other than UXM E1/T1"
       ::= { atmTrkEntry 50 }

atmTrkIMADiffDelay OBJECT-TYPE
    SYNTAX      INTEGER (0..200)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The max. value of differential delay associated with the 
                 IMA trunk in msec. A value of 0 will be returned for cards
                 other than UXM E1/T1"
       ::= { atmTrkEntry 51 }

atmTrkIMAClockMode OBJECT-TYPE
    SYNTAX      INTEGER {
                unknownclkmode(1),
                ctc(2),
                itc(3)
                }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The clock mode of the packet lines on the IMA trunk.
                 ctc - Common clock mode
                 itc - Independent clock mode.
                 A value of 1 will be returned for cards other than UXM E1/T1"
       ::= { atmTrkEntry 52 }

atmTrkHdrType OBJECT-TYPE
    SYNTAX      INTEGER {
                other   (1),
                uni     (2),
                nni     (3)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Indicates whether the trunk's header type is UNI or NNI"
    ::= { atmTrkEntry 53  }

atmTrkVcShaping OBJECT-TYPE
    SYNTAX      INTEGER {
                yes (1),
                no(2)
    }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Indicates whether the trunk should do vc shaping "
    ::= { atmTrkEntry 54  }

-- The following describes the MIB variables for the fpTrunkStatsTable. 

fpTrunkStatsTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF FpTrkStatsEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A list of fast packet trunk statistics object"
    --DEFAULT   test-function test_fptrkstatstable
    --DEFAULT   next-function next_fptrkstatstable
    --DEFAULT   get-function  get_fptrkstatstable_%t
    --DEFAULT   view-mask     IPX_VIEW
        ::= { trunkServiceObjects 3  }
  
fpTrkStatsEntry OBJECT-TYPE
    SYNTAX      FpTrkStatsEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A interface entry"
    INDEX       { switchIfIndex }
        ::= { fpTrunkStatsTable 1  }
  
FpTrkStatsEntry ::=
    SEQUENCE {
        fpTrkStatsPktCrcs             Counter,
        fpTrkStatsPktOofs             Counter,
        fpTrkStatsTxVoPktDrps         Counter,
        fpTrkStatsTxTsPktDrps         Counter,
        fpTrkStatsTxNonTsPktDrps      Counter,
        fpTrkStatsTxHiPrioPktDrps     Counter,
        fpTrkStatsTxBdataAPktDrps     Counter,
        fpTrkStatsTxBdataBPktDrps     Counter,
        fpTrkStatsTotalPktsTxtoLns    Counter
    }
           
fpTrkStatsPktCrcs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Fast Packet CRC errors." 
        ::= { fpTrkStatsEntry 1  }

fpTrkStatsPktOofs OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of Fast Packet Out of Frame errors." 
        ::= { fpTrkStatsEntry 2  }

fpTrkStatsTxVoPktDrps OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The numbe rof transmitted voice fast packet dropped."
        ::= { fpTrkStatsEntry 3  }

fpTrkStatsTxTsPktDrps   OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted time-stamped packet dropped. "
        ::= { fpTrkStatsEntry 4  }
    
fpTrkStatsTxNonTsPktDrps    OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted non time-stamped packet dropped."
        ::= { fpTrkStatsEntry 5  }

fpTrkStatsTxHiPrioPktDrps   OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted high priority packet dropped. "
        ::= { fpTrkStatsEntry 6  }

fpTrkStatsTxBdataAPktDrps  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted bursty data A packet dropped. "
        ::= { fpTrkStatsEntry 7  }

fpTrkStatsTxBdataBPktDrps  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted bursty data B packet dropped."
        ::= { fpTrkStatsEntry 8  }

fpTrkStatsTotalPktsTxtoLns     OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of total packets transmitted to the line."
        ::= { fpTrkStatsEntry 9  }


-- The following describes the MIB variables for the atmTrunkStatsTable. 

atmTrunkStatsTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF AtmTrkStatsEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A list of ATM trunk statistics object."
    --DEFAULT   test-function test_atmtrkstatstable
    --DEFAULT   next-function next_atmtrkstatstable
    --DEFAULT   get-function  get_atmtrkstatstable_%t
        ::= { trunkServiceObjects 4  }
  
atmTrkStatsEntry OBJECT-TYPE
    SYNTAX      AtmTrkStatsEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A interface entry"
    INDEX       { switchIfIndex }
        ::= { atmTrunkStatsTable 1  }
  
AtmTrkStatsEntry ::=
    SEQUENCE {
        atmTrkStatsTxVoPktDrps          Counter,
        atmTrkStatsTxTsPktDrps          Counter,
        atmTrkStatsTxNonTsPktDrps       Counter,
        atmTrkStatsTxHiPrioPktDrps      Counter,
        atmTrkStatsTxBdataAPktDrps      Counter,
        atmTrkStatsTxBdataBPktDrps      Counter,
        atmTrkStatsRxVoPktDrps          Counter,
        atmTrkStatsRxTsPktDrps          Counter,
        atmTrkStatsRxNonTsPktDrps       Counter,
        atmTrkStatsRxHiPrioPktDrps      Counter,
        atmTrkStatsRxBdataAPktDrps      Counter,
        atmTrkStatsRxBdataBPktDrps      Counter,
        atmTrkStatsSpacerPktsDrps       Counter,
        atmTrkStatsTotalPktsTxtoLns     Counter,
        atmTrkStatsTotalPktsRxFromLns   Counter,

        atmTrkStatsTxVoCellDrps         Counter,
        atmTrkStatsTxTsCellDrps         Counter,
        atmTrkStatsTxNonTsCellDrps      Counter,
        atmTrkStatsTxHiPrioCellDrps     Counter,
        atmTrkStatsTxBdataACellDrps     Counter,
        atmTrkStatsTxBdataBCellDrps     Counter,
        atmTrkStatsTxCbrCellDrps        Counter,
        atmTrkStatsTxVbrCellDrps        Counter,
        atmTrkStatsTxAbrCellDrps        Counter,
        atmTrkStatsTotalCellsTxtoLns    Counter,
        atmTrkStatsTotalCellsRxFromPorts  Counter  
    }
           
atmTrkStatsTxVoPktDrps OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted voice fast packet dropped.
                 This statistics is not applicatable to BPX trunks, 0 is
                 returned for BPX trunks.
                 "
        ::= { atmTrkStatsEntry 1  }

atmTrkStatsTxTsPktDrps   OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted time-stamped packet dropped.  
                 This statistics is not applicatable to BPX trunks, 0 is
                 returned for BPX trunks.
                 "
        ::= { atmTrkStatsEntry 2  }
    
atmTrkStatsTxNonTsPktDrps    OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted non time-stamped packet dropped. 
                 This statistics is not applicatable to BPX trunks, 0 is
                 returned for BPX trunks.
                 "
        ::= { atmTrkStatsEntry 3  }

atmTrkStatsTxHiPrioPktDrps   OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted high priority packet dropped.  
                 This statistics is not applicatable to BPX trunks, 0 is
                 returned for BPX trunks.
                 "
        ::= { atmTrkStatsEntry 4  }

atmTrkStatsTxBdataAPktDrps  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted bursty data A packet dropped.  
                 This statistics is not applicatable to BPX trunks, 0 is
                 returned for BPX trunks.
                 "
        ::= { atmTrkStatsEntry 5  }

atmTrkStatsTxBdataBPktDrps  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted bursty data B packet dropped. 
                 This statistics is not applicatable to BPX trunks, 0 is
                 returned for BPX trunks.
                 "
        ::= { atmTrkStatsEntry 6  }

atmTrkStatsRxVoPktDrps  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of received voice packet dropped.  
                 This statistics is not applicatable to BPX trunks, 0 is
                 returned for BPX trunks.
                 "
        ::= { atmTrkStatsEntry 7  }

atmTrkStatsRxTsPktDrps  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of received time-stamped packet dropped.  
                 This statistics is not applicatable to BPX trunks, 0 is
                 returned for BPX trunks.
                 "
        ::= { atmTrkStatsEntry 8  }

atmTrkStatsRxNonTsPktDrps    OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of received non time-stamped packet dropped.  
                 This statistics is not applicatable to BPX trunks, 0 is
                 returned for BPX trunks.
                 "
        ::= { atmTrkStatsEntry 9  }

atmTrkStatsRxHiPrioPktDrps   OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of received high priority packet dropped.  
                 This statistics is not applicatable to BPX trunks, 0 is
                 returned for BPX trunks.
                 "
        ::= { atmTrkStatsEntry 10  }

atmTrkStatsRxBdataAPktDrps  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of received bursty data A packet dropped.  
                 This statistics is not applicatable to BPX trunks, 0 is
                 returned for BPX trunks.
                 "
        ::= { atmTrkStatsEntry 11  }

atmTrkStatsRxBdataBPktDrps  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of received bursty data B packet dropped.  
                 This statistics is not applicatable to BPX trunks, 0 is
                 returned for BPX trunks.
                 "
        ::= { atmTrkStatsEntry 12  }

atmTrkStatsSpacerPktsDrps        OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of received Spacer Packet dropped. 
                 This statistics is not applicatable to BPX trunks, 0 is
                 returned for BPX trunks.
                 "
        ::= { atmTrkStatsEntry 13  }

atmTrkStatsTotalPktsTxtoLns     OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of total packets transmitted to the line.  
                 This statistics is not applicatable to BPX trunks, 0 is
                 returned for BPX trunks.
                 "
        ::= { atmTrkStatsEntry 14  }

atmTrkStatsTotalPktsRxFromLns   OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of total packets received from the line. 
                 This statistics is not applicatable to BPX trunks, 0 is
                 returned for BPX trunks.
                 "
        ::= { atmTrkStatsEntry 15  }


atmTrkStatsTxVoCellDrps   OBJECT-TYPE
    SYNTAX            Counter
    ACCESS            read-only
    STATUS            mandatory
    DESCRIPTION "The number of transmitted ATM voice cell dropped. This
                 statistics is not applicable to ATM Virtual Trunks, 0 is
                 returned for ATM Virtual trunks.
                 "
        ::= { atmTrkStatsEntry 16  }
    
atmTrkStatsTxTsCellDrps   OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted time-stamped ATM cell dropped.
                 This statistics is not applicable to ATM Virtual Trunks. 0 is
                 returned for ATM Virtual trunks.
                 "
        ::= { atmTrkStatsEntry 17  }
    
atmTrkStatsTxNonTsCellDrps    OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted non time-stamped ATM cell dropped.
                 This statistics is not applicable to ATM Virtual Trunks. 0 is
                 returned for ATM Virtual trunks.
                 "
        ::= { atmTrkStatsEntry 18  }

atmTrkStatsTxHiPrioCellDrps   OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted high priority ATM cell dropped.
                 This statistics is not applicable to ATM Virtual Trunks. 0 is
                 returned for ATM Virtual trunks.
                 " 
        ::= { atmTrkStatsEntry 19  }

atmTrkStatsTxBdataACellDrps  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted bursty data A cell dropped. 
                 This statistics is not applicable to ATM Virtual Trunks. 0 is
                 returned for ATM Virtual trunks.
                 "
        ::= { atmTrkStatsEntry 20  }

atmTrkStatsTxBdataBCellDrps  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted bursty data B cell dropped. 
                 This statistics is not applicable to ATM Virtual Trunks. 0 is
                 returned for ATM Virtual trunks.
                 "
        ::= { atmTrkStatsEntry 21  }

atmTrkStatsTxCbrCellDrps    OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted ATM CBR cell dropped. This statistics
                 is not applicable to IPX/IGX ATM trunks. 0 is returned for 
                 IPX/IGX ATM trunks.
                 "
        ::= { atmTrkStatsEntry 22  }

atmTrkStatsTxVbrCellDrps    OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted ATM VBR cell dropped. This statistics
                 is not applicable to IPX/IGX ATM trunks. 0 is returned for 
                 IPX/IGX ATM trunks.
                 "
        ::= { atmTrkStatsEntry 23  }

atmTrkStatsTxAbrCellDrps    OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of transmitted ATM ABR cell dropped. This statistics
                 is not applicable to IPX/IGX ATM trunks. 0 is returned for 
                 IPX/IGX ATM trunks.
                 "
        ::= { atmTrkStatsEntry 24  }

atmTrkStatsTotalCellsTxtoLns    OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of total cells transmitted to the line."
        ::= { atmTrkStatsEntry 25  }

atmTrkStatsTotalCellsRxFromPorts  OBJECT-TYPE
    SYNTAX      Counter
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The number of total cells received from the port."
        ::= { atmTrkStatsEntry 26  }


-- The following describes the MIB variables for the circuitLines table.
 
circuitLines OBJECT-TYPE
    SYNTAX      SEQUENCE OF CircuitLineEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A list of Circuit Line interfaces"
    --DEFAULT   test-function test_cirlinetable
    --DEFAULT   next-function next_cirlinetable
    --DEFAULT   get-function  get_cirlinetable_%t
    --DEFAULT   view-mask       IPX_VIEW
        ::= { lineServiceObjects  2  }
 
circuitLineEntry OBJECT-TYPE
    SYNTAX      CircuitLineEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "A interface entry"
    INDEX       { switchIfIndex }
        ::= { circuitLines 1  }
 
CircuitLineEntry ::=
    SEQUENCE {
        cirLineCnfStatus  INTEGER,
        cirLinePassOe     INTEGER,
        cirLineCasswMode  INTEGER,
        cirLineCasConType INTEGER,
        cirLineCCSType    INTEGER,
        cirLineCASType    INTEGER,
        cirLineCASParm1   INTEGER,
        cirLineCASParm2   INTEGER,
        cirLineCASParm3   INTEGER,
        cirLineCASParm4   INTEGER,
        cirLineCASParm5   INTEGER,
        cirLineCASParm6   INTEGER,
        cirLineCASParm7   INTEGER,
        cirLineCASParm8   INTEGER,
        cirLineCASParm9   INTEGER,
        cirLineCASParm10  INTEGER,
        cirLineCASParm11  INTEGER,
        cirLineCASParm12  INTEGER,
        cirLineCASParm13  INTEGER,
        cirLineCASParm14  INTEGER,
        cirLineCASParm15  INTEGER,
        cirLineCASParm16  INTEGER,
        cirLineCASParm17  INTEGER,
        cirLineCASParm18  INTEGER,
        cirLineCachedSVC  INTEGER
        }
 
cirLineCnfStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                other(1),
                passing(2),
                blocking(3),
                inserting(4),
                external(5)
        }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Pass-through state for circuit line table row. 
                 The default value is external(5)."
        ::= { circuitLineEntry 1  }
 
cirLinePassOe OBJECT-TYPE
    SYNTAX      INTEGER
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION " The switchIfIndex for the Circuit Line that this line is
                  connected to. This is valid only when cirLineCnfStatus
                  is passing(2), blocking(3), or inserting(4). A value of
                  zero is returned otherwise."
        ::= { circuitLineEntry 2  }
 
cirLineCasswMode OBJECT-TYPE
    SYNTAX      INTEGER {
                off(1),
                server-end(2),
                pbx-end(3)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching mode. The default value is off(1)."
        ::= { circuitLineEntry 3  }
 
cirLineCasConType OBJECT-TYPE
    SYNTAX      INTEGER {
                a32(1),
                a24(2),
                a16(3),
                a16z(4),
                a32d(5),
                c32(6),
                c24(7),
                c16(8),
                c16z(9),
                c32d(10),
                p(11),
                t(12),
                v(13),
                l16(14),
                l16v(15),
                l8(16),
                l8v(17),
                td(18)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching connection type.The default value is a32(1)."
        ::= { circuitLineEntry 4  }
 
cirLineCCSType OBJECT-TYPE
    SYNTAX      INTEGER (0..4)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching CCS type, 1 for Q.SIG. The default value is 1."
        ::= { circuitLineEntry 5  }

cirLineCASType OBJECT-TYPE
    SYNTAX      INTEGER (0..32)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching CAS type, 1 for AB bit bit signaling used
                 for 2-wire E&M line. The default value is 1."
        ::= { circuitLineEntry 6  }

cirLineCASParm1 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter. The default value is 0.
                 This object can not be set if the cirLineCasswMode is 
                 off(1) or server-end(2)."
        ::= { circuitLineEntry 7  }

cirLineCASParm2 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter. The default value is 0x05."
        ::= { circuitLineEntry 8  }

cirLineCASParm3 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter. The default value is 0. "
        ::= { circuitLineEntry 9  }

cirLineCASParm4 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter. The default value is 0x0C."
        ::= { circuitLineEntry 10  }

cirLineCASParm5 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter. The default value is 0x7F for
                 T1 back card type; 0x54 for E1 back card type."
        ::= { circuitLineEntry 11  }

cirLineCASParm6 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter, the default value is 0."
        ::= { circuitLineEntry 12  }

cirLineCASParm7 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter, the default value is 0."
        ::= { circuitLineEntry 13  }

cirLineCASParm8 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter, the default value is 0."
        ::= { circuitLineEntry 14 }

cirLineCASParm9 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter, the default value is 0."
        ::= { circuitLineEntry 15 }

cirLineCASParm10 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter, the default value is 0."
        ::= { circuitLineEntry 16 }

cirLineCASParm11 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter, the default value is 0."
        ::= { circuitLineEntry 17 }

cirLineCASParm12 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter, the default value is 0."
        ::= { circuitLineEntry 18 }

cirLineCASParm13 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter, the default value is 0."
        ::= { circuitLineEntry 19 }

cirLineCASParm14 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter, the default value is 0."
        ::= { circuitLineEntry 20  }

cirLineCASParm15 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter, the default value is 0."
        ::= { circuitLineEntry 21 }

cirLineCASParm16 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter, the default value is 0."
        ::= { circuitLineEntry 22  }

cirLineCASParm17 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter, the default value is 0."
        ::= { circuitLineEntry 23  }

cirLineCASParm18 OBJECT-TYPE
    SYNTAX      INTEGER (0..255)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "Cas-switching Parameter, the default value is 0."
        ::= { circuitLineEntry 24  }

cirLineCachedSVC OBJECT-TYPE
    SYNTAX      INTEGER {
                off(1),
                on(2)
        }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "SVC Caching mode, default is off(1)."
        ::= { circuitLineEntry 25  }
 

--
-- The following describes the MIB variables for the rsrcPartiTable.
-- This table provides the manager a detailed view of the ATM ports
-- or trunks resouces available on the switch. In release 9.1, this 
-- table will only available for BXM cards. 
-- The resource partition does not exist for a down line.

rsrcPartiTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF RsrcPartiEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The ATM Resouce Paritition Configuration table."
    --DEFAULT   test-function   test_rsrcpartitable
    --DEFAULT   next-function   next_rsrcpartitable
    --DEFAULT   get-function    get_rsrcpartitable_%t
    --DEFAULT   view-mask       BPX_VIEW 
        ::= { rsrcServiceObjects 1  }

rsrcPartiEntry OBJECT-TYPE
    SYNTAX      RsrcPartiEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the ATM Resource Partition Configuration table."
    INDEX   { switchIfIndex, rsrcPartiId }
        ::= { rsrcPartiTable 1  }

RsrcPartiEntry ::=
    SEQUENCE {
        rsrcPartiId               INTEGER,
        rsrcPartiAdminStatus      INTEGER,
        rsrcPartiOperStatus       INTEGER,
        rsrcPartiPvcMaxLcns       INTEGER,
        rsrcPartiPvcMaxBw         INTEGER,
        rsrcPartiVsiMinLcns       INTEGER,
        rsrcPartiVsiMaxLcns       INTEGER,
        rsrcPartiVsiVpiStart      INTEGER,
        rsrcPartiVsiVpiEnd        INTEGER,
        rsrcPartiVsiMinBw         INTEGER,
        rsrcPartiVsiMaxBw         INTEGER,
        rsrcPartiVsiIlmiEnable    INTEGER
        }

rsrcPartiId  OBJECT-TYPE
    SYNTAX      INTEGER (1..2)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Resource Partition Identification. 
                 A partition in the BXM resource is dedicated for
                 control by the corresponding VSI Master. The
                 partition is not available for any other cards.
                 Number of partitions supported
                 is one for 9.1 release and 9.2 initial release.
                 "
        ::= { rsrcPartiEntry 1  }

rsrcPartiAdminStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
                }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The Administration Status for this resource partition. 
                 A user may enable or disable this partition.
                 "
        ::= { rsrcPartiEntry 2  }

rsrcPartiOperStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                enabled(1),
                disabled(2)
                }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The operational Status for this resource partition."
        ::= { rsrcPartiEntry 3  }

rsrcPartiPvcMaxLcns  OBJECT-TYPE
    SYNTAX      INTEGER (0..65535)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The maximum number of PVC LCNs of ALL partitions on
                 the Logical Intreface (slot.port.vtrk for trunks and 
                 slot.port for lines). The LCN value is logical interface
                 based.
                 The default value for this object is 256.
                "
        ::= { rsrcPartiEntry 4  }

rsrcPartiPvcMaxBw  OBJECT-TYPE
    SYNTAX      INTEGER (0..1412830)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The maximum PVC bandwidth of ALL partitions on the
                 Logical Intreface (slot.port.vtrk for trunks and 
                 slot.port for lines). The bandwidth is logical interface 
                 based. The default value for this object is the line 
                 rate of this interface.
                 --------------------------------------------------
                     Card Type              |     Bandwidth     
                 --------------------------------------------------
                     BXM E3                 |       80000    
                     BXM T3                 |       96000    
                     BXM OC3                |       353208    
                     BXM OC12               |       1412830   
                 --------------------------------------------------
                "
        ::= { rsrcPartiEntry 5  }

rsrcPartiVsiMinLcns  OBJECT-TYPE
    SYNTAX      INTEGER (0..65535)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The minimum VSI LCN number of the partition.
                 The default value for this object is 0.
                "
        ::= { rsrcPartiEntry 6  }

rsrcPartiVsiMaxLcns  OBJECT-TYPE
    SYNTAX      INTEGER (1..65535)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The maximum VSI LCN number of the partition.
                 The default value for this object is 1.
                "
        ::= { rsrcPartiEntry 7  }

rsrcPartiVsiVpiStart  OBJECT-TYPE
    SYNTAX      INTEGER (1..4095)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The start of VSI VPI number of the partition.
                 1..4095 for NNI Trunk/Port configuration
                 2..4095 for autoroute trunk
                 1..255  for UNI Port configuration
                "
        ::= { rsrcPartiEntry  8  }

rsrcPartiVsiVpiEnd  OBJECT-TYPE
    SYNTAX      INTEGER (1..4095)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The end of VSI VPI number of the partition.
                 1..4095 for NNI Trunk/Port configuration
                 2..4095 for autoroute trunk 
                 1..255  for UNI Port configuration.
                "
        ::= { rsrcPartiEntry 9   }

rsrcPartiVsiMinBw  OBJECT-TYPE
    SYNTAX      INTEGER (0..1412830)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The minimum VSI bandwidth of the partition.
                 The default value for this object is 0.
                 --------------------------------------------------
                     Card Type              |     Bandwidth     
                 --------------------------------------------------
                     BXM E3                 |       80000    
                     BXM T3                 |       96000    
                     BXM OC3                |       353208    
                     BXM OC12               |       1412830   
                 --------------------------------------------------
                "
        ::= { rsrcPartiEntry 10  }

rsrcPartiVsiMaxBw  OBJECT-TYPE
    SYNTAX      INTEGER (0..1412830)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The maximum VSI bandwidth of the partition.
                 The default value for this object is 0.
                 --------------------------------------------------
                     Card Type              |     Bandwidth     
                 --------------------------------------------------
                     BXM E3                 |       80000    
                     BXM T3                 |       96000    
                     BXM OC3                |       353208    
                     BXM OC12               |       1412830   
                 --------------------------------------------------
                "
        ::= { rsrcPartiEntry 11  }
 
rsrcPartiVsiIlmiEnable OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
                }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "VSI ILMI Session Enabling Information.  A user may
                 enable or disable VSI ILMI session on this interface
                 for this partition.  On port interfaces, this ILMI
                 session is shared with the autoroute ILMI session.
                 On trunk interfaces, ILMI session can be enabled
                 on only one of the partitions.  These ILMI sessions
                 talk with a peer ILMI session at the other end of
                 the interface.
                 "
        ::= { rsrcPartiEntry 12  }

--
-- The following describes the MIB variables for the atmQbinTable.
-- This table provides the manager a detailed view of the ATM ports
-- or trunks queue parameters available on the switch. In release 
-- 9.0, this table will only available for BXM cards.
-- Qbin interface does not exist for a down line.

atmQbinTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF AtmQbinEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "The ATM Port or Trunk Qbin Configuration table."
    --DEFAULT   test-function   test_atmqbintable
    --DEFAULT   next-function   next_atmqbintable
    --DEFAULT   get-function    get_atmqbintable_%t
    --DEFAULT   view-mask       BPX_VIEW 
        ::= { rsrcServiceObjects 2  }

atmQbinEntry OBJECT-TYPE
    SYNTAX      AtmQbinEntry
    ACCESS      not-accessible
    STATUS      mandatory
    DESCRIPTION "An entry in the ATM Ports or Trunks Qbin Configuration table."
    INDEX   { switchIfIndex, atmQbinId }
        ::= { atmQbinTable 1  }

AtmQbinEntry ::=
    SEQUENCE {
        atmQbinId               INTEGER,
        atmQbinAdminStatus      INTEGER,
        atmQbinOperStatus       INTEGER,
        atmQbinMinBw            INTEGER,
        atmQbinDepth            INTEGER,
        atmQbinLoClp            INTEGER,
        atmQbinHiClp            INTEGER,
        atmQbinEfci             INTEGER,
        atmQbinTmpltCnfg        INTEGER,
        atmQbinVcShaping        INTEGER,
        atmQbinEpd              INTEGER
        }

atmQbinId  OBJECT-TYPE
    SYNTAX      INTEGER (10..15)
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Qbin Identification."
        ::= { atmQbinEntry 1  }

atmQbinAdminStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
                }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The Administration Status for this Qbin. A user 
                 may enable or disable this Qbin."
        ::= { atmQbinEntry 2  }

atmQbinOperStatus OBJECT-TYPE
    SYNTAX      INTEGER {
                enabled(1),
                disabled(2)
                }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "The Operational Status for this qbin."
        ::= { atmQbinEntry 3  }

atmQbinMinBw  OBJECT-TYPE
    SYNTAX      INTEGER (0..1412830)
    ACCESS      read-write
    STATUS      deprecated 
    DESCRIPTION "The minimum bandwidth of the Qbin. The default value
                 for this object is 0.
                 --------------------------------------------------
                     Card Type              |     Bandwidth     
                 --------------------------------------------------
                     BXM E3                 |       80000    
                     BXM T3                 |       96000    
                     BXM OC3                |       353208    
                     BXM OC12               |       1412830   
                 --------------------------------------------------
                 "
        ::= { atmQbinEntry 4  }

atmQbinDepth  OBJECT-TYPE
    SYNTAX      INTEGER (0..524287)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The discard threshold of the Qbin.
                 The default value for the object is 9800.
                "
        ::= { atmQbinEntry 5  }

atmQbinLoClp  OBJECT-TYPE
    SYNTAX      INTEGER (0..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The low CLP threshold of this qbin in percentage.
                 The default value for the object is 80."
        ::= { atmQbinEntry 6  }

atmQbinHiClp  OBJECT-TYPE
    SYNTAX      INTEGER (0..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The high CLP threshold of this qbin in percentage.
                 The default value for the object is 80."
        ::= { atmQbinEntry 7  }

atmQbinEfci  OBJECT-TYPE
    SYNTAX      INTEGER (0..100)
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The EFCI threshold of this qbin in percentage.
                 The default value for the object is 30."
        ::= { atmQbinEntry 8  }

atmQbinTmpltCnfg  OBJECT-TYPE 
    SYNTAX      INTEGER {
                yes(1),
                no(2)
                }
    ACCESS      read-write
    STATUS      mandatory
    DESCRIPTION "The value for this object is a directive to the agent, on
                 whether to use values for qbin parameters from the Service
                 Class tempalate associated with this interface  OR those
                 given provided by the objects in the PDUs.
                 If the value of this object is no(2), the agent uses the
                 values given in the rest of the columns in this table.
                 If the value of this object is yes(1), the agent uses the
                 qbin values from the qbin template associated with the
                 interface in the set request.
                 If this object exists in the pdu with other settable object
                 and has a value of yes(1), it is incorrect.
                 If the object doesnot exist in the set PDU, the set request
                 is considered user configured (no(2)). The value of this
                 object in the database reflects whether the qbin was
                 configured using the values defined by the template or
                 provided by the user."
        ::= { atmQbinEntry 9  }
 
atmQbinVcShaping OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
                }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Indicates whether the VC shaping is being applied to this
                 qbin."
        ::= { atmQbinEntry 10  }
 
atmQbinEpd      OBJECT-TYPE
    SYNTAX      INTEGER {
                enable(1),
                disable(2)
                }
    ACCESS      read-only
    STATUS      mandatory
    DESCRIPTION "Indicates whether Early Packet Discard (EPD) is enabled on this
                 qbin."
        ::= { atmQbinEntry 11 }

 -- The serialPortTable allows management of serial data interfaces 
 -- that are not found in DS1, DS3, or SONET media tables. 
 -- This does not include control ports, auxillary, or printer ports.
 -- Typical serialPorts are found on the LDP, LDM, SDP, and HDM cards.
 
 serialPortTable OBJECT-TYPE
     SYNTAX      SEQUENCE OF SerialPortEntry
     ACCESS      not-accessible
     STATUS      mandatory
     DESCRIPTION "The serial port configuration table."
     --DEFAULT   test-function   test_serialporttable
     --DEFAULT   next-function   next_serialporttable
     --DEFAULT   get-function    get_serialporttable_%t
     --DEFAULT   view-mask       IPX_VIEW
         ::= { switchMedia 7 }
 
 serialPortEntry OBJECT-TYPE
     SYNTAX      SerialPortEntry
     ACCESS      not-accessible
     STATUS      mandatory
     DESCRIPTION "An entry in the Serial Port table."
     INDEX   { switchIfIndex }
         ::= { serialPortTable 1  }
 
 SerialPortEntry ::=
     SEQUENCE {
         serialPortIfType       INTEGER,
         serialPortStatus       INTEGER,
         serialPortDceDte       INTEGER,
         serialPortClk          INTEGER,
         serialPortUtil         INTEGER,
         serialPortEndptPtr     OBJECT IDENTIFIER,
         serialPortConnPtr      OBJECT IDENTIFIER,
         serialPortEiaUpdt      INTEGER,
         serialPortDfmEnable    INTEGER,
         serialPortDfmLen       INTEGER,
         serialPortLeadState    INTEGER
     }
 
 serialPortIfType OBJECT-TYPE
     SYNTAX      INTEGER {
                 other   (1),
                 rs232   (2),
                 rs449   (3),
                 x21     (4),
                 v35     (5),
                 hssi    (6)
     }
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "The type of physical interface associated with this port."
         ::= { serialPortEntry 1  }
 
  
 serialPortStatus OBJECT-TYPE
     SYNTAX      INTEGER {
                 other(1),
                 up(2),
                 down(3),
                 failed(4)
         }
     ACCESS  read-write
     STATUS  mandatory
     DESCRIPTION "The operational status of a serial port."
     ::= { serialPortEntry 2 }
  
 
 serialPortDceDte OBJECT-TYPE
     SYNTAX      INTEGER {
                 other   (1),
                 dce     (2),
                 dte     (3)
     }
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "The dce/dte type of this port."
     ::= { serialPortEntry 3 }
 
 serialPortClk OBJECT-TYPE
     SYNTAX      INTEGER {
                 other  (1),
                 normal (2),
                 split  (3),
                 looped (4)
     }
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "This specifies the port clocking configuration. 
                  This is not configurable for LDP or LDM ports.
                  An attempt to change this object for non-configurable
                  interfaces returns a generalError." 
         ::= { serialPortEntry 4 }
 
 serialPortUtil OBJECT-TYPE
     SYNTAX      INTEGER (0..100)
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "This specifies the serial port percent utilization. 
                  The default value is 100. An attempt to change this object
                  for non-configurable interfaces will return a generalError." 
         ::= { serialPortEntry 5 }

 serialPortEndptPtr OBJECT-TYPE
     SYNTAX      OBJECT IDENTIFIER
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "This OID type object serves as a pointer to the 
                 object instance in the relevant row of an endptTable."
         ::= { serialPortEntry 6 }

 serialPortConnPtr OBJECT-TYPE
     SYNTAX      OBJECT IDENTIFIER
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "This OID type object serves as a pointer to the 
                 object instance in the relevant row of the connTable."
         ::= { serialPortEntry 7 }
 
 serialPortEiaUpdt OBJECT-TYPE
     SYNTAX      INTEGER (0..20)
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "Sampling rate for updating EIA control leads in
                  number of samples per second. The default is 2."
         ::= { serialPortEntry 8 }

 serialPortDfmEnable OBJECT-TYPE
     SYNTAX      INTEGER {
                 enabled(1),
                 disabled(2)       
     }
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "Specifies whether Data Frame Multiplexing is enabled
                  or disabled for this port. The value of this object
                  for ports that do not support DFM is always disabled(2).
                  DFM cannot be configured if an active embedded EIA connection
                  exists on this port, so an attempt to change it will
                  return a generalError."
         ::= { serialPortEntry 9 }
  
 serialPortDfmLen  OBJECT-TYPE
     SYNTAX      INTEGER {
                 serialPortDfmOther(1),
                 serialPortDfm7(7),
                 serialPortDfm8(8),
                 serialPortDfm16(16)       
     }
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "Specifies the pattern length in bits for the DFM algorithm.
                  This cannot be changed if an active embedded EIA connection
                  exists on this port, so an attempt to change it will
                  return a generalError."
         ::= { serialPortEntry 10 }

serialPortLeadState OBJECT-TYPE
     SYNTAX      INTEGER
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "Specifies the status of different leads on a serial port of
                  HDM/LDM card.  The value returned by the agent is a bitmap
                  relfecting whether a lead state is HIGH (ON: value 1) or LOW
                  (OFF: value 0). The unused bit is LOW (OFF: value 0). 
                  Following talbe shows the relationship between the bit
                  with the position in the bitmap and the lead type with
                  the physical pin number in each of the serial port 
                  interface:
                  
                  +=============================================+
                  | bit position | RS-232   | RS-449    | V.35  |
                  |=============================================|
                  |    LSB1      | TST/25   | SB/36     |       |
                  |    LSB2      | RI/22    | IC/15     | RI/J  |
                  |    LSB3      | DSR/6    | DM/11&29  | DSR/E |
                  |    LSB4      | CTS/5    | CS/9&27   | CTS/D |
                  |    LSB5      | SRxD/16  |           |       |
                  |    LSB6      |          | TM/18     | TM/K  |
                  |    LSB7      | DCD/8    | RR/13&31  | DCD/F |
                  |    LSB8      | SCTS/13  |           |       |
                  |    LSB9      | SDCD/12  |           |       |
                  |    LSB10     | SI/23    | SI/2      |       |
                  |    LSB11     |          | SQ/33     |       |
                  |    LSB12     | QM/11    |           |       |
                  |    LSB13     |          | IS/28     |       |
                  |    LSB14     | LL/18    | LL/10     |       |
                  |    LSB15     | DTR/20   | TR/12&30  | DTR/H |
                  |    LSB16     | RTS/4    | RS/7&25   | RTS/C |
                  |    LSB17     | STxD/14  |           |       |
                  |    LSB18     | RL/21    | RL/14     |       |
                  |    LSB19     |          | NS/34     |       |
                  |    LSB20     | SRTS/19  |           |       |
                  |    LSB22     | SF/23    | SF/16     |       |
                  |    LSB24     | ***/11   | SS/32     |       |
                  +=============================================+

            Example: If the returned value for the object is 0x00008000 for
                     a RS-232 port, the DTR (pin 20) state is HIGH.
           "
         ::= { serialPortEntry 11 }
 
 --
 -- ****** DATA CONNECTION TABLES ******
 --
 -- This is the table describing a data connection end-point.
 -- Each connection end-point describes the particular 
 -- characteristics of the end-point. Data connections are supported
 -- by serial data cards including SDP, LDP, HDM, LDM. Data connections
 -- are also supported by channelized data cards, such as CDP and CVM.
 -- The UVM card does not support channelized data at the time of the
 -- first release of the dataEndptTable.
 -- 
 
 
 dataEndptTable OBJECT-TYPE 
     SYNTAX      SEQUENCE OF DataEndptEntry
     ACCESS      not-accessible
     STATUS      mandatory
     DESCRIPTION "The data End-Point table."
     --DEFAULT   test-function   test_dataendpttable
     --DEFAULT   next-function   next_dataendpttable
     --DEFAULT   get-function    get_dataendpttable_%t
     --DEFAULT   view-mask       IPX_VIEW 
         ::= { switchConnection 17  }
 
 dataEndptEntry OBJECT-TYPE
     SYNTAX      DataEndptEntry
     ACCESS      not-accessible
     STATUS      mandatory
     DESCRIPTION "An entry in the data End-point table."
     INDEX   { dataEndptIndex }
         ::= { dataEndptTable 1 }
 
 DataEndptEntry ::=
     SEQUENCE {
         dataEndptIndex          INTEGER,    
         dataOtherEndptIndex     INTEGER,    
         dataEndptDesc           DisplayString,
         dataOtherEndptDesc      DisplayString,
         dataEndptAdmStatus      INTEGER,
         dataEndptOperStatus     INTEGER,
         dataEndptRate           INTEGER,
         dataEndPtRemoteFail     INTEGER,
         dataEndptNoRouteFail    INTEGER,
         dataEndptTestFail       INTEGER,
         dataEndptTestType       INTEGER,
         dataEndptLpbkStatus     INTEGER,
         dataEndptLocLpbkEnable  INTEGER,
         dataEndptLocRmtLpbk     INTEGER,
         dataEndptConnPtr        OBJECT IDENTIFIER,
         dataEndptPortPtr        OBJECT IDENTIFIER,
         dataEndptTrkAvoid       INTEGER,    
         dataEndptZCSAvoid       INTEGER,    
         dataEndptFastEia        INTEGER,
         dataEndptEiaUpdt        INTEGER,
         dataEndptSampPerPkt     INTEGER,
         dataEndptTspnt          INTEGER,
         dataEndptSuperRateN     INTEGER,
         dataEndptCoding         INTEGER,
         dataEndptDfmEnable      INTEGER,
         dataEndptDfmLen         INTEGER,
         dataEndptOeDceDte       INTEGER,
         dataEndptOeClk          INTEGER
     }
 
 dataEndptIndex OBJECT-TYPE
     SYNTAX      INTEGER 
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "Index into table for this end-point." 
         ::= { dataEndptEntry 1 }
 
 dataOtherEndptIndex OBJECT-TYPE
     SYNTAX      INTEGER 
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "Index into dataEndptTable for the other end point." 
         ::= { dataEndptEntry 2 }
 
 dataEndptDesc OBJECT-TYPE
     SYNTAX      DisplayString
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "String describing this  end-point;  
                  domain, nodename, slot, and channel.
                  Domain and nodename need not be given but slot and
                  port or  channel must be valid.
                  For super-rate connections it should include
                  the channel range on a channelized data card,
                  and optionally, the sufix 'a' for alternating channels.
                  For example, '3.1-5a' is a valid description."
         ::= { dataEndptEntry 3 }
 
 dataOtherEndptDesc OBJECT-TYPE
     SYNTAX      DisplayString
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "String describing the remote end-point's 
                  domain, nodename, slot, and port or channel.
                  For super-rate connections it should include
                  the channel range on a channelized data card,
                  and optionally, the sufix 'a' for alternating channels.
                  For example, 'D2.Node2.3.1-5' is a valid description."
         ::= { dataEndptEntry 4 }
 
 dataEndptAdmStatus OBJECT-TYPE
     SYNTAX      INTEGER {
                 added(1),
                 deleted(2),
                 configured(3),
                 testing(4)
         }
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "User requested state for end-point table row.  A user can
                  add this VC or delete this VC by setting this object
                  appropriately.  The added(1) value is returned for get-
                  requests. To configure the end-point, set this object
                  to configured(3). The dataEndptLocLpbkEnable and 
                  dataEndptLocRmtLpbk are configured by seperate set-requests.
                  To test a connection, testing(4) is set and the value
                  of testCon(1) is set for dataEndptTestType."
         ::= { dataEndptEntry 5 }
 
 dataEndptOperStatus OBJECT-TYPE
     SYNTAX      INTEGER {
                 ok(1),
                 okPendingDown(2),
                 down(3),
                 failed(4),
                 inTest(5),
                 okPendingRoute(6),
                 okPendingDelete(7),
                 looped(8),
                 unknown(9)
         }
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "The operational state of the end-point."
         ::= { dataEndptEntry 6 }
 
 dataEndptRate OBJECT-TYPE
     SYNTAX      INTEGER 
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "The data rate of the connection in hundre of bits per
                  second. This must be given to create an endpoint."
         ::= { dataEndptEntry 7 }
 
 dataEndPtRemoteFail OBJECT-TYPE
     SYNTAX      INTEGER {
                 false(1),
                 true(2)
         }
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "End-point is failed because of a remote end-point failure.
                  The remote end-point is on a node that resides in another
                  domain making the connection an inter-domain connection."
         ::= { dataEndptEntry 8 }
 
 dataEndptNoRouteFail OBJECT-TYPE
     SYNTAX      INTEGER {
                 false(1),
                 true(2)
         }
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "End-point is failed is because no route to the
                  remote end-point could be found."
         ::= { dataEndptEntry  9 }
 
 dataEndptTestFail OBJECT-TYPE
     SYNTAX      INTEGER {
                 false(1),
                 true(2)
         }
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "End-point is failed because of the failure of a
                  connection test if true(2)."
         ::= { dataEndptEntry 10 }
 
 dataEndptTestType OBJECT-TYPE
     SYNTAX      INTEGER {
                 test(1), testNolp(3), noTest(5)
         }
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "Specifies that the switch will test data path integrity.
                 testCon(1) is set to do the test,testNolp(3) is used to do
                 a test without automatically creating a remote loopback,
                 and noTesting(5) is normally returned for get-requests."
         ::= { dataEndptEntry 11 }
 
 dataEndptLpbkStatus OBJECT-TYPE
     SYNTAX      INTEGER
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "Specifies the current Loopback Status of the endpoint.
                  A value of -1 is returned if no loopbacks are set, or
                  else the value returned for this object is a bitmap
                  of the current loopback status associated with this
                  end point. The bitmap is defined as follows:
                  
          LP_RMT_RMT   0 /* Remote nodes remote muxbus loopback   */
          LP_RMT_TST   1 /* Remote nodes tstcon loopback          */
          LP_LOC_RMT   2 /* Local  nodes remote muxbus loopback   */
          LP_LOC_TST   3 /* Local  nodes tstcon loopback          */
          LP_LOC_LOC   4 /* Local  nodes local muxbus loopback    */
          LP_LOC_PORT  5 /* Local  nodes port loopback            */
          LP_LOC_TPORT 6 /* Local  nodes port test loopback       */
          LP_RMT_LOC   7 /* Remote nodes local muxbus loopback    */
          LP_RMT_PORT  8 /* Remote nodes port loopback            */
          LP_RMT_TPORT 9 /* Remote nodes port test looback        */
          LP_LOC_CSU 10 /* Local  DDS network requested CSU loopback */
          LP_RMT_CSU 11 /* Remote DDS network requested CSU loopback */
          LP_LOC_DSU 12 /* Local  DDS network requested DSU loopback */
          LP_RMT_DSU 13 /* Remote DDS network requested DSU loopback */
          LP_LOC_EXT 14 /* Local  DDS external loopback          */
          LP_RMT_EXT 15 /* Remote DDS external loopback          */ "
         ::= { dataEndptEntry 12 }
  
 dataEndptLocLpbkEnable OBJECT-TYPE
     SYNTAX      INTEGER {
                 enabled(1),
                 disabled(2)
         }
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "Enables or disables the Local Loopback State."
         ::= { dataEndptEntry 13 }
  
dataEndptLocRmtLpbk OBJECT-TYPE
     SYNTAX      INTEGER {
                 enabled(1),
                 disabled(2)
         }
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "Enables or disables the Local Remote Loopback."
         ::= { dataEndptEntry 14 }
 
 dataEndptConnPtr OBJECT-TYPE
     SYNTAX      OBJECT IDENTIFIER
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "A pointer to general connection information, this is an
                  object identifier specifying the first column of the
                  appropriate row in the connTable. This can be used to 
                  obtain connection status and routing information."
         ::= { dataEndptEntry 15 }
 
 dataEndptPortPtr OBJECT-TYPE
     SYNTAX      OBJECT IDENTIFIER
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "This OID type object serves as a pointer to the first 
                 object instance in the relevant row of the lineChannel or
                 serialPort table."
         ::= { dataEndptEntry 16 }
 
 dataEndptTrkAvoid OBJECT-TYPE
     SYNTAX      INTEGER {
                 none(1),
                 satellite(2),
                 terrestrial(3)
         }
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "User selectable types of trunks to avoid while routing
                  this connection. Options are to avoid satellite links,
                  terrestrial links, or to not avoid any specific type of link.
                  This object is optional during the creation of an endpoint
                  and is none(1) by default."
         ::= { dataEndptEntry 17 }
 
 dataEndptZCSAvoid OBJECT-TYPE
     SYNTAX      INTEGER {
                 false(1),
                 true(2)
         }
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "Flag to force the connection to avoid trunks with zero
                  code suppression (ZCS). This object is optional during
                  the creation of an endpoint and is false by default."
         ::= { dataEndptEntry 18 }
 
 dataEndptFastEia  OBJECT-TYPE
     SYNTAX      INTEGER {
                 false(1),
                 true(2)
         }
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "This object specifies interleaved (fast) EIA for the data
                  connection. To specify fast EIA for a data connection,
                  this object must be set to true during endpoint creation.
                  Fast EIA can be used only with dataEndptRate less than or
                  equal to 5120. Fast EIA is supported by SDP, HDM ports and
                  is false by default."
         ::= { dataEndptEntry 19 }
 
 dataEndptEiaUpdt OBJECT-TYPE
     SYNTAX      INTEGER (0..20)
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "Sampling rate for updating EIA control leads in
                  number of samples per second. The default is 2."
         ::= { dataEndptEntry 20 }
 
 dataEndptSampPerPkt  OBJECT-TYPE
     SYNTAX      INTEGER {
                 maximum(1),
                 two-bytes(2),
                 four-bytes(4),
                 five-bytes(5),
                 ten-bytes(10)
         }
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "This object specifies the number of samples per packet
                  for connection types that support partially-filled
                  packets. This object may be given when a subrate
                  connection is created. If this value is not given,
                  the maximum number of samples for a particular connection
                  rate will be used. When partially-filled packets are not
                  supported, a generalError is returned.
                  The rates that support partially-filled packets are defined
                  by the following values of dataEndptRate: 
 
                  two-bytes:  12, 18, 24, 32, 36 
                  four-bytes: 24, 32, 36, 48, 64, 72 
                  five-bytes: 32, 36, 48, 64, 72
                  ten-bytes:  48, 64, 72, 80, 96, 120, 128, 144
 
                  'two-bytes' and 'five-bytes' are supported only if 
                  dataEndptFastEia is enabled. 'four-bytes' and 'ten-bytes'
                  are supported only if dataEndptFastEia is disabled." 
         ::= { dataEndptEntry 21 }
 
 dataEndptTspnt OBJECT-TYPE
     SYNTAX      INTEGER {
                 false(1),
                 true(2)
         }
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "To create a transparent connection this is set to true.
                  Transparent rates can be specified only for channelized 
                  data cards, and with dataEndptRates: 24, 48, 96 or 560.
                  dataEndptTspnt is false by default."
                  
         ::= { dataEndptEntry 22 }
 
 dataEndptSuperRateN OBJECT-TYPE
     SYNTAX      INTEGER (0..8)
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "This object must be specified when adding a super-rate 
                  connection to specify the number of timeslots (DS0's).
                  This object must be specified when adding super-rate conns.
                  Settable values range from 1 to 8, and zero is returned 
                  for get-requests on non-super-rate endpoints. Super rates
                  can be specified only if a channelized data card is present
                  at least one endpoint, and the dataEndptRate is 560 or 640."
         ::= { dataEndptEntry 23 }
 
 dataEndptCoding  OBJECT-TYPE
     SYNTAX      INTEGER {
                 dataCode78(1),
                 dataCode88(2),
                 dataCode88I(3),
                 dataCode78E(4)
         }
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "The data coding format for data transmissions.
                  This object may be given during endpoint creation.
                  If not given, the default value is dataCode78(1).
 
                  dataCode78(1),  7 bits data, 1 bit set, for ZCS trunks.
                  dataCode88(2),  8 bits data, not for ZCS trunks.
                  dataCode88I(3), 8 bits inverted data, not for ZCS trunks.
                  dataCode78E(4), 7 bits data, 1 bit set, with embedded 
                                  EIA leads, not for ZCS trunks.

                  dataCode78E(4),  (7/8E = Embedded EIA) applies to 
                  non-local LDP or LDM connections with dataEndptRate
                  less than or equal to 192. Embedded EIA (dataCode78E) is
                  not supported for DDS connections, and forces DFM to be
                  enabled with a pattern length of 8 (dataEndptDfm8)."
         ::= { dataEndptEntry 24 }
  
 dataEndptDfmEnable OBJECT-TYPE
     SYNTAX      INTEGER {
                 enabled(1),
                 disabled(2)       
     }
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "Specifies whether Data Frame Multiplexing is enabled
                  or disabled for this port. The value of this object
                  for ports that do not support DFM is always disabled(2)."
         ::= { dataEndptEntry 25 }
  
 dataEndptDfmLen  OBJECT-TYPE
     SYNTAX      INTEGER {
                 dataEndptDfmOther(1),
                 dataEndptDfm7(7),
                 dataEndptDfm8(8),
                 dataEndptDfm16(16)       
     }
     ACCESS      read-only
     STATUS      mandatory
     DESCRIPTION "Specifies the pattern length in bits for the DFM algorithm."
         ::= { dataEndptEntry 26 }
 
 dataEndptOeDceDte OBJECT-TYPE
     SYNTAX      INTEGER {
                 other   (1),
                 dce     (2),
                 dte     (3)
     }
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "The dce/dte type at the other end of this connection. The
                  read-write access is provided so that the interface type 
                  for a remote endpoint may also be set in Tiered Networks."
     ::= { dataEndptEntry 27 }
 
 dataEndptOeClk OBJECT-TYPE
     SYNTAX      INTEGER {
                 other  (1),
                 normal (2),
                 split  (3),
                 looped (4)
     }
     ACCESS      read-write
     STATUS      mandatory
     DESCRIPTION "This derscribes the port clocking configuration
                  at the other end of this connection. The read-write access
                  for dataEndptOeClk is provided so that the clock source  
                  for a remote endpoint may also be set in Tiered Networks."
         ::= { dataEndptEntry 28 }
 
 
END
