{
  "imports": {
    "class": "imports",
    "A3COM0027-RMON-EXTENSIONS": [
      "remotePoll"
    ],
    "RFC-1215": [
      "TimeTicks"
    ],
    "RMON-MIB": [
      "EntryStatus"
    ],
    "SNMPv2-CONF": [
      "NOTIFICATION-GROUP",
      "MODULE-COMPLIANCE"
    ],
    "SNMPv2-SMI": [
      "TimeTicks",
      "Gauge32",
      "Integer32",
      "MibIdentifier",
      "OBJECT-IDENTITY",
      "Counter64",
      "NOTIFICATION-TYPE",
      "TRAP-TYPE",
      "Bits",
      "MODULE-IDENTITY",
      "OBJECT-TYPE",
      "IpAddress",
      "Counter32",
      "Unsigned32",
      "iso"
    ],
    "SNMPv2-TC": [
      "DisplayString",
      "TEXTUAL-CONVENTION"
    ]
  },
  "remPollTable": {
    "name": "remPollTable",
    "oid": "1.3.6.1.4.1.43.10.25.1.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "This table is used to provide remote device monitoring facilities. This table allows a list of network devices to be set up and polled regularly (or only once) by a variety of protocols. The table can be configured to inform the management station(s) of devices that are not responding to polls or that have started to respond after a period of silence."
  },
  "remPollTableEntry": {
    "name": "remPollTableEntry",
    "oid": "1.3.6.1.4.1.43.10.25.1.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "A3COM0019-RMON-REMOTE-POLL",
        "object": "remPollIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "A table used to define device monitoring."
  },
  "remPollIndex": {
    "name": "remPollIndex",
    "oid": "1.3.6.1.4.1.43.10.25.1.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "Unique identifier of a row in the Poll Table. This index should be treated in the same way as indices of other RMON tables. The actual number of rows that can be created on any particular device depends on the memory and processing resources available at the time."
  },
  "remPollIfIndex": {
    "name": "remPollIfIndex",
    "oid": "1.3.6.1.4.1.43.10.25.1.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "Identifies the entry in the ifTable which is to be used as the source of the poll packet. This object may not be modified if the associated remPollStatus object is equal to valid(1)."
  },
  "remPollAddress": {
    "name": "remPollAddress",
    "oid": "1.3.6.1.4.1.43.10.25.1.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 50
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This DisplayString is the network address of the device to monitor. Typically this is an IP, MAC or IPX address. The following formats can be used. IP nnn.nnn.nnn.nnn - dotted format MAC AABBCCDDEEFF - hex notation IPX AABBCCDD:AABBCCDDEEFF - network : node If the format is unrecognised then a badValue error is returned. This object may not be modified if the associated remPollStatus object is equal to valid(1)."
  },
  "remPollProtocol": {
    "name": "remPollProtocol",
    "oid": "1.3.6.1.4.1.43.10.25.1.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unknown": 1,
          "ip": 2,
          "ipx": 3,
          "netBIOS": 4,
          "appleTalk": 5,
          "amp": 6,
          "llc": 7
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This defines the protocol with which to monitor the device. Writing an address to the remPollAddress field causes a default remPollProtocol value to be setup. The default value is derived from the format/content of the address. If the requested protocol is not supported or is not compatible with the remPollAddress, then an error is returned when an attempt is made to set the remPollStatus to valid. If the requested protocol is not supported then a badValue error should be returned. If the requested protocol is not compatible with the remPollAddress then an error is returned when an attempt is made to set the remPollStatus to valid. This object may not be modified if the associated remPollStatus object is equal to valid(1)."
  },
  "remPollTimeout": {
    "name": "remPollTimeout",
    "oid": "1.3.6.1.4.1.43.10.25.1.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The time-out value in hundreds of a second for each request packet. If a device replies to a request packet within the specified time-out, then the poll is judged to be successful. This object may not be modified if the associated remPollStatus object is equal to valid(1)."
  },
  "remPollAttempts": {
    "name": "remPollAttempts",
    "oid": "1.3.6.1.4.1.43.10.25.1.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The number of unsuccessful requests necessary before deciding that the device is definitely not responding. This object may not be modified if the associated remPollStatus object is equal to valid(1)."
  },
  "remPollPeriod": {
    "name": "remPollPeriod",
    "oid": "1.3.6.1.4.1.43.10.25.1.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The device will be polled every remPollPeriod seconds. The first poll is sent as soon as the remPollStatus is set to valid(1). To prevent overlapping polls, the value of remPollPeriod must be greater than 2*remPollTimeout*remPollAttempts - otherwise an error is returned when the row is set to valid. A poll consists of sending up to remPollAttempts request packets to the device. A reply to any of the request packets is sufficient to declare the poll successful (and stop further requests from being sent). A poll is deemed unsuccessful if no replies have been received after remPollTimeout*remPollAttempts seconds from the start of the poll. Note: each request packet must contain some sequence information so that late replies do not result in a successful poll. The first unsuccessful poll causes a PollFailure event to be generated - further unsuccessful polls do not generate events. The next successful poll to the device causes a PollSuccess event to be generated - further successful polls do not generate events. The pattern then repeats. The value 0 has a special value meaning of only-once When remPollStatus is set to valid(1), a single poll is started immediately. There are no events generated. whether the poll has been judged successful or unsuccessful. The results of the poll(s) can be monitored by reading the remPollLastRequest and remPolLastReply fields. This object may not be modified if the associated remPollStatus object is equal to valid(1)."
  },
  "remPollLastRequest": {
    "name": "remPollLastRequest",
    "oid": "1.3.6.1.4.1.43.10.25.1.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This is the value of sysUpTime at which the most recent request packet was sent. To avoid temporary inconsistancies between the values of remPollLastRequest and remPollLastReply. The value of remPollLastRequest should not be updated until the end of a poll. At which point (a) remPollLastRequest is updated to the sysUpTime when the most recent request packet was sent and (b) if the poll was successful then remPollLastReply is also updated."
  },
  "remPollLastReply": {
    "name": "remPollLastReply",
    "oid": "1.3.6.1.4.1.43.10.25.1.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TimeTicks",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "This is the value of sysUpTime at which the most recent reply packet was received. The device was responding at this time. The relationship of sysUpTime, remPollLastRequest and remPollLastReply provide the following information: (sysUpTime - remPollLastRequest) = time since last request was made. (sysUpTime - remPollLastReply) = time since device last responded. if( remPollLastReply => remPollLastRequest) then (remPollLastReply - remPollLastRequest) = round trip time of last request else if( remPollLastReply <remPollLastRequest) then there was no reply to the last request - the device is not responding "
  },
  "remPollInformation": {
    "name": "remPollInformation",
    "oid": "1.3.6.1.4.1.43.10.25.1.1.1.11",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "After each successful poll, this field is updated with some protocol specific information that was gleaned from the packet exchange. For the IPX protocol, this string contains the number of router hops made by the poll response packet. For the IP protocol, this string contains the value of Time-To-Live from the IP packet header."
  },
  "remPollSuccessEventIndex": {
    "name": "remPollSuccessEventIndex",
    "oid": "1.3.6.1.4.1.43.10.25.1.1.1.12",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The index of the eventEntry that is used when a successful poll is made after a number of unsuccessful polls. The eventEntry identified by a particular value of this index is the same as identified by the same value of the eventIndex object. If there is no corresponding entry in the eventTable, then no association exists. In particular, if this value is zero, no associated event will be generated, as zero is not a valid event index. This object may not be modified if the associated remPollStatus object is equal to valid(1)."
  },
  "remPollFailureEventIndex": {
    "name": "remPollFailureEventIndex",
    "oid": "1.3.6.1.4.1.43.10.25.1.1.1.13",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The index of the eventEntry that is used when an unsuccessful poll is made after a number of successful polls. The eventEntry identified by a particular value of this index is the same as identified by the same value of the eventIndex object. If there is no corresponding entry in the eventTable, then no association exists. In particular, if this value is zero, no associated event will be generated, as zero is not a valid event index. This object may not be modified if the associated remPollStatus object is equal to valid(1)."
  },
  "remPollOwner": {
    "name": "remPollOwner",
    "oid": "1.3.6.1.4.1.43.10.25.1.1.1.14",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The RMON OwnerString conventions are used here to help control the multi-manager situations."
  },
  "remPollStatus": {
    "name": "remPollStatus",
    "oid": "1.3.6.1.4.1.43.10.25.1.1.1.15",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "EntryStatus",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This object controls the creation and deletion of entries in the remPollTable. The RMON EntryStatus conventions are used."
  },
  "meta": {
    "comments": [
      "ASN.1 source file://MIBS/asn1/A3COM0019-RMON-REMOTE-POLL.mib",
      "Produced by pysmi-0.3.4 at Tue Apr 20 19:47:07 2021",
      "On host samy-ThinkPad-T495s platform Linux version 5.8.0-50-generic by user root",
      "Using Python version 3.8.5 (default, Jan 27 2021, 15:41:15) "
    ],
    "module": "A3COM0019-RMON-REMOTE-POLL"
  }
}