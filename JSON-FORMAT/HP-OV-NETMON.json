{
  "imports": {
    "class": "imports",
    "SNMPv2-CONF": [
      "MODULE-COMPLIANCE",
      "NOTIFICATION-GROUP"
    ],
    "SNMPv2-SMI": [
      "MibIdentifier",
      "IpAddress",
      "OBJECT-TYPE",
      "iso",
      "enterprises",
      "NOTIFICATION-TYPE",
      "Gauge32",
      "Counter64",
      "Bits",
      "OBJECT-IDENTITY",
      "Integer32",
      "Unsigned32",
      "MODULE-IDENTITY",
      "Counter32",
      "TimeTicks"
    ],
    "SNMPv2-TC": [
      "TEXTUAL-CONVENTION",
      "DisplayString"
    ]
  },
  "hp": {
    "name": "hp",
    "oid": "1.3.6.1.4.1.11",
    "class": "objectidentity"
  },
  "nm": {
    "name": "nm",
    "oid": "1.3.6.1.4.1.11.2",
    "class": "objectidentity"
  },
  "openView": {
    "name": "openView",
    "oid": "1.3.6.1.4.1.11.2.17",
    "class": "objectidentity"
  },
  "hpOVDistribStation": {
    "name": "hpOVDistribStation",
    "oid": "1.3.6.1.4.1.11.2.17.4",
    "class": "objectidentity"
  },
  "hpOVNetmon": {
    "name": "hpOVNetmon",
    "oid": "1.3.6.1.4.1.11.2.17.4.4",
    "class": "objectidentity"
  },
  "nmStatus": {
    "name": "nmStatus",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.1",
    "class": "objectidentity"
  },
  "nmTest": {
    "name": "nmTest",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.2",
    "class": "objectidentity"
  },
  "nmICMPStatus": {
    "name": "nmICMPStatus",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.1.1",
    "class": "objectidentity"
  },
  "nmSNMPStatus": {
    "name": "nmSNMPStatus",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.1.2",
    "class": "objectidentity"
  },
  "nmICMPListLength": {
    "name": "nmICMPListLength",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.1.1.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The length of netmon's ICMP polling list, indicating the number of managed interfaces actively being status polled."
  },
  "nmICMPPollsWithin1m": {
    "name": "nmICMPPollsWithin1m",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.1.1.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of interfaces scheduled to be polled by netmon via ICMP with the next minute."
  },
  "nmICMPSecsUntilNextPoll": {
    "name": "nmICMPSecsUntilNextPoll",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.1.1.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of seconds until the next scheduled ICMP poll. This may a negative number if netmon is behind in ICMP polling."
  },
  "nmSNMPListLength": {
    "name": "nmSNMPListLength",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.1.2.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The length of netmon's SNMP polling list, indicating the number of managed nodes actively being polled."
  },
  "nmSNMPPollsWithin1m": {
    "name": "nmSNMPPollsWithin1m",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.1.2.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of nodes scheduled to be polled by netmon via SNMP with the next minute."
  },
  "nmSNMPSecsUntilNextPoll": {
    "name": "nmSNMPSecsUntilNextPoll",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.1.2.3",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The number of seconds netmon until the next scheduled SNMP poll. It is calculated by subtracting the time of the poll at the head of the list from the current time. If netmon is behind, this can be a negative value."
  },
  "nmStatPollTable": {
    "name": "nmStatPollTable",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.2.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "A list of nmStatPollEntry's which contain user specified status values for node interfaces. There is no scalar MIB that represents the number of entries."
  },
  "nmStatPollEntry": {
    "name": "nmStatPollEntry",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.2.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "HP-OV-NETMON",
        "object": "topoObjID",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "The MIB objects in this entry contain the user specified value of the status poll for the particular interface and various support MIB variables which control when the new status takes affect and how many nodes will be changed by the action."
  },
  "topoObjID": {
    "name": "topoObjID",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.2.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The OpenView Network Node Manager ovwDB ID which corresponds to a particular internet interface object in the topology database. This object can correspond to an ip, ipx, level 2 interface. However, at first deployment only ip interfaces are supported."
  },
  "objStatus": {
    "name": "objStatus",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.2.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "ifStatusMeasureIt": 0,
          "ifStatusUnknown": 1,
          "ifStatusNormal": 2,
          "ifStatusMinor": 3,
          "ifStatusCritical": 4,
          "ifStatusUnmanaged": 5,
          "ifStatusWarning": 6,
          "ifStatusMajor": 7,
          "ifStatusRestricted": 8,
          "ifStatusTesting": 9,
          "ifStatusDisabled": 10
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "The value of this MIB object is the value that netmon will use as the status of the object whenever the particular object comes to the top of the status polling queue. If the value is different than what is currently in the OpenView Network Node Manager topology database, then netmon will process the change just like it does if the result came back from ping (e.g. netmon may change the status in the topoDB and send out various events). A value of D_ifStatus_measureIt(0) indicates that netmon should measure the status of the object (like it normally does in the product) using ping or other techniques rather than using a value provided by a user. During a set operation, the user supplied value will be written immediately to an interface specific record in netmon. The value will ripple through to the event system and topology database immediately if the <takeEffectWhen> MIB variable has a value of immediately(1) or at netmon's next status poll if <takeEffectWhen> has a value of atNextStatusPoll(0). This object is intended to be used to provide a value for interfaces only. For example, setting a value for a node will fail. The instance value for this object is the ovwDB ID (topoObjID) which corresponds to an interface in the topology DB. The ovwDB ID is used instead of ipAddress because it works for level 2, ip, ipx and in general any kind of object in the topology database. REFINEMENT/CORRECTION: Instead of actually specifying a value that netmon must use for the node, we want to communicate which nodes are inaccessible and allow netmon to determine the exact status using it's router down analysis and configuration. So the status values above will be mapped per the following table: ifStatusMeasureIt(0) Maps to 'Measure status with ping just like normal operation'. ifStatusNormal(2) Maps to 'Up'. ifStatusUnknown(1), ifStatusMinor(3), ifStatusCritical(4), ifStatusUnmanaged(5), ifStatusWarning(6), ifStatusMajor(7), ifStatusRestricted(8), ifStatusTesting(9), ifStatusDisabled(10) All others values map to inaccessible. The actual status value used will be determined by netmon using its Router Down algorithm and configuration. "
  },
  "takeEffectWhen": {
    "name": "takeEffectWhen",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.2.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "atNextStatusPoll": 0,
          "immediately": 1
        }
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This MIB object specifies when the user specified interface status will impact the Event System and the Topology database. A value of atNextStatusPoll(0) indicates that the value will be recorded in netmon's process memory but will not impact the Event System and Topology database until netmon is ready to perform the next status poll on the specified interface. A value of immediately(1) causes netmon to move the specified node to the front of the status poll queue so that the new status impacts the Event System and Topology database immediately. A set with a value greater than immediately(1) is interpretted as a time to schedule a status poll for the selected interface. The interface is rescheduled at a time equal to now + <takeEffectWhen> in seconds. This is useful for automated tests for eliminating the possibility that netmon will status poll nodes that the test is working on before the test is set up or in a different order then the test expects. The structure of this MIB table suggests that the <takeEffectWhen> value is stored in netmon on a per interface basis. This could happen at a later date but is initially implemented as a interface-independent global. For reliable operation, this MIB variable should be specified as a var-bind preceding objStatus in a multi-var-bind SNMP Set request."
  },
  "numCritRouteObjs": {
    "name": "numCritRouteObjs",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.2.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This object is currently not implemented."
  },
  "criticalRoute": {
    "name": "criticalRoute",
    "oid": "1.3.6.1.4.1.11.2.17.4.4.2.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-write",
    "status": "mandatory",
    "description": "This MIB object's value is a space separated list of <ovwDbId> <hostname>.<ifNumber> tuple values which correspond to the specified interface's criticalRoute beginning with the netmon host/interface and ending with the specified host/interface. This value is normally computed by netmon during the status poll of the specified interface. For automated test situations, you can imagine starting up the system from scratch (including netmon). At the time the test runs, it's possible that netmon has not yet calculated criticalRoute for the nodes of interest. Of course if you wait long enough, netmon will eventually get around to computing a criticalRoute value. To facilitate automated testing, a set to this object forces netmon to compute the criticalRoute attribute for the specified interface. The user supplied value is ignored. "
  },
  "meta": {
    "comments": [
      "ASN.1 source file://MIBS/asn1/HP-OV-NETMON.mib",
      "Produced by pysmi-0.3.4 at Tue Apr 20 15:43:37 2021",
      "On host samy-ThinkPad-T495s platform Linux version 5.8.0-50-generic by user root",
      "Using Python version 3.8.5 (default, Jan 27 2021, 15:41:15) "
    ],
    "module": "HP-OV-NETMON"
  }
}