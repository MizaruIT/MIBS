{
  "imports": {
    "class": "imports",
    "SNMPv2-CONF": [
      "NOTIFICATION-GROUP",
      "MODULE-COMPLIANCE"
    ],
    "SNMPv2-SMI": [
      "OBJECT-TYPE",
      "Opaque",
      "Gauge32",
      "NOTIFICATION-TYPE",
      "Unsigned32",
      "iso",
      "Counter32",
      "OBJECT-IDENTITY",
      "IpAddress",
      "Integer32",
      "Bits",
      "enterprises",
      "MODULE-IDENTITY",
      "Counter64",
      "MibIdentifier",
      "TimeTicks"
    ],
    "SNMPv2-TC": [
      "DisplayString",
      "TEXTUAL-CONVENTION"
    ],
    "VERITAS-REG": [
      "veritasModules"
    ]
  },
  "veritastc": {
    "name": "veritastc",
    "oid": "1.3.6.1.4.1.1302.5.2",
    "class": "moduleidentity",
    "lastupdated": "0401082030Z",
    "organization": "VERITAS Software Corp.",
    "contactinfo": "VERITAS Software Corp. 1600 Plymouth Street. Mountain View, CA 94043 US Tel: +1 650 318 4464 Email: support@veritas.com",
    "description": "A private TEXTUAL CONVENTION module for VERITAS"
  },
  "Float": {
    "name": "Float",
    "class": "textualconvention",
    "type": {
      "type": "Opaque",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 7,
            "max": 7
          }
        ]
      }
    },
    "status": "current",
    "description": "A single precision floating-point number. The semantics and encoding are identical for type 'single' defined in IEEE Standard for Binary Floating-Point, ANSI/IEEE Std 754-1985. The value is restricted to the BER serialization of the following ASN.1 type: FLOATTYPE ::= [120] IMPLICIT FloatType (note: the value 120 is the sum of '30'h and '48'h) The BER serialization of the length for values of this type must use the definite length, short encoding form. For example, the BER serialization of value 123 of type FLOATTYPE is '9f780442f60000'h. (The tag is '9f78'h; the length is '04'h; and the value is '42f60000'h.) The BER serialization of value '9f780442f60000'h of data type Opaque is '44079f780442f60000'h. (The tag is '44'h; the length is '07'h; and the value is '9f780442f60000'h."
  },
  "Utf8StringLong": {
    "name": "Utf8StringLong",
    "class": "textualconvention",
    "type": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "displayhint": "65535t",
    "status": "current",
    "description": "A human readable string represented using the ISO/IEC IS 10646-1 character set, encoded as an octet string using the UTF-8 transformation format described in RFC 2279. Since additional code points are added by amendments to the 10646 standard from time to time, implementations must be prepared to encounter any code point from 0x00000000 to 0x7fffffff. Byte sequences that do not correspond to the valid UTF-8 encoding of a code point or are outside this range are prohibited. The use of control codes should be avoided. When it is necessary to represent a newline, the control code sequence CR LF should be used. The use of leading or trailing white space should be avoided. For code points not directly supported by user interface hardware or software, an alternative means of entry and display, such as hexadecimal, may be provided. For information encoded in 7-bit US-ASCII, the UTF-8 encoding is identical to the US-ASCII encoding. UTF-8 may require multiple bytes to represent a single character / code point; thus the length of a Utf8String in octets may be different from the number of characters encoded. Similarly, size constraints refer to the number of encoded octets, not the number of characters represented by an encoding. Note that the size of an Utf8String is measured in octets, not characters."
  },
  "Utf8StringShort": {
    "name": "Utf8StringShort",
    "class": "textualconvention",
    "type": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "displayhint": "255t",
    "status": "current",
    "description": "A Utf8String with a maximum length of 255 octets. Note that the size of an Utf8String is measured in octets, not characters."
  },
  "Uint64ReadOnly": {
    "name": "Uint64ReadOnly",
    "class": "textualconvention",
    "type": {
      "type": "Counter64",
      "class": "type"
    },
    "status": "current",
    "description": "This textual convention implements a READ-ONLY, unsigned, 64-bit integer, per the PROPOSED STANDARD RFC2856: 'Textual Conventions for Additional High Capacity Data Types' by A. Bierman, K. McCloghrie, R. Presuhn, June 2000. This textual convention may only be used if the object type being defined will not take on signed values and is defined as read only."
  },
  "Int64ReadWrite": {
    "name": "Int64ReadWrite",
    "class": "textualconvention",
    "type": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 21
          }
        ]
      }
    },
    "displayhint": "21a",
    "status": "current",
    "description": "This textual convention implements a READ/WRITE, signed or unsigned, 64-bit integer as a 21 character octet string. The first character could be a sign the remaining 20 characters should be treated as decimal digits. The valid values for this textual convention are 0 to (2^64)-1 [18446744073709551615] for unsigned integers and -(2^64)/2 [-9223372036854775808] to ((2^64)/2)-1 [9223372036854775807] for signed integers."
  },
  "meta": {
    "comments": [
      "ASN.1 source file://MIBS/asn1/VERITAS-TC.mib",
      "Produced by pysmi-0.3.4 at Tue Apr 20 19:50:35 2021",
      "On host samy-ThinkPad-T495s platform Linux version 5.8.0-50-generic by user root",
      "Using Python version 3.8.5 (default, Jan 27 2021, 15:41:15) "
    ],
    "module": "VERITAS-TC"
  }
}