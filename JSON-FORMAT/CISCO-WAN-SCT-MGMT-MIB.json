{
  "imports": {
    "class": "imports",
    "CISCO-SMI": [
      "ciscoMgmt"
    ],
    "SNMP-FRAMEWORK-MIB": [
      "SnmpAdminString"
    ],
    "SNMPv2-CONF": [
      "NOTIFICATION-GROUP",
      "MODULE-COMPLIANCE",
      "OBJECT-GROUP"
    ],
    "SNMPv2-SMI": [
      "Gauge32",
      "iso",
      "IpAddress",
      "MODULE-IDENTITY",
      "OBJECT-TYPE",
      "NOTIFICATION-TYPE",
      "Bits",
      "Unsigned32",
      "Integer32",
      "Counter32",
      "TimeTicks",
      "Counter64",
      "MibIdentifier",
      "OBJECT-IDENTITY"
    ],
    "SNMPv2-TC": [
      "DisplayString",
      "RowStatus",
      "TEXTUAL-CONVENTION"
    ]
  },
  "ciscoWanSctMgmtMIB": {
    "name": "ciscoWanSctMgmtMIB",
    "oid": "1.3.6.1.4.1.9.9.236",
    "class": "moduleidentity",
    "revisions": [
      {
        "revision": "2002-05-21 00:00",
        "description": "1. Added ATM Service Module(axsmxg) to cwSctCardType. 2. Imported Unsigned32 from SNMPv2-SMI instead of CISCO-TC."
      },
      {
        "revision": "2001-11-18 00:00",
        "description": "Changed SYNTAX clause of cwSctFileMinorVersion from (1..65535) to (0..65535)."
      },
      {
        "revision": "2001-09-17 00:00",
        "description": "Initial version of the MIB."
      }
    ],
    "lastupdated": "200205210000Z",
    "organization": "Cisco Systems, Inc.",
    "contactinfo": " Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com",
    "description": "MIB module to manage SCT files in a node. SCTs (Service Class Templates) are nodal configuration files, which define the traffic characteristics of a switch based on class of service queues. There is a unique SCT file for every combination of card type, SCT type, SCT Id and major SCT version. For instance, the file AXSM_PORT_SCT.4.V2 refers to a SCT for the card type AXSM, port type SCT, SCT id 4 and a major version of 2. SCTs are transfered to a node using FTP by NMS. The NMS adds, deletes, discovers and monitors SCT files in a node using this MIB."
  },
  "ciscoWanSctMgmtMIBObjects": {
    "name": "ciscoWanSctMgmtMIBObjects",
    "oid": "1.3.6.1.4.1.9.9.236.1",
    "class": "objectidentity"
  },
  "cwSctFileMgmtTable": {
    "name": "cwSctFileMgmtTable",
    "oid": "1.3.6.1.4.1.9.9.236.1.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "This MIB defines a SCT file management table in which each row corresponds to a unique SCT file. When the NMS needs to add a SCT to a node, it transfers the SCT file to a transient storage area on the node. The NMS then performs a SET operation requesting the agent to accept the transferred file. The agent validates the integrity of the file and if valid, transfers the file to a secure area. It would then create a new row in the SCT file management table. This newly added row is then advertised to all NMS in the network using appropriate traps (refer CISCO-WAN-SCT-MGMT-TRAPS-MIB). Once a row is created, the agent keeps track of the operational status of the corresponding SCT file. The NMS can query the status of a SCT file by performing a GET operation on the row. The NMS can delete a SCT file and its corresponding row in the SCT file management table by performing a SET operation with the appropriate RowStatus. The agent, upon successful deletion of the row would advertise this configuration change to all the NMS using appropriate traps. The NMS could also perform a GETNEXT operation to discover all the configured SCTs on a node."
  },
  "cwSctFileMgmtEntry": {
    "name": "cwSctFileMgmtEntry",
    "oid": "1.3.6.1.4.1.9.9.236.1.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "CISCO-WAN-SCT-MGMT-MIB",
        "object": "cwSctCardType",
        "implied": 0
      },
      {
        "module": "CISCO-WAN-SCT-MGMT-MIB",
        "object": "cwSctType",
        "implied": 0
      },
      {
        "module": "CISCO-WAN-SCT-MGMT-MIB",
        "object": "cwSctId",
        "implied": 0
      },
      {
        "module": "CISCO-WAN-SCT-MGMT-MIB",
        "object": "cwSctMajorVersion",
        "implied": 0
      }
    ],
    "status": "current",
    "description": "An entry in the SCT file Management Table. This represents a unique SCT file in the node. Each entry contains the configuration and status information of a specific SCT in the node."
  },
  "cwSctCardType": {
    "name": "cwSctCardType",
    "oid": "1.3.6.1.4.1.9.9.236.1.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "axsm": 1,
          "axsme": 2,
          "pxm1e": 3,
          "hsfr": 4,
          "axsmxg": 5
        }
      }
    },
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "This represents service modules in a node that require the use of a SCT. The content of the SCT varies depending on the specific hardware used. Hence there is a different SCT for every type of card. The card types that support SCTs are listed in the SYNTAX clause"
  },
  "cwSctType": {
    "name": "cwSctType",
    "oid": "1.3.6.1.4.1.9.9.236.1.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "portSct": 1,
          "cardSct": 2
        }
      }
    },
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "There are several types of SCTs. The portSct (1) specifies traffic parameters that are applicable to a logical port within a card. The cardSct (2) specifies traffic parameters that are applicable to the whole card."
  },
  "cwSctId": {
    "name": "cwSctId",
    "oid": "1.3.6.1.4.1.9.9.236.1.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Unsigned32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "Each logical port on a service module could need different 'class of service' characteristics. This can be achieved by applying different SCTs on different ports. Thus for a given card type, there could be multiple SCTs of different IDs."
  },
  "cwSctMajorVersion": {
    "name": "cwSctMajorVersion",
    "oid": "1.3.6.1.4.1.9.9.236.1.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Unsigned32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "not-accessible",
    "status": "current",
    "description": "The SCT file consists of several tables. The number of tables depend on the service module card type. Both the contents and the row/column size of a table are subject to change. The major version is incremented by the manager whenever there is a change in the row/column size of the table."
  },
  "cwSctFileName": {
    "name": "cwSctFileName",
    "oid": "1.3.6.1.4.1.9.9.236.1.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "SnmpAdminString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 132
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "This object specifies the absolute path name of the file corresponding to the SCT indices. After the agent accepts a SET operation and creates a new row in the SCT file management table, it transfers the file from the transient storage area to a secure location on the disk. This object identifies the absolute path name of the secure location on disk. The file name would be in the format: <CardType>_SCT.<SCTType>.<SCTId>.V<Major version> "
  },
  "cwSctFileMinorVersion": {
    "name": "cwSctFileMinorVersion",
    "oid": "1.3.6.1.4.1.9.9.236.1.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Unsigned32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "The SCT file consists of several tables. The number of tables depend on the service module card type. Both the contents and the row/column size of a table are subject to change. The minor version is incremented by the manager whenever there is a change in contents of the table."
  },
  "cwSctFileChecksum": {
    "name": "cwSctFileChecksum",
    "oid": "1.3.6.1.4.1.9.9.236.1.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "Unsigned32",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "The manager specifies this checksum when trying to add a SCT on the node. The agent while acting on the SET operation would perform a checksum computation on the FTPed file and compare against this object. If they differ, the SET operation would be negated. If same, the file is considered valid and this value is stored in a persistent database. SCT files across the network with the same combination of card type, sct type, major and minor versions would have the same checksum."
  },
  "cwSctFileDescription": {
    "name": "cwSctFileDescription",
    "oid": "1.3.6.1.4.1.9.9.236.1.1.1.8",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "SnmpAdminString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 132
          }
        ]
      }
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": "A description string can be associated with a specific SCT index and in turn the SCT file. This may be used for associating customized filenames."
  },
  "cwSctFileOperStatus": {
    "name": "cwSctFileOperStatus",
    "oid": "1.3.6.1.4.1.9.9.236.1.1.1.9",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "valid": 1,
          "invalid": 2,
          "absent": 3
        }
      }
    },
    "maxaccess": "read-only",
    "status": "current",
    "description": "Reflects the operational status of the SCT file. The agent sets the value to valid(1) if the computed checksum of the SCT file matches the provisioned checksum. The agent sets the value to invalid(2) if the computed checksum of the SCT file mismatches with the provisioned checksum. This usually suggests a corrupted SCT file. The agent sets the value to absent(3) if the file is missing in the secure area of the disk, while a row exists in the SCT file management table."
  },
  "cwSctFileRowStatus": {
    "name": "cwSctFileRowStatus",
    "oid": "1.3.6.1.4.1.9.9.236.1.1.1.10",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "RowStatus",
      "class": "type"
    },
    "maxaccess": "read-create",
    "status": "current",
    "description": " * To create a row, the manager needs to perform a SET operations with a 'CreateAndGo' option. The agent would validate the file specified by the indices if found valid would create a new row. * SET operation with 'CreateAndWait' option will be rejected by the agent. * SET operations with 'active' option would be treated as a modify operation. The only objects that can be modified in a row are the cwSctFileDescription and the cwSctFileMinorVersion. * SET operation with a 'Destroy' option would be used for deleting a row in the cwSctFileMgmtTable and its associated SCT file in the switch. * The GET status of this object would always return 'active'. "
  },
  "ciscoWanSctMgmtMIBConformance": {
    "name": "ciscoWanSctMgmtMIBConformance",
    "oid": "1.3.6.1.4.1.9.9.236.3",
    "class": "objectidentity"
  },
  "ciscoWanSctMgmtMIBCompliances": {
    "name": "ciscoWanSctMgmtMIBCompliances",
    "oid": "1.3.6.1.4.1.9.9.236.3.1",
    "class": "objectidentity"
  },
  "ciscoWanSctMgmtMIBGroups": {
    "name": "ciscoWanSctMgmtMIBGroups",
    "oid": "1.3.6.1.4.1.9.9.236.3.2",
    "class": "objectidentity"
  },
  "cwSctFileMgmtMIBCompliance": {
    "name": "cwSctFileMgmtMIBCompliance",
    "oid": "1.3.6.1.4.1.9.9.236.3.1.1",
    "class": "modulecompliance",
    "modulecompliance": [
      {
        "object": "cwSctFileMgmtObjectGroup",
        "module": "CISCO-WAN-SCT-MGMT-MIB"
      }
    ],
    "status": "current",
    "description": "The compliance statement for Cisco SCT file management group."
  },
  "cwSctFileMgmtObjectGroup": {
    "name": "cwSctFileMgmtObjectGroup",
    "oid": "1.3.6.1.4.1.9.9.236.3.2.1",
    "class": "objectgroup",
    "objects": [
      {
        "module": "CISCO-WAN-SCT-MGMT-MIB",
        "object": "cwSctFileName"
      },
      {
        "module": "CISCO-WAN-SCT-MGMT-MIB",
        "object": "cwSctFileMinorVersion"
      },
      {
        "module": "CISCO-WAN-SCT-MGMT-MIB",
        "object": "cwSctFileChecksum"
      },
      {
        "module": "CISCO-WAN-SCT-MGMT-MIB",
        "object": "cwSctFileDescription"
      },
      {
        "module": "CISCO-WAN-SCT-MGMT-MIB",
        "object": "cwSctFileOperStatus"
      },
      {
        "module": "CISCO-WAN-SCT-MGMT-MIB",
        "object": "cwSctFileRowStatus"
      }
    ],
    "status": "current",
    "description": "Objects used for SCT file management."
  },
  "meta": {
    "comments": [
      "ASN.1 source file://MIBS/asn1/CISCO-WAN-SCT-MGMT-MIB.mib",
      "Produced by pysmi-0.3.4 at Tue Apr 20 18:47:57 2021",
      "On host samy-ThinkPad-T495s platform Linux version 5.8.0-50-generic by user root",
      "Using Python version 3.8.5 (default, Jan 27 2021, 15:41:15) "
    ],
    "module": "CISCO-WAN-SCT-MGMT-MIB"
  }
}