{
  "imports": {
    "class": "imports",
    "SNMPv2-CONF": [
      "MODULE-COMPLIANCE",
      "NOTIFICATION-GROUP"
    ],
    "SNMPv2-SMI": [
      "IpAddress",
      "MibIdentifier",
      "Unsigned32",
      "TRAP-TYPE",
      "Integer32",
      "Counter32",
      "Gauge32",
      "OBJECT-TYPE",
      "MODULE-IDENTITY",
      "iso",
      "enterprises",
      "Bits",
      "NOTIFICATION-TYPE",
      "TimeTicks",
      "Counter64",
      "OBJECT-IDENTITY"
    ],
    "SNMPv2-TC": [
      "TEXTUAL-CONVENTION",
      "DisplayString"
    ]
  },
  "vertical": {
    "name": "vertical",
    "oid": "1.3.6.1.4.1.2338",
    "class": "objectidentity"
  },
  "selfTestDaemon": {
    "name": "selfTestDaemon",
    "oid": "1.3.6.1.4.1.2338.8",
    "class": "objectidentity"
  },
  "stdSystemGroup": {
    "name": "stdSystemGroup",
    "oid": "1.3.6.1.4.1.2338.8.1",
    "class": "objectidentity"
  },
  "sysOperStatus": {
    "name": "sysOperStatus",
    "oid": "1.3.6.1.4.1.2338.8.1.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "running": 1,
          "startUpInProgress": 2,
          "upgradeInProgress": 3,
          "restoreInProgress": 4,
          "error": 5
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Specifies the current operational status of the Instant Office system. Valid values are: running (1) -> The normal operational status, all components are up and running. startUpInProgress (2) -> The ST Deamon is starting up the system. upgradeInProgress (3) -> The ST Daemon is attempting to upgrade the system. restoreInProgress (4) -> The ST Daemon is attemping to restore the system from a previous installation, after an upgrade attemp failed. error (5) -> An error condition. One or more components failed to start. More information can be found from the Component Table"
  },
  "sysCurrentVersion": {
    "name": "sysCurrentVersion",
    "oid": "1.3.6.1.4.1.2338.8.1.2",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 32
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Specifies the current Instant Office version on this system."
  },
  "stdComponentGroup": {
    "name": "stdComponentGroup",
    "oid": "1.3.6.1.4.1.2338.8.2",
    "class": "objectidentity"
  },
  "stdComponentTable": {
    "name": "stdComponentTable",
    "oid": "1.3.6.1.4.1.2338.8.2.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "mandatory",
    "description": "Table of status information about all Instant Office components (executables, services and drivers). There are as many entries as there are components in the system."
  },
  "stdComponentEntry": {
    "name": "stdComponentEntry",
    "oid": "1.3.6.1.4.1.2338.8.2.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "compIndex",
        "implied": 0
      }
    ],
    "status": "mandatory",
    "description": "An entry in the Component table."
  },
  "compIndex": {
    "name": "compIndex",
    "oid": "1.3.6.1.4.1.2338.8.2.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The index of the component"
  },
  "compName": {
    "name": "compName",
    "oid": "1.3.6.1.4.1.2338.8.2.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 100
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The name of the component"
  },
  "compType": {
    "name": "compType",
    "oid": "1.3.6.1.4.1.2338.8.2.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "type-driver": 1,
          "type-service": 16,
          "type-executable": 2000,
          "type-non-vni-driver": 2001,
          "type-non-vni-service": 2002,
          "type-non-vni-executable": 2003
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The Component type - defines whether this component is a driver, service or an executable. The following the valid values: type-driver = 1, type-service = 16, type-executable = 2000, type-non-vni-driver = 2001, type-non-vni-service = 2002, type-non-vni-executable = 2003"
  },
  "compInstallStatus": {
    "name": "compInstallStatus",
    "oid": "1.3.6.1.4.1.2338.8.2.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "uninstalled": 100,
          "installed": 1
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Describes the installation status of this component. The following the valid values: uninstalled = 100, installed = 1"
  },
  "compOperStatus": {
    "name": "compOperStatus",
    "oid": "1.3.6.1.4.1.2338.8.2.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "stopped": 1,
          "start-pending": 2,
          "stop-pending": 3,
          "running": 4,
          "continue-pending": 5,
          "pause-pending": 6,
          "paused": 7,
          "unknown": 8,
          "disabled": 1025
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The operational status of this component. The following the valid values: stopped =1, start-pending =2, stop-pending =3, running =4 (the normal operational state), continue-pending =5, pause-pending =6, paused =7, unknown =8, disabled =1025"
  },
  "compEnabled": {
    "name": "compEnabled",
    "oid": "1.3.6.1.4.1.2338.8.2.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "enabled": 100,
          "disabled": 1
        }
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "Determines whether this component is enabled or disabled. Valid values: enabled = 100, disabled = 1"
  },
  "compLastStart": {
    "name": "compLastStart",
    "oid": "1.3.6.1.4.1.2338.8.2.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 32
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "mandatory",
    "description": "The date-time stamp when this component was last restarted."
  },
  "stdCompFailedToStart": {
    "name": "stdCompFailedToStart",
    "oid": "1.3.6.1.4.1.23380.26",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      },
      {
        "module": "VERTICAL-std-MIB",
        "object": "compName"
      }
    ],
    "description": " This notification is sent when a component fails to start during initial start-up. "
  },
  "stdCompAttemptRestart": {
    "name": "stdCompAttemptRestart",
    "oid": "1.3.6.1.4.1.23380.27",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      },
      {
        "module": "VERTICAL-std-MIB",
        "object": "compName"
      }
    ],
    "description": " This notification is sent when the Self Test Daemon attempts to restart a component. "
  },
  "stdCompFailedToReStart": {
    "name": "stdCompFailedToReStart",
    "oid": "1.3.6.1.4.1.23380.28",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      },
      {
        "module": "VERTICAL-std-MIB",
        "object": "compName"
      }
    ],
    "description": " This notification is sent when an attempt to restart a component failed. "
  },
  "stdCompRestartComplete": {
    "name": "stdCompRestartComplete",
    "oid": "1.3.6.1.4.1.23380.29",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      },
      {
        "module": "VERTICAL-std-MIB",
        "object": "compName"
      }
    ],
    "description": " This notification is sent when a component is successfully restarted "
  },
  "stdUpgradeStarted": {
    "name": "stdUpgradeStarted",
    "oid": "1.3.6.1.4.1.23380.30",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      }
    ],
    "description": "This notification is sent when an Instant Office upgrade is started. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point"
  },
  "stdUnpackingFiles": {
    "name": "stdUnpackingFiles",
    "oid": "1.3.6.1.4.1.23380.31",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      }
    ],
    "description": "This notification is sent when unpacking of the upgraded CAB file starts. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point"
  },
  "stdUnpackingComplete": {
    "name": "stdUnpackingComplete",
    "oid": "1.3.6.1.4.1.23380.32",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      }
    ],
    "description": "This notification is sent when unpacking of the upgraded CAB file is complete. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point"
  },
  "stdUpgradeBeingApplied": {
    "name": "stdUpgradeBeingApplied",
    "oid": "1.3.6.1.4.1.23380.33",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      }
    ],
    "description": "This notification is sent when an Instant Office upgrade is about to be applied. This is done after the Upgraded CAB file is unpacked and a system reboot is done. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point"
  },
  "stdUpgradeInProgress": {
    "name": "stdUpgradeInProgress",
    "oid": "1.3.6.1.4.1.23380.34",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      }
    ],
    "description": " This notification is sent when an Instant Office upgrade process is under way. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point"
  },
  "stdUpgradeComplete": {
    "name": "stdUpgradeComplete",
    "oid": "1.3.6.1.4.1.23380.35",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      }
    ],
    "description": " This notification is sent when an Instant Office upgrade is successfully completed. 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point"
  },
  "stdUpgradeError": {
    "name": "stdUpgradeError",
    "oid": "1.3.6.1.4.1.23380.36",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      }
    ],
    "description": " This notification is sent when an Instant Office upgrade attempt fails. A Restore operation would be done immediately. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point"
  },
  "stdRestoreStarted": {
    "name": "stdRestoreStarted",
    "oid": "1.3.6.1.4.1.23380.37",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      }
    ],
    "description": " This notification is sent when a previous version of Instant Office is about to be restored. A restore operation is typically carried out after a failed upgrade attempt. 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point"
  },
  "stdRestoreInProgress": {
    "name": "stdRestoreInProgress",
    "oid": "1.3.6.1.4.1.23380.38",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      }
    ],
    "description": " This notification is sent when a previous version of Instant Office is restored successfully. A restore operation is typically carried out after a failed upgrade attempt. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point"
  },
  "stdRestoreComplete": {
    "name": "stdRestoreComplete",
    "oid": "1.3.6.1.4.1.23380.39",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      }
    ],
    "description": " This notification is sent when a previous version of Instant Office is restored successfully. A restore operation is typically carried out after a failed upgrade attempt. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point"
  },
  "stdRestoreError": {
    "name": "stdRestoreError",
    "oid": "1.3.6.1.4.1.23380.40",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      }
    ],
    "description": "This notification is sent when an Instant Office restore attemp fails. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point"
  },
  "stdRebootingMachine": {
    "name": "stdRebootingMachine",
    "oid": "1.3.6.1.4.1.23380.41",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      }
    ],
    "description": " This notification is sent before an Instant Office reboot is done, typically due to an upgrade/restore request. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point"
  },
  "stdVerifyingSystem": {
    "name": "stdVerifyingSystem",
    "oid": "1.3.6.1.4.1.23380.42",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      }
    ],
    "description": " This notification is sent when the System is brought up (all componenets are started) after an Upgrade or a restore process. The stages of an upgrade and restore are : 1. An Upgrade request comes in: CAB file is pushed - stdUpgradeStarted Trap is sent 2. Unpacking of the CAB file is done - stdUnpackingFiles Trap is sent 3. Multiple stdUpgradeInProgress Traps are sent during this period 4. Unpacking is complete - stdUnpackingComplete Trap is sent 5. A system reboot is done - stdRebootingMachine Trap is sent 6. Upgrade is applied - stdUpgradeBeingApplied Trap is sent. 7. Multiple stdUpgradeInProgress Traps are sent during this period 8. System is rebooted again - stdRebootingMachine Trap is sent. 9. All components are started - stdVerifyingSystem Trap is sent. 10. If success: stdUpgradeComplete Trap is sent : All is well Else ,stdUpgradeError Trap is sent, and a restore operation is attempted 11. Restore is attempted - stdRestoreStarted Trap is sent 12. Multiple stdRestoreInProgress Traps are sent at this point. 13. A system reboot is done : stdRebootingMachine Trap is sent. 14. All components are started - stdVerifyingSystem Trap is sent. 15. If success: stdRestoreComplete Trap is sent, else stdRestoreError Trap is sent. std quits at this point"
  },
  "stdIOUptoDate": {
    "name": "stdIOUptoDate",
    "oid": "1.3.6.1.4.1.23380.50",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      }
    ],
    "description": " This notification is sent when an upgrade attempt is aborted because the current version of Instant Office is later than the upgrade version."
  },
  "stdBadCABFile": {
    "name": "stdBadCABFile",
    "oid": "1.3.6.1.4.1.23380.51",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      }
    ],
    "description": " This notification is sent when an upgrade attempt is aborted because of a bad CAB file."
  },
  "stdNotEnoughDiskSpace": {
    "name": "stdNotEnoughDiskSpace",
    "oid": "1.3.6.1.4.1.23380.52",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      }
    ],
    "description": " This notification is sent when an upgrade attempt is aborted because there is not enough disk space on the machine."
  },
  "stdIoNotOperational": {
    "name": "stdIoNotOperational",
    "oid": "1.3.6.1.4.1.23380.63",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      },
      {
        "module": "VERTICAL-std-MIB",
        "object": "compName"
      }
    ],
    "description": " This notification is sent under any of the following conditions: - Before attempting to start the components, FBS checks to ensure the minimum configuration is present in the box, currently this means an RSC card in Slot_05. If this check fails, FBS will not attempt to start any of the components and needs to send a trap out to the world! - When FBS attempts to start all components and a critical component fails to start and hence InstantOffice is not operational, FBS needs to send the trap. - After an upgrade is performed and deemed unsuccessful, FBS will attempt to restore to the previous working version. In case this process fails, FBS needs to send the trap."
  },
  "stdPrerequisiteMissing": {
    "name": "stdPrerequisiteMissing",
    "oid": "1.3.6.1.4.1.23380.67",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      },
      {
        "module": "VERTICAL-std-MIB",
        "object": "compName"
      }
    ],
    "description": " This notification is sent when an upgrade attempt is done on an Instant Office that does not contain the pre-requisite software version for that upgrade."
  },
  "stdPLDFailed": {
    "name": "stdPLDFailed",
    "oid": "1.3.6.1.4.1.23380.70",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      },
      {
        "module": "VERTICAL-std-MIB",
        "object": "compName"
      }
    ],
    "description": "Resource Card Firmware upgrade failed. Return code=nnnn"
  },
  "stdUnsupportedConfiguration": {
    "name": "stdUnsupportedConfiguration",
    "oid": "1.3.6.1.4.1.23380.71",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      },
      {
        "module": "VERTICAL-std-MIB",
        "object": "compName"
      }
    ],
    "description": "You are running an unsupported configuration. 1600-Router card requires a newer version of the Resource Switch Card."
  },
  "stdInvalidConfiguration": {
    "name": "stdInvalidConfiguration",
    "oid": "1.3.6.1.4.1.23380.72",
    "class": "notificationtype",
    "objects": [
      {
        "module": "VERTICAL-std-MIB",
        "object": "sysCurrentVersion"
      },
      {
        "module": "VERTICAL-std-MIB",
        "object": "compName"
      }
    ],
    "description": " You are running an invalid configuration. 1600-Router card will be disabled since there are more than 2 Station Cards present."
  },
  "meta": {
    "comments": [
      "ASN.1 source file://MIBS/asn1/VERTICAL-std-MIB.mib",
      "Produced by pysmi-0.3.4 at Tue Apr 20 16:03:59 2021",
      "On host samy-ThinkPad-T495s platform Linux version 5.8.0-50-generic by user root",
      "Using Python version 3.8.5 (default, Jan 27 2021, 15:41:15) "
    ],
    "module": "VERTICAL-std-MIB"
  }
}