{
  "imports": {
    "class": "imports",
    "CADANT-PRODUCTS-MIB": [
      "cadant"
    ],
    "SNMPv2-CONF": [
      "NOTIFICATION-GROUP",
      "MODULE-COMPLIANCE"
    ],
    "SNMPv2-SMI": [
      "iso",
      "OBJECT-TYPE",
      "OBJECT-IDENTITY",
      "MODULE-IDENTITY",
      "NOTIFICATION-TYPE",
      "Gauge32",
      "MibIdentifier",
      "Counter64",
      "Bits",
      "IpAddress",
      "Counter32",
      "Integer32",
      "Unsigned32",
      "TimeTicks"
    ],
    "SNMPv2-TC": [
      "DisplayString",
      "TEXTUAL-CONVENTION"
    ]
  },
  "cadTextualConventions": {
    "name": "cadTextualConventions",
    "oid": "1.3.6.1.4.1.4998.0",
    "class": "moduleidentity",
    "revisions": [
      {
        "revision": "2015-07-16 00:00",
        "description": "Add SshKeyType and SshKeyExchangeMethod."
      },
      {
        "revision": "2015-06-24 00:00",
        "description": "change PortId range up to 392."
      },
      {
        "revision": "2015-06-01 00:00",
        "description": "Remove dcamOfdmAnnexB CerCardSubType."
      },
      {
        "revision": "2014-12-03 00:00",
        "description": "Add dchannelOfdm(13) to PortType and CerPortType."
      },
      {
        "revision": "2014-12-01 00:00",
        "description": "CerPortType change : rename change dchannelVod(10) to dchannelVideo(10)"
      },
      {
        "revision": "2014-10-14 00:00",
        "description": "change PortId range up to 384."
      },
      {
        "revision": "2014-08-01 00:00",
        "description": "PortType change: remove dchannelSdv(13) and dchannelBroadcast(14)."
      },
      {
        "revision": "2014-03-13 00:00",
        "description": "Add link aggregate port type."
      },
      {
        "revision": "2014-01-13 00:00",
        "description": "Change max value of CadIpTos from 254 to 255 Add 255 to CadIpTosMask."
      },
      {
        "revision": "2013-10-23 00:00",
        "description": "Add dns to AdminSrcAddrType."
      },
      {
        "revision": "2013-05-16 00:00",
        "description": "Add new SFP types."
      },
      {
        "revision": "2012-04-11 00:00",
        "description": "Add more MAC algorithms in SshMacAlg"
      },
      {
        "revision": "2012-02-23 00:00",
        "description": "Add AdminSrcAddrType"
      },
      {
        "revision": "2011-12-08 00:00",
        "description": "Change MacPortId from 4095 to 416"
      },
      {
        "revision": "2011-06-09 00:00",
        "description": "Add detected port mode for DWDM XFP."
      },
      {
        "revision": "2010-11-22 00:00",
        "description": "Add overload status and thresholds."
      },
      {
        "revision": "2011-02-24 00:00",
        "description": "Add additional card types for E6."
      },
      {
        "revision": "2010-12-14 00:00",
        "description": "Change CardId upper limit to 99"
      },
      {
        "revision": "2010-10-28 00:00",
        "description": "Add more ten gigabit port detected modes."
      },
      {
        "revision": "2010-05-18 00:00",
        "description": "Add CPE device types and IPv6 ACL support."
      },
      {
        "revision": "2010-02-23 00:00",
        "description": "Remove obsolete dport and dportmac types."
      },
      {
        "revision": "2010-01-11 00:00",
        "description": "Added two new values to SecondaryState."
      },
      {
        "revision": "2009-10-15 00:00",
        "description": "Updates CadCpeDeviceTypes."
      },
      {
        "revision": "2009-09-14 00:00",
        "description": "Add ipv6-access-list(5) to CadAclType."
      },
      {
        "revision": "2009-08-28 00:00",
        "description": "Add CadCpeDeviceTypes."
      },
      {
        "revision": "2009-08-19 00:00",
        "description": "Cleanup obsolete C4 definitions."
      },
      {
        "revision": "2009-07-10 00:00",
        "description": "Initial additions for E6."
      },
      {
        "revision": "2008-10-23 00:00",
        "description": "Remove superGreedy(4) from FlowActivityState."
      },
      {
        "revision": "2008-08-06 00:00",
        "description": "Add support for 16D CAM PIC types."
      },
      {
        "revision": "2007-11-05 00:00",
        "description": "Add support for port flow control."
      },
      {
        "revision": "2007-06-25 00:00",
        "description": "Add support for EUI IPv6 addresses."
      },
      {
        "revision": "2006-10-16 00:00",
        "description": "Add new card subtype rcardhcp to represent the HCP on the RCM."
      },
      {
        "revision": "2006-08-23 00:00",
        "description": "Add new card type dmm(15) and new card subtype dcard0d12u(35), dmm16m16p4iu(36) and dmm16m(37)."
      },
      {
        "revision": "2006-07-27 00:00",
        "description": "This MIB modules contains textual conventions that are shared among two or more Cadant MIBs."
      },
      {
        "revision": "2006-07-27 00:00",
        "description": "This MIB modules contains textual conventions that are shared among two or more Cadant MIBs."
      },
      {
        "revision": "2005-12-02 00:00",
        "description": "Add support from scheduling types from DISMAN-SCHEDULE-MIB."
      },
      {
        "revision": "2005-08-30 00:00",
        "description": "Added support for RCM ports."
      },
      {
        "revision": "2005-09-23 00:00",
        "description": "Remove SshSession and SshConnectionState. Add SshService, SshAuthMethod, SshMacAlg, SshCipherType, and SshMacAlg."
      },
      {
        "revision": "2005-08-31 00:00",
        "description": "Added another ACL type to support embedded remarks."
      },
      {
        "revision": "2004-11-12 00:00",
        "description": "Added OUIAddress"
      },
      {
        "revision": "2004-09-15 00:00",
        "description": "Add support for CAR feature."
      },
      {
        "revision": "2004-03-09 00:00",
        "description": "Add cadIfDirection"
      },
      {
        "revision": "2003-12-18 00:00",
        "description": "Add port type to support logical uchannels."
      },
      {
        "revision": "2003-08-20 00:00",
        "description": "Add type to support start-stop and stop-only accounting."
      },
      {
        "revision": "2003-06-08 00:00",
        "description": "Add additional port types to support gbic detection."
      },
      {
        "revision": "2003-05-08 00:00",
        "description": "Add serverType for INET service support."
      },
      {
        "revision": "2003-04-21 00:00",
        "description": "Add cadExtAclCondition for IPSec/IKE support."
      },
      {
        "revision": "2003-04-04 00:00",
        "description": "Fixed comment for FlowActivityState"
      },
      {
        "revision": "2003-04-01 00:00",
        "description": "Rename AuthenticationMethod as AAAmethod."
      },
      {
        "revision": "2003-03-31 00:00",
        "description": "Add premilinary pic support and card reset action"
      },
      {
        "revision": "2003-03-17 00:00",
        "description": "Add card detail support."
      },
      {
        "revision": "2002-11-01 00:00",
        "description": "Add diskVolume support."
      },
      {
        "revision": "2002-10-25 00:00",
        "description": "Remove enable authentication method type."
      },
      {
        "revision": "2002-10-16 00:00",
        "description": "Change SshCipher to bitmask."
      },
      {
        "revision": "2002-09-25 00:00",
        "description": "Align card subtypes and types."
      },
      {
        "revision": "2001-02-03 00:00",
        "description": "Created."
      }
    ],
    "lastupdated": "201507160000Z",
    "organization": "Arris International Inc",
    "contactinfo": "Arris Technical Support Phone: +1 630 281 3000 Email: support@arrisi.com",
    "description": "This MIB module contains the textual conventions that are shared among multiple ARRIS MIBs."
  },
  "CardId": {
    "name": "CardId",
    "class": "textualconvention",
    "type": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 99
          }
        ]
      }
    },
    "status": "current",
    "description": "Uniquely identifies the individual Circuit Pack, where 0 is an invalid CardId."
  },
  "PortId": {
    "name": "PortId",
    "class": "textualconvention",
    "type": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 392
          }
        ]
      }
    },
    "status": "current",
    "description": "Uniquely identifies a port on a card, where 0 is an invalid PortId."
  },
  "CardType": {
    "name": "CardType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "invalid": 0,
          "dcam": 1,
          "ucam": 2,
          "rsm": 3,
          "fan": 4,
          "pem": 5,
          "ccm": 6,
          "cdm": 7,
          "sam": 8,
          "unknown": 98
        }
      }
    },
    "status": "current",
    "description": "Enumeration of generic Card Type."
  },
  "CardSubType": {
    "name": "CardSubType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "invalid": 0,
          "dcam192d": 1,
          "ucam96u": 2,
          "rsm56g": 3,
          "dcam144d": 4,
          "fanA": 7,
          "fanB": 8,
          "fanC": 9,
          "pemA": 10,
          "pemB": 11,
          "ccmA": 12,
          "ccmB": 13,
          "cdmA": 14,
          "cdmB": 15,
          "sam": 16,
          "unknown": 98
        }
      }
    },
    "status": "current",
    "description": "Enumeration of more specific current Card Type. For cards with only one subtype, the type and subtype should be identical."
  },
  "CerCardType": {
    "name": "CerCardType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "invalid": 0,
          "fan": 1,
          "pem": 2,
          "ccm": 3,
          "cdm": 4,
          "sam": 5,
          "rsm": 6,
          "ucam": 7,
          "dcam": 8,
          "unknown": 98
        }
      }
    },
    "status": "current",
    "description": "Enumeration of generic Card Type."
  },
  "CerCardSubType": {
    "name": "CerCardSubType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "invalid": 0,
          "fan": 1,
          "pem": 2,
          "ccm": 3,
          "cdm": 4,
          "sam": 5,
          "rsm10g": 6,
          "ucam96m24c": 7,
          "dcam192m8cAnnexA": 8,
          "dcam256m8cAnnexB": 9,
          "unknown": 98
        }
      }
    },
    "status": "current",
    "description": "Enumeration of more specific current Card Type. For cards with only one subtype, the type and subtype should be identical."
  },
  "PortType": {
    "name": "PortType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "invalid": 0,
          "ureceiver": 1,
          "uchannel": 2,
          "eport10BaseT": 3,
          "eport100BaseT": 4,
          "eport1000BaseT": 5,
          "eport10000BaseT": 6,
          "macport": 8,
          "dchannelDocsis": 9,
          "dchannelVideo": 10,
          "linkAgg": 11,
          "dchannelVideoReplica": 12,
          "dchannelOfdm": 13,
          "unknown": 98
        }
      }
    },
    "status": "current",
    "description": "Enumeration of current Port Type."
  },
  "CerPortType": {
    "name": "CerPortType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "invalid": 0,
          "ureceiver": 1,
          "uchannel": 2,
          "eport10BaseT": 3,
          "eport100BaseT": 4,
          "eport1000BaseT": 5,
          "eport10000BaseT": 6,
          "macport": 8,
          "dchannelDocsis": 9,
          "dchannelVideo": 10,
          "linkAgg": 11,
          "dchannelVideoreplica": 12,
          "dchannelOfdm": 13,
          "unknown": 98
        }
      }
    },
    "status": "current",
    "description": "Enumeration of current Port Type."
  },
  "PortMode": {
    "name": "PortMode",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "invalid": 0,
          "autoNegotiate": 1,
          "fullDuplex100Mpbs": 2,
          "halfDuplex100Mpbs": 3,
          "fullDuplex10Mpbs": 4,
          "halfDuplex10Mpbs": 5,
          "fullDuplex1000Mpbs": 6,
          "halfDuplex1000Mpbs": 7,
          "fullDuplex10000Mpbs": 8
        }
      }
    },
    "status": "current",
    "description": "mode settings for a network port."
  },
  "PortDetectedMode": {
    "name": "PortDetectedMode",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "invalid": 0,
          "fullDuplex100Mpbs": 2,
          "halfDuplex100Mpbs": 3,
          "fullDuplex10Mpbs": 4,
          "halfDuplex10Mpbs": 5,
          "fullDuplex1000Mpbs": 6,
          "halfDuplex1000Mpbs": 7,
          "fullDuplex10000Mpbs": 8,
          "sfpFullDuplex1000BaseT": 9,
          "sfpHalfDuplex1000BaseT": 10,
          "sfpFullDuplex100BaseT": 11,
          "sfpHalfDuplex100BaseT": 12,
          "sfpFullDuplex10BaseT": 13,
          "sfpHalfDuplex10BaseT": 14,
          "sfpFullDuplex1000BaseSX": 15,
          "sfpFullDuplex1000BaseLX": 16,
          "sfpFullDuplex1000BaseLH": 17,
          "sfpFullDuplex1000BaseLXLH": 18,
          "sfpFullDuplex1000BaseZX": 19,
          "sfpFullDuplex1000BaseCWDM": 20,
          "sfpFullDuplex1000BaseDWDM": 21,
          "xfpFullDuplex10GBaseSR": 22,
          "xfpFullDuplex10GBaseLRM": 23,
          "xfpFullDuplex10GBaseLR": 24,
          "xfpFullDuplex10GBaseER": 25,
          "xfpFullDuplex10GBaseZR": 26,
          "xfpFullDuplex10GBaseLX4": 27,
          "xfpFullDuplex10GBaseDWDM": 28,
          "sfpFullDuplex10GBaseSR": 29,
          "sfpFullDuplex10GBaseLRM": 30,
          "sfpFullDuplex10GBaseLR": 31,
          "sfpFullDuplex10GBaseER": 32,
          "sfpFullDuplex10GBaseZR": 33,
          "unknown": 34
        }
      }
    },
    "status": "current",
    "description": "detected mode settings for a network port."
  },
  "FlowControlMode": {
    "name": "FlowControlMode",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "invalid": 0,
          "on": 1,
          "off": 2,
          "desired": 3,
          "unknown": 4
        }
      }
    },
    "status": "current",
    "description": "flow control settings for a network port."
  },
  "AdminState": {
    "name": "AdminState",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "up": 1,
          "down": 2
        }
      }
    },
    "status": "current",
    "description": "The administrative or the desired states of the element and are set by the EMS."
  },
  "PrimaryState": {
    "name": "PrimaryState",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "is": 1,
          "oos": 2
        }
      }
    },
    "status": "current",
    "description": "The operational state IS(1): The element is operable and available for use OOS(2): The element/resource is inoperable and unable to provide service UNEQ(3): The element/resource is unequiped."
  },
  "SecondaryState": {
    "name": "SecondaryState",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "notapplicable": 0,
          "manual": 1,
          "fault": 2,
          "diagnostic": 3,
          "overload": 4,
          "normal": 5,
          "degrade": 6,
          "initializing": 7,
          "swdownload": 8,
          "firmwarepump": 9,
          "powerup": 10,
          "bootdkm": 11
        }
      }
    },
    "status": "current",
    "description": "For each PrimaryState, there might be an associated secondary state"
  },
  "UnknownState": {
    "name": "UnknownState",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "known": 0,
          "unknown": 1
        }
      }
    },
    "status": "current",
    "description": "Similar to TMN representation of the Unknown Status. "
  },
  "DuplexStatus": {
    "name": "DuplexStatus",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "notapplicable": 0,
          "active": 1,
          "standby": 2,
          "simplex": 3,
          "protected": 4
        }
      }
    },
    "status": "current",
    "description": "not applicable to all components "
  },
  "MacPortId": {
    "name": "MacPortId",
    "class": "textualconvention",
    "type": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 416
          }
        ]
      }
    },
    "status": "current",
    "description": "A valid unique identifier for a MAC port in an E6000 system."
  },
  "MacPortIdWithInvalid": {
    "name": "MacPortIdWithInvalid",
    "class": "textualconvention",
    "type": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 416
          }
        ]
      }
    },
    "status": "current",
    "description": "Identifier for a MAC port in an E6000 system."
  },
  "EqActionType": {
    "name": "EqActionType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "notapplicable": 0,
          "initialize": 1,
          "switch": 2,
          "remove": 3,
          "restorecond": 4,
          "restoreuncd": 5,
          "systemreset": 6,
          "cardreset": 7
        }
      }
    },
    "status": "current",
    "description": "not applicable to all components "
  },
  "OverloadStatus": {
    "name": "OverloadStatus",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "normal": 1,
          "yellow": 2,
          "red": 3
        }
      }
    },
    "status": "current",
    "description": "Three levels indicating how much work the card is doing."
  },
  "OverloadThreshold": {
    "name": "OverloadThreshold",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "low": 0,
          "medlow": 1,
          "med": 2,
          "medhigh": 3,
          "high": 4
        }
      }
    },
    "status": "current",
    "description": "Five levels indicating when overload state transitions should occur."
  },
  "DiskVolumeUsageLevel": {
    "name": "DiskVolumeUsageLevel",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "normal": 1,
          "minor": 2,
          "major": 3,
          "critical": 4
        }
      }
    },
    "status": "current",
    "description": "Describe the disk volume usage level"
  },
  "CadBridgeGroupId": {
    "name": "CadBridgeGroupId",
    "class": "textualconvention",
    "type": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 33,
            "max": 255
          }
        ]
      }
    },
    "status": "current",
    "description": "Uniquely identifies the bridge group."
  },
  "CadBridgePortType": {
    "name": "CadBridgePortType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "cm": 1,
          "cpeauth": 2,
          "cpeunauth": 3,
          "any": 4,
          "none": 5
        }
      }
    },
    "status": "current",
    "description": "Type of traffic allowed on a bridge port. Ethernet ports allow any type of traffic. RF ports can be sub divided for CM traffic, authorized CPE traffic, and unauthorized CPE traffic."
  },
  "VlanId": {
    "name": "VlanId",
    "class": "textualconvention",
    "type": {
      "type": "Integer32",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 1000000
          }
        ]
      }
    },
    "status": "current",
    "description": "The unique identifier for a Virtual LAN. A value of 1000000 indicates unknown VLAN."
  },
  "FlowActivityState": {
    "name": "FlowActivityState",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "needy": 1,
          "normal": 2,
          "greedy": 3
        }
      }
    },
    "status": "current",
    "description": "Flow Activity State describes the recent bandwidth utilization history of a service flow relative to its Service Level Agreement. A flow that is operating below its Tmin is said to be 'needy'. A flow that is operating above Tmin but below Tmid is said to be 'normal'. A flow that is operating above Tmid but below Tmax is said to be 'greedy'."
  },
  "InetAddressIPv4or6": {
    "name": "InetAddressIPv4or6",
    "class": "textualconvention",
    "type": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 0
          },
          {
            "min": 4,
            "max": 4
          },
          {
            "min": 8,
            "max": 8
          },
          {
            "min": 16,
            "max": 16
          },
          {
            "min": 20,
            "max": 20
          }
        ]
      }
    },
    "status": "current",
    "description": "This TEXTUAL-CONVENTION is similar to InetAddress as defined in the INET-ADDRESS-MIB. However, InetAddressIPv4or6 does not allow DNS addresses and its address type, either IPv4 or IPv6, can be readily determined from its length alone. If the address is an IPv4 address, then the length will be exactly 4 bytes. If the address is an IPv6 address, then the length will be either 16 or 20 bytes. If the length if 0, then the address is empty or null. If the length is 4: octets contents encoding 1-4 IP address network-byte order If the length is 8: octets contents encoding 1-8 EUI IPv6 address network-byte order If the length is 16: octets contents encoding 1-16 IPv6 address network-byte order If the length is 20: octets contents encoding 1-16 IPv6 address network-byte order 17-20 scope identifier network-byte order The scope identifier (bytes 17-20) MUST NOT be present for global IPv6 addresses. For non-global IPv6 addresses (e.g. link-local or site-local addresses), the scope identifier MUST always be present. It contains a link identifier for link-local and a site identifier for site-local IPv6 addresses. The scope identifier MUST disambiguate identical address values. For link-local addresses, the scope identifier will typically be the interface index (ifIndex as defined in the IF-MIB, RFC 2233) of the interface on which the address is configured. The scope identifier may contain the special value 0 which refers to the default scope. The default scope may be used in cases where the valid scope identifier is not known (e.g., a management application needs to write a site-local InetAddressIPv6 address without knowing the site identifier value). The default scope SHOULD NOT be used as an easy way out in cases where the scope identifier for a non-global IPv6 is known.",
    "reference": "InetAddress from INET-ADDRESS-MIB, RFC2851"
  },
  "LineType": {
    "name": "LineType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "console": 1,
          "vty": 2
        }
      }
    },
    "status": "current",
    "description": "This TEXTUAL-CONVENTION describes the type line connections available on the C4."
  },
  "AAAmethod": {
    "name": "AAAmethod",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "none": 1,
          "line": 2,
          "local": 4,
          "group": 5
        }
      }
    },
    "status": "current",
    "description": "This TEXTUAL-CONVENTION describes the type of AAA methods available on the C4."
  },
  "SshService": {
    "name": "SshService",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "terminal": 1,
          "sftp": 2
        }
      }
    },
    "status": "current",
    "description": "This TEXTUAL-CONVENTION describes the SSH service types available in SSH on the C4."
  },
  "SshAuthMethod": {
    "name": "SshAuthMethod",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "password": 1,
          "public-key": 2
        }
      }
    },
    "status": "current",
    "description": "This TEXTUAL-CONVENTION describes the authentication method available in SSH on the C4."
  },
  "SshCipher": {
    "name": "SshCipher",
    "class": "textualconvention",
    "type": {
      "type": "Bits",
      "class": "type",
      "bits": {
        "other": 0,
        "threedes": 1,
        "arcfour": 2,
        "blowfish": 3,
        "cast": 4,
        "aes": 5
      }
    },
    "status": "current",
    "description": "This TEXTUAL-CONVENTION describes the ciphers available in SSH on the C4."
  },
  "SshCipherType": {
    "name": "SshCipherType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "threedes": 2,
          "arcfour": 3,
          "blowfish": 4,
          "cast128": 5,
          "aes128": 6,
          "aes192": 7,
          "aes256": 8,
          "des": 9,
          "rc4": 10
        }
      }
    },
    "status": "current",
    "description": "This TEXTUAL-CONVENTION describes the specific cipher type on the C4."
  },
  "SshMacAlg": {
    "name": "SshMacAlg",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "none": 1,
          "hmac-sha1": 2,
          "hmac-sha1-96": 3,
          "hmac-md5": 4,
          "hmac-md5-96": 5
        }
      }
    },
    "status": "current",
    "description": "This TEXTUAL-CONVENTION describes the MAC algorithm available in SSH on the C4."
  },
  "SshProtocol": {
    "name": "SshProtocol",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "ssh1": 1,
          "ssh2": 2,
          "ssh1ssh2": 3
        }
      }
    },
    "status": "current",
    "description": "This TEXTUAL-CONVENTION describes the SSH protocol versions available in SSH on the C4."
  },
  "SshKeyType": {
    "name": "SshKeyType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "unknown": 0,
          "dsa1024": 1,
          "rsa2048": 2
        }
      }
    },
    "status": "current",
    "description": "This TEXTUAL-CONVENTION describes the server key types available in SSH on the E6000."
  },
  "SshKeyExchangeMethod": {
    "name": "SshKeyExchangeMethod",
    "class": "textualconvention",
    "type": {
      "type": "Bits",
      "class": "type",
      "bits": {
        "dh-gr1-sha1": 0,
        "dh-gr14-sha1": 1
      }
    },
    "status": "current",
    "description": "This TEXTUAL-CONVENTION describes the server key exchange methods available in SSH on the E6000."
  },
  "CadDouble": {
    "name": "CadDouble",
    "class": "textualconvention",
    "type": {
      "type": "Counter64",
      "class": "type"
    },
    "displayhint": "d-10",
    "status": "current",
    "description": "This type is used to express and display 64-bit, double-precision floating-point values."
  },
  "FirmwareSource": {
    "name": "FirmwareSource",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "committed": 1,
          "transient": 2,
          "boot1": 3,
          "boot2": 4,
          "unknown": 5
        }
      }
    },
    "status": "current",
    "description": "This type describes the initial source of the firmware running on a card. Committed and transient indicate the card flash device and the downloaded image, respectively. Boot1 and Boot2 indicate which of the resident boot images was used to boot the card."
  },
  "PicType": {
    "name": "PicType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "invalid": 0,
          "dcamLeft": 1,
          "dcamRight": 2,
          "dcam": 3,
          "ucamRight": 4,
          "ucam": 5,
          "rsm": 6,
          "unknown": 98
        }
      }
    },
    "status": "current",
    "description": "This type describes the PIC attached to the backplane behind a a card."
  },
  "CerPicType": {
    "name": "CerPicType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "invalid": 0,
          "dcamLowPic8c": 1,
          "dcamHighPic8c": 2,
          "dcamSparePic8c": 3,
          "ucamHighPic24c": 4,
          "ucamSparePic24c": 5,
          "rsmPic": 6,
          "unknown": 98
        }
      }
    },
    "status": "current",
    "description": "This type describes the PIC attached to the backplane behind a a card."
  },
  "CadExtAclCondition": {
    "name": "CadExtAclCondition",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "na": 0,
          "eq": 1,
          "ne": 2,
          "lt": 3,
          "le": 4,
          "gt": 5,
          "ge": 6,
          "range": 7
        }
      }
    },
    "status": "current",
    "description": "This TEXTUAL-CONVENTION describes the condition of Extended ACLs."
  },
  "ServerType": {
    "name": "ServerType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "telnet": 1,
          "ftp": 2,
          "snmp": 3,
          "syslog": 4,
          "radius": 5,
          "tacacs": 6,
          "other": 7
        }
      }
    },
    "status": "current",
    "description": "This TEXTUAL-CONVENTION describes the INET services available on the SCM."
  },
  "AccountingType": {
    "name": "AccountingType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "start-stop": 1,
          "stop-only": 2
        }
      }
    },
    "status": "current",
    "description": "This TEXTUAL-CONVENTION describes the different types of accounting services."
  },
  "CadIfDirection": {
    "name": "CadIfDirection",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "in": 1,
          "out": 2
        }
      }
    },
    "status": "current",
    "description": "A direction of flow on an interface."
  },
  "CadIpPort": {
    "name": "CadIpPort",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 65535
          },
          {
            "min": -1,
            "max": -1
          }
        ]
      }
    },
    "status": "current",
    "description": "The port of an IP packet. The value -1 indicates that this field is not used."
  },
  "CadIpTos": {
    "name": "CadIpTos",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 255
          }
        ]
      }
    },
    "status": "current",
    "description": "The type-of-service of an IP packet. The value 0 indicates that this field is not used."
  },
  "CadIpTosMask": {
    "name": "CadIpTosMask",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 0
          },
          {
            "min": 30,
            "max": 30
          },
          {
            "min": 224,
            "max": 224
          },
          {
            "min": 254,
            "max": 254
          },
          {
            "min": 255,
            "max": 255
          }
        ]
      }
    },
    "status": "current",
    "description": "The allowed type-of-service mask of an IP packet. 30 is used when the 4 bit TOS is specified. 224 is used when the 3 bit precedence is specified, and 254 is used when the entire 7 bit TOS is specified, 255 is used when 8 bit is specified. A value of 0 indicates that the TOS field is not used."
  },
  "CadProtocolType": {
    "name": "CadProtocolType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 255
          },
          {
            "min": -1,
            "max": -1
          }
        ]
      }
    },
    "status": "current",
    "description": "The protocol type an IP packet (8 bits). 0 is IP, 1 is ICMP, 2 is IGMP, 6 is TCP 17 is UDP. See RFC-1700 for complete list. The value -1 indicates an invalid/unused protocol type."
  },
  "CadTcpFlags": {
    "name": "CadTcpFlags",
    "class": "textualconvention",
    "type": {
      "type": "Bits",
      "class": "type",
      "bits": {
        "urg": 0,
        "ack": 1,
        "push": 2,
        "rst": 3,
        "syn": 4,
        "fin": 5
      }
    },
    "status": "current",
    "description": "The values available in the flags portion of the TCP header."
  },
  "CadAclType": {
    "name": "CadAclType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "none": 0,
          "std-access-list": 1,
          "ext-access-list": 2,
          "rate-limit-access-list": 3,
          "remark": 4,
          "ipv6-access-list": 5
        }
      }
    },
    "status": "current",
    "description": "The type of ACL this ACE is part of."
  },
  "CadAclString": {
    "name": "CadAclString",
    "class": "textualconvention",
    "type": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 0,
            "max": 32
          }
        ]
      }
    },
    "status": "current",
    "description": "The name of the ACL this ACE is part of."
  },
  "OUIAddress": {
    "name": "OUIAddress",
    "class": "textualconvention",
    "type": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 3,
            "max": 3
          }
        ]
      }
    },
    "displayhint": "1x:",
    "status": "current",
    "description": "Represents the first three(3), most significant bytes of an 802 MAC address represented in the `canonical' order defined by IEEE 802.1a, i.e., as if it were transmitted least significant bit first, even though 802.5 (in contrast to other 802.x protocols) requires MAC addresses to be transmitted most significant bit first."
  },
  "CadCpeDeviceTypes": {
    "name": "CadCpeDeviceTypes",
    "class": "textualconvention",
    "type": {
      "type": "Bits",
      "class": "type",
      "bits": {
        "cable-modem": 0,
        "cpe": 1,
        "ps": 2,
        "mta": 3,
        "stb": 4,
        "tea": 5,
        "erouter": 6,
        "dva": 7,
        "sg": 8,
        "reserved9": 9,
        "reserved10": 10,
        "reserved11": 11,
        "reserved12": 12,
        "reserved13": 13,
        "reserved14": 14,
        "reserved15": 15,
        "reserved16": 16,
        "reserved17": 17,
        "reserved18": 18,
        "reserved19": 19,
        "reserved20": 20,
        "reserved21": 21,
        "reserved22": 22,
        "reserved23": 23,
        "reserved24": 24,
        "reserved25": 25,
        "reserved26": 26,
        "reserved27": 27,
        "reserved28": 28,
        "reserved29": 29,
        "reserved30": 30,
        "reserved31": 31
      }
    },
    "status": "current",
    "description": "CPE Device types."
  },
  "AdminSrcAddrType": {
    "name": "AdminSrcAddrType",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "ftp": 2,
          "http": 3,
          "ipdr": 4,
          "legal-intercept": 5,
          "ntp": 6,
          "pc-dqos": 7,
          "pc-mm": 8,
          "remote-query": 9,
          "snmp-trap": 10,
          "ssh": 11,
          "syslog": 12,
          "radius": 13,
          "tacacs": 14,
          "telnet": 15,
          "dns": 16
        }
      }
    },
    "status": "current",
    "description": "This enumeration is for setting the source interface to use with administrative services."
  },
  "meta": {
    "comments": [
      "ASN.1 source file://MIBS/asn1/CADANT-TC.mib",
      "Produced by pysmi-0.3.4 at Tue Apr 20 15:02:14 2021",
      "On host samy-ThinkPad-T495s platform Linux version 5.8.0-50-generic by user root",
      "Using Python version 3.8.5 (default, Jan 27 2021, 15:41:15) "
    ],
    "module": "CADANT-TC"
  }
}